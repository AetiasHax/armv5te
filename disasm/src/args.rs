#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
// Generated by armv5te-generator. Do not edit!
pub enum Arguments {
    /// General-purpose register
    Reg(Reg),
    /// List of general-purpose registers
    RegList(RegList),
    /// Coprocessor register
    CoReg(CoReg),
    /// Status register
    StatusReg(StatusReg),
    /// Status register mask
    StatusMask(StatusMask),
    /// Shift operation
    Shift(Shift),
    /// Immediate shift offset
    ShiftImm(ShiftImm),
    /// Register shift offset
    ShiftReg(ShiftReg),
    /// Unsigned immediate
    UImm(u32),
    /// Signed immediate
    SImm(i32),
    /// Signed immediate offset
    OffsetImm(OffsetImm),
    /// Register offset
    OffsetReg(OffsetReg),
    /// Branch destination offset
    BranchDest(i32),
    /// Additional inStruction options for coprocessor
    CoOption(u32),
    /// Coprocessor operation to perform (user-defined)
    CoOpcode(u32),
    /// Coprocessor number
    CoprocNum(u32),
}
pub enum Register {
    R0 = 0,
    R1 = 1,
    R2 = 2,
    R3 = 3,
    R4 = 4,
    R5 = 5,
    R6 = 6,
    R7 = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    /// Frame Pointer
    Fp = 11,
    /// Intra Procedure call scratch register
    Ip = 12,
    /// Stack Pointer
    Sp = 13,
    /// Link Register
    Lr = 14,
    /// Program Counter
    Pc = 15,
}
pub enum StatusReg {
    Cpsr = 0,
    Spsr = 1,
}
pub enum Shift {
    /// Logical shift left
    Lsl = 0,
    /// Logical shift right
    Lsr = 1,
    /// Arithmetic shift right
    Asr = 2,
    /// Rotate right
    Ror = 3,
    /// Rotate right and extend
    Rrx = 4,
}
pub struct Reg {
    /// Use as base register
    pub deref: bool,
    /// Register
    pub reg: Register,
    /// When used as a base register, update this register's value
    pub writeback: bool,
}
pub struct RegList {
    /// Bitfield of registers
    pub regs: u32,
    /// Access user-mode registers from elevated mode
    pub user_mode: bool,
}
pub enum CoReg {
    C0 = 0,
    C1 = 1,
    C2 = 2,
    C3 = 3,
    C4 = 4,
    C5 = 5,
    C6 = 6,
    C7 = 7,
    C8 = 8,
    C9 = 9,
    C10 = 10,
    C11 = 11,
    C12 = 12,
    C13 = 13,
    C14 = 14,
    C15 = 15,
}
pub struct StatusMask {
    /// Control field mask (c)
    pub control: bool,
    /// Extension field mask (x)
    pub extension: bool,
    /// Flags field mask (f)
    pub flags: bool,
    /// Status register
    pub reg: StatusReg,
    /// Status field mask (s)
    pub status: bool,
}
pub struct ShiftImm {
    /// Immediate shift offset
    pub imm: u32,
    /// Shift operation
    pub op: Shift,
}
pub struct ShiftReg {
    /// Shift operation
    pub op: Shift,
    /// Register shift offset
    pub reg: Register,
}
pub struct OffsetImm {
    /// If true, add the offset to the base register and write-back AFTER derefencing the base register
    pub post_indexed: bool,
    /// Offset value
    pub value: i32,
}
pub struct OffsetReg {
    /// If true, add the offset to the base register, otherwise subtract
    pub add: bool,
    /// If true, add the offset to the base register and write-back AFTER derefencing the base register
    pub post_indexed: bool,
    /// Offset value
    pub reg: Register,
}
