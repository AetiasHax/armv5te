#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
#![allow(clippy::double_parens, clippy::unnecessary_cast)]
// Generated by unarm-generator. Do not edit!
use crate::{args::*, parse::ParsedIns};
use super::Ins;
/// These are the mnemonics of each opcode. Some mnemonics are duplicated due to them having multiple formats.
static OPCODE_MNEMONICS: [&str; 185] = [
    "adc",
    "add",
    "adr",
    "adr",
    "and",
    "asr",
    "b",
    "bl",
    "bic",
    "bkpt",
    "blx",
    "blx",
    "bx",
    "bxj",
    "cdp",
    "cdp2",
    "clrex",
    "clz",
    "cmn",
    "cmp",
    "cps",
    "csdb",
    "dbg",
    "eor",
    "ldc",
    "ldc2",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldr",
    "ldrb",
    "ldrbt",
    "ldrd",
    "ldrex",
    "ldrexb",
    "ldrexd",
    "ldrexh",
    "ldrh",
    "ldrsb",
    "ldrsh",
    "ldrt",
    "lsl",
    "lsr",
    "mcr",
    "mcr2",
    "mcrr",
    "mcrr2",
    "mla",
    "mov",
    "mov",
    "mrc",
    "mrc2",
    "mrrc",
    "mrrc2",
    "mrs",
    "msr",
    "msr",
    "mul",
    "mvn",
    "nop",
    "orr",
    "pkhbt",
    "pkhtb",
    "pld",
    "pop",
    "pop",
    "push",
    "push",
    "qadd",
    "qadd16",
    "qadd8",
    "qasx",
    "qdadd",
    "qdsub",
    "qsax",
    "qsub",
    "qsub16",
    "qsub8",
    "rev",
    "rev16",
    "revsh",
    "rfe",
    "ror",
    "rrx",
    "rsb",
    "rsc",
    "sadd16",
    "sadd8",
    "sasx",
    "sbc",
    "sel",
    "setend",
    "sev",
    "shadd16",
    "shadd8",
    "shasx",
    "shsax",
    "shsub16",
    "shsub8",
    "smla",
    "smlad",
    "smlal",
    "smlal",
    "smlald",
    "smlaw",
    "smlsd",
    "smlsld",
    "smmla",
    "smmls",
    "smmul",
    "smuad",
    "smul",
    "smull",
    "smulw",
    "smusd",
    "srs",
    "ssat",
    "ssat16",
    "ssax",
    "ssub16",
    "ssub8",
    "stc",
    "stc2",
    "stm",
    "stm",
    "stm",
    "str",
    "strb",
    "strbt",
    "strd",
    "strex",
    "strexb",
    "strexd",
    "strexh",
    "strh",
    "strt",
    "sub",
    "svc",
    "swp",
    "swpb",
    "sxtab",
    "sxtab16",
    "sxtah",
    "sxtb",
    "sxtb16",
    "sxth",
    "teq",
    "tst",
    "uadd16",
    "uadd8",
    "uasx",
    "udf",
    "uhadd16",
    "uhadd8",
    "uhasx",
    "uhsax",
    "uhsub16",
    "uhsub8",
    "umaal",
    "umlal",
    "umull",
    "uqadd16",
    "uqadd8",
    "uqasx",
    "uqsax",
    "uqsub16",
    "uqsub8",
    "usad8",
    "usada8",
    "usat",
    "usat16",
    "usax",
    "usub16",
    "usub8",
    "uxtab",
    "uxtab16",
    "uxtah",
    "uxtb",
    "uxtb16",
    "uxth",
    "wfe",
    "wfi",
    "yield",
];
#[derive(Clone, Copy, Debug, Default, PartialEq, Eq)]
#[repr(u8)]
#[non_exhaustive]
pub enum Opcode {
    /// Illegal or unknown
    #[default]
    Illegal = u8::MAX,
    /// ADC: Add with Carry
    Adc = 0,
    /// ADD: Add
    Add = 1,
    /// ADR: Add PC-relative address
    AdrA = 2,
    /// ADR: Subtract PC-relative address
    AdrS = 3,
    /// AND: Bitwise AND
    And = 4,
    /// ASR: Arithmetic Right Shift
    Asr = 5,
    /// B: Branch
    B = 6,
    /// BL: Branch and Link
    Bl = 7,
    /// BIC: Bit Clear
    Bic = 8,
    /// BKPT: Breakpoint
    Bkpt = 9,
    /// BLX: Branch and Link and Exchange to Thumb (immediate target)
    BlxI = 10,
    /// BLX: Branch and Link and Exchange to Thumb (register target)
    BlxR = 11,
    /// BX: Branch and Exchange
    Bx = 12,
    /// BXJ: Branch and Exchange to Jazelle state
    Bxj = 13,
    /// CDP: Coprocessor Data Processing
    Cdp = 14,
    /// CDP2: Coprocessor Data Processing (unconditional, extended)
    Cdp2 = 15,
    /// CLREX: Clear Exclusive
    Clrex = 16,
    /// CLZ: Count Leading Zeros
    Clz = 17,
    /// CMN: Compare Negative
    Cmn = 18,
    /// CMP: Compare
    Cmp = 19,
    /// CPS: Change Processor State
    Cps = 20,
    /// CSDB: Consumption of Speculative Data Barrier
    Csdb = 21,
    /// DBG: Debug Hint (does nothing)
    Dbg = 22,
    /// EOR: Bitwise Exclusive OR
    Eor = 23,
    /// LDC: Load Coprocessor
    Ldc = 24,
    /// LDC2: Load Coprocessor (unconditional, extended)
    Ldc2 = 25,
    /// LDM: Load Multiple (writeback)
    LdmW = 26,
    /// LDM: Load Multiple
    Ldm = 27,
    /// LDM: Load Multiple (privileged)
    LdmP = 28,
    /// LDM: Load Multiple (including PC, writeback)
    LdmPcW = 29,
    /// LDM: Load Multiple (including PC)
    LdmPc = 30,
    /// LDR: Load Register
    Ldr = 31,
    /// LDRB: Load Register Byte
    Ldrb = 32,
    /// LDRBT: Load Register Byte with Translation
    Ldrbt = 33,
    /// LDRD: Load Registers Doubleword
    Ldrd = 34,
    /// LDREX: Load Register Exclusive
    Ldrex = 35,
    /// LDREXB: Load Register Exclusive Byte
    Ldrexb = 36,
    /// LDREXD: Load Register Exclusive Doubleword
    Ldrexd = 37,
    /// LDREXH: Load Register Exclusive Halfword
    Ldrexh = 38,
    /// LDRH: Load Register Halfword
    Ldrh = 39,
    /// LDRSB: Load Register Signed Byte
    Ldrsb = 40,
    /// LDRSH: Load Register Signed Halfword
    Ldrsh = 41,
    /// LDRT: Load Register with Translation
    Ldrt = 42,
    /// LSL: Logical Shift Left
    Lsl = 43,
    /// LSR: Logical Shift Right
    Lsr = 44,
    /// MCR: Move to Coprocessor from ARM Register
    Mcr = 45,
    /// MCR2: Move to Coprocessor from ARM Register (unconditional, extended)
    Mcr2 = 46,
    /// MCRR: Move to Coprocessor from two ARM Registers
    Mcrr = 47,
    /// MCRR2: Move to Coprocessor from two ARM Registers (unconditional, extended)
    Mcrr2 = 48,
    /// MLA: Multiply Accumulate
    Mla = 49,
    /// MOV: Move immediate
    MovImm = 50,
    /// MOV: Move register
    MovReg = 51,
    /// MRC: Move to ARM Register from Coprocessor
    Mrc = 52,
    /// MRC2: Move to ARM Register from Coprocessor (unconditional, extended)
    Mrc2 = 53,
    /// MRRC: Move to two ARM Registers from Coprocessor
    Mrrc = 54,
    /// MRRC2: Move to two ARM Registers from Coprocessor (unconditional, extended)
    Mrrc2 = 55,
    /// MRS: Move to ARM Register from Status Register
    Mrs = 56,
    /// MSR: Move to Status Register from ARM Register
    MsrI = 57,
    /// MSR: Move to Status Register from ARM Register
    Msr = 58,
    /// MUL: Multiply
    Mul = 59,
    /// MVN: Move Not
    Mvn = 60,
    /// NOP: No Operation
    Nop = 61,
    /// ORR: Logical OR
    Orr = 62,
    /// PKHBT: Pack Halfword Bottom Top
    Pkhbt = 63,
    /// PKHTB: Pack Halfword Top Bottom
    Pkhtb = 64,
    /// PLD: Preload Data
    Pld = 65,
    /// POP: Pop multiple registers
    PopM = 66,
    /// POP: Pop register
    PopR = 67,
    /// PUSH: Push multiple registers
    PushM = 68,
    /// PUSH: Push register
    PushR = 69,
    /// QADD: Saturating Add
    Qadd = 70,
    /// QADD16: Saturating Add two 16-bit integers
    Qadd16 = 71,
    /// QADD8: Saturating Add four 8-bit integers
    Qadd8 = 72,
    /// QASX: Saturating Add and Subtract with Exchange
    Qasx = 73,
    /// QDADD: Saturating Double and Add
    Qdadd = 74,
    /// QDSUB: Saturating Double and Subtract
    Qdsub = 75,
    /// QSAX: Saturating Subtract and Add with Exchange
    Qsax = 76,
    /// QSUB: Saturating Subtract
    Qsub = 77,
    /// QSUB16: Saturating Subtract two 16-bit integers
    Qsub16 = 78,
    /// QSUB8: Saturating Subtract four 8-bit integers
    Qsub8 = 79,
    /// REV: Byte-Reverse Word
    Rev = 80,
    /// REV16: Byte-Reverse Packed Halfword
    Rev16 = 81,
    /// REVSH: Byte-Reverse Signed Halfword
    Revsh = 82,
    /// RFE: Return From Exception
    Rfe = 83,
    /// ROR: Rotate Right
    Ror = 84,
    /// RRX: Rotate Right with Extend
    Rrx = 85,
    /// RSB: Reverse Subtract
    Rsb = 86,
    /// RSC: Reverse Subtract with Carry
    Rsc = 87,
    /// SADD16: Signed Add two 16-bit integers
    Sadd16 = 88,
    /// SADD8: Signed Add four 8-bit integers
    Sadd8 = 89,
    /// SASX: Signed Add and Subtract with Exchange
    Sasx = 90,
    /// SBC: Subtract with Carry
    Sbc = 91,
    /// SEL: Select
    Sel = 92,
    /// SETEND: Set Endian
    Setend = 93,
    /// SEV: Send Event
    Sev = 94,
    /// SHADD16: Signed Halving Add two 16-bit integers
    Shadd16 = 95,
    /// SHADD8: Signed Halving Add four 8-bit integers
    Shadd8 = 96,
    /// SHASX: Signed Halving Add and Subtract with Exchange
    Shasx = 97,
    /// SHSAX: Signed Halving Subtract and Add with Exchange
    Shsax = 98,
    /// SHSUB16: Signed Halving Subtract two 16-bit integers
    Shsub16 = 99,
    /// SHSUB8: Signed Halving Subtract four 8-bit integers
    Shsub8 = 100,
    /// SMLA: Signed Multiply Accumulate
    Smla = 101,
    /// SMLAD: Signed Multiply Accumulate Dual
    Smlad = 102,
    /// SMLAL: Signed Multiply Accumulate Long
    Smlal = 103,
    /// SMLAL: Signed Multiply Accumulate Long
    SmlalXy = 104,
    /// SMLALD: Signed Multiply Accumulate Long Dual
    Smlald = 105,
    /// SMLAW: Signed Multiply Accumulate Word
    Smlaw = 106,
    /// SMLSD: Signed Multiply Subtract accumulate Dual
    Smlsd = 107,
    /// SMLSLD: Signed Multiply Subtract accumulate Long Dual
    Smlsld = 108,
    /// SMMLA: Signed Most significant word Multiply Accumulate
    Smmla = 109,
    /// SMMLS: Signed Most signifcant word Multiply Subtract
    Smmls = 110,
    /// SMMUL: Signed Most signifcant word Multiply
    Smmul = 111,
    /// SMUAD: Signed Multiply Add Dual
    Smuad = 112,
    /// SMUL: Signed Multiply
    Smul = 113,
    /// SMULL: Signed Multiply Long
    Smull = 114,
    /// SMULW: Signed Multiply Word
    Smulw = 115,
    /// SMUSD: Signed Multiply Subtract Dual
    Smusd = 116,
    /// SRS: Store Return State
    Srs = 117,
    /// SSAT: Signed Saturate
    Ssat = 118,
    /// SSAT16: Signed Saturate two 16-bit integers
    Ssat16 = 119,
    /// SSAX: Signed Subtract and Add with Exchange
    Ssax = 120,
    /// SSUB16: Signed Subtract two 16-bit integers
    Ssub16 = 121,
    /// SSUB8: Signed Subtract four 8-bit integers
    Ssub8 = 122,
    /// STC: Store Coprocessor
    Stc = 123,
    /// STC2: Store Coprocessor (unconditional, extended)
    Stc2 = 124,
    /// STM: Store Multiple
    Stm = 125,
    /// STM: Store Multiple (writeback)
    StmW = 126,
    /// STM: Store Multiple (privileged)
    StmP = 127,
    /// STR: Store Register
    Str = 128,
    /// STRB: Store Register Byte
    Strb = 129,
    /// STRBT: Store Register Byte with Translation
    Strbt = 130,
    /// STRD: Store Registers Doubleword
    Strd = 131,
    /// STREX: Store Register Exclusive
    Strex = 132,
    /// STREXB: Store Register Exclusive Byte
    Strexb = 133,
    /// STREXD: Store Register Exclusive Doubleword
    Strexd = 134,
    /// STREXH: Store Register Exclusive Halfword
    Strexh = 135,
    /// STRH: Store Register Halfword
    Strh = 136,
    /// STRT: Store Register with Translation
    Strt = 137,
    /// SUB: Subtract
    Sub = 138,
    /// SVC: Supervisor Call
    Svc = 139,
    /// SWP: Swap
    Swp = 140,
    /// SWPB: Swap Byte
    Swpb = 141,
    /// SXTAB: Sign Extend one Byte to 32 bits and Add
    Sxtab = 142,
    /// SXTAB16: Sign Extend two Bytes to 16 bits and Add
    Sxtab16 = 143,
    /// SXTAH: Sign Extend one Halfword to 32 bits and Add
    Sxtah = 144,
    /// SXTB: Sign Extend Byte to 32 bits
    Sxtb = 145,
    /// SXTB16: Sign Extend two Bytes to 16 bits
    Sxtb16 = 146,
    /// SXTH: Sign Extend Halfword to 32 bits
    Sxth = 147,
    /// TEQ: Test Equivalence
    Teq = 148,
    /// TST: Test
    Tst = 149,
    /// UADD16: Unsigned Add two 16-bit integers
    Uadd16 = 150,
    /// UADD8: Unsigned Add four 8-bit integers
    Uadd8 = 151,
    /// UASX: Unsigned Add and Subtract with Exchange
    Uasx = 152,
    /// UDF: Permanently Undefined
    Udf = 153,
    /// UHADD16: Unsigned Halving Add two 16-bit integers
    Uhadd16 = 154,
    /// UHADD8: Unsigned Halving Add four 8-bit integers
    Uhadd8 = 155,
    /// UHASX: Unsigned Halving Add and Subtract with Exchange
    Uhasx = 156,
    /// UHSAX: Unsigned Halving Subtract and Add with Exchange
    Uhsax = 157,
    /// UHSUB16: Unsigned Halving Subtract two 16-bit integers
    Uhsub16 = 158,
    /// UHSUB8: Unsigned Halving Subtract four 8-bit integers
    Uhsub8 = 159,
    /// UMAAL: Unsigned Multiply Accumulate Accumulate Long
    Umaal = 160,
    /// UMLAL: Unsigned Multiply Accumulate Long
    Umlal = 161,
    /// UMULL: Unsigned Multiply Long
    Umull = 162,
    /// UQADD16: Unsigned Saturating Add two 16-bit integers
    Uqadd16 = 163,
    /// UQADD8: Unsigned Saturating Add four 8-bit integers
    Uqadd8 = 164,
    /// UQASX: Unsigned Saturating Add and Subtract with Exchange
    Uqasx = 165,
    /// UQSAX: Unsigned Saturating Subtract and Add with Exchange
    Uqsax = 166,
    /// UQSUB16: Unsigned Saturating Subtract two 16-bit integers
    Uqsub16 = 167,
    /// UQSUB8: Unsigned Saturating Subtract four 8-bit integers
    Uqsub8 = 168,
    /// USAD8: Unsigned Sum of Absolute Differences of four 8-bit integer pairs
    Usad8 = 169,
    /// USADA8: Unsigned Sum of Absolute Differences of four 8-bit integer pairs and Accumulate
    Usada8 = 170,
    /// USAT: Unsigned Saturate
    Usat = 171,
    /// USAT16: Unsigned Saturate two 16-bit integers
    Usat16 = 172,
    /// USAX: Unsigned Subtract and Add with Exchange
    Usax = 173,
    /// USUB16: Unsigned Subtract two 16-bit integers
    Usub16 = 174,
    /// USUB8: Unsigned Subtract four 8-bit integers
    Usub8 = 175,
    /// UXTAB: Zero Extend Byte to 32 bits and Add
    Uxtab = 176,
    /// UXTAB16: Zero Extend two Bytes to 16 bits and Add
    Uxtab16 = 177,
    /// UXTAH: Zero Extend Halfword to 32 bits and Add
    Uxtah = 178,
    /// UXTB: Zero Extend Byte to 32 bits
    Uxtb = 179,
    /// UXTB16: Zero Extend two Bytes to 16 bits
    Uxtb16 = 180,
    /// UXTH: Zero Extend Halfword to 32 bits
    Uxth = 181,
    /// WFE: Wait For Event
    Wfe = 182,
    /// WFI: Wait For Interrupt
    Wfi = 183,
    /// YIELD: Yield
    Yield = 184,
}
impl Opcode {
    #[inline]
    pub fn find(code: u32) -> Self {
        if (code & 0x00400000) == 0x00400000 {
            if (code & 0x02000000) == 0x00000000 {
                if (code & 0x00100000) == 0x00100000 {
                    if (code & 0x00200000) == 0x00200000 {
                        if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x0de00000) == 0x00600000 {
                                            return Opcode::Rsb;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01700000 {
                                        return Opcode::Cmn;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0xfe100000) == 0xfc100000 {
                                    return Opcode::Ldc2;
                                } else if (code & 0x0e100000) == 0x0c100000 {
                                    return Opcode::Ldc;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04700000 {
                                    return Opcode::Ldrbt;
                                } else if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::Ldrb;
                                }
                            } else if code == 0xf57ff01f {
                                return Opcode::Clrex;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x00000020) == 0x00000000 {
                                    if (code & 0x00008000) == 0x00000000 {
                                        if (code & 0x01000000) == 0x00000000 {
                                            if (code & 0x0e1000f0) == 0x001000d0 {
                                                return Opcode::Ldrsb;
                                            } else if (code & 0x0de00000) == 0x00600000 {
                                                return Opcode::Rsb;
                                            }
                                        } else if (code & 0x0df0f000) == 0x01700000 {
                                            return Opcode::Cmn;
                                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                                            return Opcode::Ldrsb;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::Ldrsb;
                                    } else if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x00008000) == 0x00000000 {
                                        if (code & 0x01000000) == 0x00000000 {
                                            if (code & 0x0e1000f0) == 0x001000b0 {
                                                return Opcode::Ldrh;
                                            } else if (code & 0x0de00000) == 0x00600000 {
                                                return Opcode::Rsb;
                                            }
                                        } else if (code & 0x0df0f000) == 0x01700000 {
                                            return Opcode::Cmn;
                                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                                            return Opcode::Ldrh;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::Ldrh;
                                    } else if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x00008000) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x0e1000f0) == 0x001000f0 {
                                            return Opcode::Ldrsh;
                                        } else if (code & 0x0de00000) == 0x00600000 {
                                            return Opcode::Rsb;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01700000 {
                                        return Opcode::Cmn;
                                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                                        return Opcode::Ldrsh;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::Ldrsh;
                                } else if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04700000 {
                                    return Opcode::Ldrbt;
                                } else if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::Ldrb;
                                }
                            } else if (code & 0xfe100000) == 0xfc100000 {
                                return Opcode::Ldc2;
                            } else if (code & 0x0e100000) == 0x0c100000 {
                                return Opcode::Ldc;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000020) == 0x00000020 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x08000000) == 0x08000000 {
                                            if (code & 0x0e708000) == 0x08708000 {
                                                return Opcode::LdmPcW;
                                            }
                                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                                            return Opcode::Ldrh;
                                        } else if (code & 0x0de00000) == 0x00e00000 {
                                            return Opcode::Rsc;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::Ldrh;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                                        return Opcode::Ldrsh;
                                    } else if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::Ldrsh;
                                }
                            } else if (code & 0x00000040) == 0x00000040 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::Ldrsb;
                                    } else if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::Ldrsb;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0fe000f0) == 0x00e00090 {
                                    return Opcode::Smlal;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0ff00fff) == 0x01f00f9f {
                                return Opcode::Ldrexh;
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x00008000) == 0x00000000 {
                                        if (code & 0x0e708000) == 0x08500000 {
                                            return Opcode::LdmP;
                                        }
                                    } else if (code & 0x0e708000) == 0x08508000 {
                                        return Opcode::LdmPc;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::Ldrsb;
                                    } else if (code & 0x0de00000) == 0x00400000 {
                                        return Opcode::Sub;
                                    }
                                } else if (code & 0x0df0f000) == 0x01500000 {
                                    return Opcode::Cmp;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::Ldrsb;
                                }
                            } else if (code & 0x00008000) == 0x00008000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08508000 {
                                            return Opcode::LdmPc;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::Ldrh;
                                    } else if (code & 0x0de00000) == 0x00400000 {
                                        return Opcode::Sub;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08508000 {
                                        return Opcode::LdmPc;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::Ldrsh;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08500000 {
                                            return Opcode::LdmP;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::Ldrh;
                                    } else if (code & 0x0de00000) == 0x00400000 {
                                        return Opcode::Sub;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08500000 {
                                        return Opcode::LdmP;
                                    }
                                } else if (code & 0x0df0f000) == 0x01500000 {
                                    return Opcode::Cmp;
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::Ldrh;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08500000 {
                                        return Opcode::LdmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::Ldrsh;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::Ldrsh;
                            }
                        } else if (code & 0x00000020) == 0x00000020 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x0e1000f0) == 0x001000b0 {
                                            return Opcode::Ldrh;
                                        } else if (code & 0x0de00000) == 0x00c00000 {
                                            return Opcode::Sbc;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::Ldrh;
                                    } else if (code & 0x0de00000) == 0x01c00000 {
                                        return Opcode::Bic;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0e1000f0) == 0x001000f0 {
                                        return Opcode::Ldrsh;
                                    } else if (code & 0x0de00000) == 0x00c00000 {
                                        return Opcode::Sbc;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::Ldrsh;
                                } else if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x00008000) == 0x00000000 {
                                    if (code & 0x0e708000) == 0x08500000 {
                                        return Opcode::LdmP;
                                    }
                                } else if (code & 0x0e708000) == 0x08508000 {
                                    return Opcode::LdmPc;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::Ldrsb;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::Ldrsb;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0fe000f0) == 0x00c00090 {
                                    return Opcode::Smull;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0ff00fff) == 0x01d00f9f {
                                return Opcode::Ldrexb;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x00008000) == 0x00000000 {
                            if (code & 0x0e708000) == 0x08500000 {
                                return Opcode::LdmP;
                            }
                        } else if (code & 0x0e708000) == 0x08508000 {
                            return Opcode::LdmPc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0xfd70f000) == 0xf550f000 {
                                return Opcode::Pld;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0xfff00000) == 0xfc500000 {
                            return Opcode::Mrrc2;
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0ff00000) == 0x0c500000 {
                            return Opcode::Mrrc;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::Ldrb;
                    }
                } else if (code & 0x00000020) == 0x00000020 {
                    if (code & 0x00200000) == 0x00200000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000010) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x0de00000) == 0x00600000 {
                                            return Opcode::Rsb;
                                        }
                                    } else if (code & 0x0ff0f090) == 0x01600080 {
                                        return Opcode::Smul;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x0e1000f0) == 0x000000b0 {
                                        return Opcode::Strh;
                                    } else if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000f0 {
                                    return Opcode::Strd;
                                } else if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0e1000f0) == 0x000000b0 {
                                        return Opcode::Strh;
                                    } else if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x000000f0 {
                                    return Opcode::Strd;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000010) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00400000 {
                                        return Opcode::Sub;
                                    }
                                } else if (code & 0x0ff00090) == 0x01400080 {
                                    return Opcode::SmlalXy;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::Strh;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::Strd;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0xfff00000) == 0xfc400000 {
                            return Opcode::Mcrr2;
                        } else if (code & 0x0ff00000) == 0x0c400000 {
                            return Opcode::Mcrr;
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::Strb;
                    }
                } else if (code & 0x00200000) == 0x00200000 {
                    if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::Strbt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0xfe100000) == 0xfc000000 {
                                return Opcode::Stc2;
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0e1010f0) == 0x000000d0 {
                                    return Opcode::Ldrd;
                                } else if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0xfe5fffe0) == 0xf84d0500 {
                                return Opcode::Srs;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0xfe5fffe0) == 0xf84d0500 {
                                return Opcode::Srs;
                            }
                        } else if (code & 0x0fe000f0) == 0x00e00090 {
                            return Opcode::Smlal;
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0xfe100000) == 0xfc000000 {
                                return Opcode::Stc2;
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x00000080) == 0x00000080 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0ff0f090) == 0x01600080 {
                                    return Opcode::Smul;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0xfe5fffe0) == 0xf84d0500 {
                                return Opcode::Srs;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0fb0fff0) == 0x0120f000 {
                                return Opcode::Msr;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000080) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x0ff00ff0) == 0x01600050 {
                                        return Opcode::Qdsub;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x0ff00ff0) == 0x01e00f90 {
                            return Opcode::Strexh;
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x00010000) == 0x00000000 {
                        if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x00000200) == 0x00000000 {
                        if (code & 0xfe5fffe0) == 0xf84d0500 {
                            return Opcode::Srs;
                        }
                    } else if (code & 0x0fff0ff0) == 0x016f0f10 {
                        return Opcode::Clz;
                    }
                } else if (code & 0x00800000) == 0x00800000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04400000 {
                                        return Opcode::Strb;
                                    }
                                } else if (code & 0x0e1010f0) == 0x000000d0 {
                                    return Opcode::Ldrd;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0fe000f0) == 0x00c00090 {
                                return Opcode::Smull;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01c00f90 {
                            return Opcode::Strexb;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe5fffe0) == 0xf84d0500 {
                            return Opcode::Srs;
                        } else if (code & 0x0e700000) == 0x08400000 {
                            return Opcode::StmP;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0fbf0fff) == 0x010f0000 {
                                return Opcode::Mrs;
                            }
                        } else if (code & 0x0ff00090) == 0x01400080 {
                            return Opcode::SmlalXy;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01400050 {
                            return Opcode::Qdadd;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x0e1010f0) == 0x000000d0 {
                            return Opcode::Ldrd;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x01400090 {
                                return Opcode::Swpb;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::Strb;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::Strb;
                        }
                    } else if (code & 0x0ff000f0) == 0x00400090 {
                        return Opcode::Umaal;
                    } else if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0xfff00000) == 0xfc400000 {
                        return Opcode::Mcrr2;
                    } else if (code & 0x0ff00000) == 0x0c400000 {
                        return Opcode::Mcrr;
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0xfe5fffe0) == 0xf84d0500 {
                    return Opcode::Srs;
                } else if (code & 0x0e700000) == 0x08400000 {
                    return Opcode::StmP;
                }
            } else if (code & 0x00800000) == 0x00800000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0xfe000000) == 0xfa000000 {
                                    return Opcode::BlxI;
                                } else if (code & 0x0f000000) == 0x0a000000 {
                                    return Opcode::B;
                                }
                            } else if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::Ldrbt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00100000) == 0x00100000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff03f0) == 0x06cf0070 {
                                return Opcode::Uxtb16;
                            } else if (code & 0x0ff003f0) == 0x06c00070 {
                                return Opcode::Uxtab16;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x01000000) == 0x01000000 {
                                if (code & 0x04000000) == 0x00000000 {
                                    if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    }
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0fe00030) == 0x06e00010 {
                                    return Opcode::Usat;
                                } else if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::Strbt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x01000000 {
                                if (code & 0x04000000) == 0x00000000 {
                                    if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    }
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0ff00ff0) == 0x06e00f30 {
                                    return Opcode::Usat16;
                                } else if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::Strbt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff03f0) == 0x06ef0070 {
                                return Opcode::Uxtb;
                            } else if (code & 0x0ff003f0) == 0x06e00070 {
                                return Opcode::Uxtab;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fe00030) == 0x06e00010 {
                                return Opcode::Usat;
                            } else if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff0ff0) == 0x06ff0fb0 {
                                return Opcode::Revsh;
                            } else if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0xfff000f0) == 0xe7f000f0 {
                            return Opcode::Udf;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fff03f0) == 0x06ff0070 {
                            return Opcode::Uxth;
                        } else if (code & 0x0ff003f0) == 0x06f00070 {
                            return Opcode::Uxtah;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::Ldrbt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x00100000) == 0x00000000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0fff0000) == 0x024f0000 {
                                return Opcode::AdrS;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0fb0f000) == 0x0320f000 {
                                    return Opcode::MsrI;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::Strbt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::Strb;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0fff0000) == 0x024f0000 {
                                return Opcode::AdrS;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x0ff000d0) == 0x07400010 {
                            return Opcode::Smlald;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::Strb;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0x0ff000d0) == 0x07400050 {
                        return Opcode::Smlsld;
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::Strb;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06600f90 {
                                    return Opcode::Uqadd8;
                                } else if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::Strbt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06600ff0 {
                                return Opcode::Uqsub8;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06600f10 {
                                    return Opcode::Uqadd16;
                                } else if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::Strbt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::Strb;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06600f50 {
                                return Opcode::Uqsax;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06600f30 {
                                return Opcode::Uqasx;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::Strbt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::Strb;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06600f70 {
                            return Opcode::Uqsub16;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::Strbt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::Strb;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe000010 {
                    return Opcode::Mcr2;
                } else if (code & 0x0f100010) == 0x0e000010 {
                    return Opcode::Mcr;
                }
            } else if (code & 0x00200000) == 0x00200000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::Ldrb;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01700000 {
                                return Opcode::Cmn;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::Ldrbt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06700f90 {
                                    return Opcode::Uhadd8;
                                } else if (code & 0x0d700000) == 0x04700000 {
                                    return Opcode::Ldrbt;
                                } else if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::Ldrb;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06700ff0 {
                                return Opcode::Uhsub8;
                            } else if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0df0f000) == 0x01700000 {
                            return Opcode::Cmn;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06700f10 {
                                    return Opcode::Uhadd16;
                                } else if (code & 0x0d700000) == 0x04700000 {
                                    return Opcode::Ldrbt;
                                } else if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::Ldrb;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06700f50 {
                                return Opcode::Uhsax;
                            } else if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0df0f000) == 0x01700000 {
                            return Opcode::Cmn;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06700f30 {
                                return Opcode::Uhasx;
                            } else if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::Ldrbt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06700f70 {
                            return Opcode::Uhsub16;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::Ldrbt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0df0f000) == 0x01700000 {
                        return Opcode::Cmn;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x00000010) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0df0f000) == 0x01500000 {
                            return Opcode::Cmp;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0xfd70f000) == 0xf550f000 {
                        return Opcode::Pld;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::Ldrb;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0xff000010) == 0xfe000000 {
                    return Opcode::Cdp2;
                } else if (code & 0x0f000010) == 0x0e000000 {
                    return Opcode::Cdp;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0xfd70f000) == 0xf550f000 {
                                return Opcode::Pld;
                            } else if (code & 0x0ff000d0) == 0x075000d0 {
                                return Opcode::Smmls;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::Ldrb;
                            }
                        } else if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0ff0f0d0) == 0x0750f010 {
                            return Opcode::Smmul;
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0ff000d0) == 0x07500010 {
                            return Opcode::Smmla;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0df0f000) == 0x01500000 {
                        return Opcode::Cmp;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00000080) == 0x00000080 {
                if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06500f90 {
                            return Opcode::Uadd8;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500ff0 {
                        return Opcode::Usub8;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::Ldrb;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06500f10 {
                            return Opcode::Uadd16;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::Ldrb;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500f50 {
                        return Opcode::Usax;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::Ldrb;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500f30 {
                        return Opcode::Uasx;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::Ldrb;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x0ff00ff0) == 0x06500f70 {
                    return Opcode::Usub16;
                } else if (code & 0x0c500000) == 0x04500000 {
                    return Opcode::Ldrb;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe100010 {
                return Opcode::Mrc2;
            } else if (code & 0x0f100010) == 0x0e100010 {
                return Opcode::Mrc;
            }
        } else if (code & 0x00100000) == 0x00100000 {
            if (code & 0x00000010) == 0x00000000 {
                if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00000000 {
                                        return Opcode::And;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x02000000) == 0x00000000 {
                            if (code & 0xfe50ffff) == 0xf8100a00 {
                                return Opcode::Rfe;
                            } else if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x02000000) == 0x02000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x02000000) == 0x02000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0fff0fff) == 0x049d0004 {
                            return Opcode::PopR;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x02000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0xfe100000) == 0xfc100000 {
                                return Opcode::Ldc2;
                            } else if (code & 0x0e100000) == 0x0c100000 {
                                return Opcode::Ldc;
                            }
                        } else if (code & 0xfe50ffff) == 0xf8100a00 {
                            return Opcode::Rfe;
                        } else if (code & 0x0fff0000) == 0x08bd0000 {
                            return Opcode::PopM;
                        } else if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01300000 {
                                return Opcode::Teq;
                            }
                        } else if (code & 0x0fef0000) == 0x03a00000 {
                            return Opcode::MovImm;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::Ldrt;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01300000 {
                                    return Opcode::Teq;
                                }
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0fef0060) == 0x01a00040 {
                                return Opcode::Asr;
                            }
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0fef0ff0) == 0x01a00000 {
                        return Opcode::MovReg;
                    } else if (code & 0x0fef0060) == 0x01a00000 {
                        return Opcode::Lsl;
                    }
                } else if (code & 0x00800000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01300000 {
                                return Opcode::Teq;
                            }
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::Ldrt;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::Ldrt;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0fef0060) == 0x01a00020 {
                            return Opcode::Lsr;
                        }
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x0fef0ff0) == 0x01a00060 {
                    return Opcode::Rrx;
                } else if (code & 0x0fef0060) == 0x01a00060 {
                    return Opcode::Ror;
                }
            } else if (code & 0x00200000) == 0x00000000 {
                if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x02000000) == 0x02000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                }
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::Ldrsb;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0ff00fff) == 0x01900f9f {
                                    return Opcode::Ldrex;
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::Ldrsb;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::Ldrh;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::Ldrh;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0df0f000) == 0x01100000 {
                                return Opcode::Tst;
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::Ldrsh;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::Ldrsh;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x02000000) == 0x00000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::Ldrh;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::Ldrh;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::Ldrsh;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::Ldrsh;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x02000000) == 0x02000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::Ldrsb;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::Ldrsb;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0fe0f0f0) == 0x00000090 {
                            return Opcode::Mul;
                        } else if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08100000 {
                            return Opcode::Ldm;
                        }
                    } else if (code & 0x0fe000f0) == 0x00800090 {
                        return Opcode::Umull;
                    } else if (code & 0x0de00000) == 0x00800000 {
                        return Opcode::Add;
                    }
                } else if (code & 0x00000080) == 0x00000080 {
                    if (code & 0x02000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0xff100010) == 0xfe100010 {
                            return Opcode::Mrc2;
                        } else if (code & 0x0f100010) == 0x0e100010 {
                            return Opcode::Mrc;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06100f90 {
                            return Opcode::Sadd8;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06100ff0 {
                        return Opcode::Ssub8;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x02000000) == 0x00000000 {
                        if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06100f10 {
                            return Opcode::Sadd16;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06100f50 {
                        return Opcode::Ssax;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x06100f30 {
                        return Opcode::Sasx;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x0ff00ff0) == 0x06100f70 {
                    return Opcode::Ssub16;
                } else if (code & 0x0c500000) == 0x04100000 {
                    return Opcode::Ldr;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00000100) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0fe00030) == 0x06a00010 {
                                return Opcode::Ssat;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::Ldrt;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0fff03f0) == 0x06bf0070 {
                            return Opcode::Sxth;
                        } else if (code & 0x0ff003f0) == 0x06b00070 {
                            return Opcode::Sxtah;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x02000000) == 0x00000000 {
                        if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x00800000) == 0x00800000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0fe00030) == 0x06a00010 {
                                return Opcode::Ssat;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::Ldrt;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0fff0ff0) == 0x06bf0f30 {
                                return Opcode::Rev;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::Ldrt;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0fff0ff0) == 0x06bf0fb0 {
                            return Opcode::Rev16;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x02000000) == 0x00000000 {
                        if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06300f90 {
                                return Opcode::Shadd8;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::Ldrt;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06300ff0 {
                            return Opcode::Shsub8;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06300f10 {
                                return Opcode::Shadd16;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::Ldrt;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06300f50 {
                            return Opcode::Shsax;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06300f30 {
                            return Opcode::Shasx;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::Ldrt;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06300f70 {
                        return Opcode::Shsub16;
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::Ldrt;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x02000000) == 0x00000000 {
                    if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x00800000) == 0x00000000 {
                if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0df0f000) == 0x01300000 {
                            return Opcode::Teq;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0df0f000) == 0x01300000 {
                            return Opcode::Teq;
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::Ldrsb;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0fe000f0) == 0x00200090 {
                            return Opcode::Mla;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                        return Opcode::Ldrsb;
                    } else if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                            return Opcode::Ldrh;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0df0f000) == 0x01300000 {
                        return Opcode::Teq;
                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                        return Opcode::Ldrh;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                        return Opcode::Ldrsh;
                    } else if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x0e700000) == 0x08300000 {
                        return Opcode::LdmW;
                    }
                } else if (code & 0x0df0f000) == 0x01300000 {
                    return Opcode::Teq;
                } else if (code & 0x0e1000f0) == 0x001000f0 {
                    return Opcode::Ldrsh;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x02000000) == 0x00000000 {
                        if (code & 0x0fff0000) == 0x08bd0000 {
                            return Opcode::PopM;
                        } else if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0fe000f0) == 0x00a00090 {
                            return Opcode::Umlal;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                        return Opcode::Ldrsb;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x0e1000f0) == 0x001000b0 {
                        return Opcode::Ldrh;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x0e1000f0) == 0x001000f0 {
                    return Opcode::Ldrsh;
                } else if (code & 0x0de00000) == 0x00a00000 {
                    return Opcode::Adc;
                }
            } else if (code & 0x00000020) == 0x00000000 {
                if (code & 0x02000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0ff00fff) == 0x01b00f9f {
                            return Opcode::Ldrexd;
                        } else if (code & 0x0fef0060) == 0x01a00000 {
                            return Opcode::Lsl;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0fef0060) == 0x01a00040 {
                        return Opcode::Asr;
                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                        return Opcode::Ldrsb;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0fef0000) == 0x03a00000 {
                        return Opcode::MovImm;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x02000000) == 0x00000000 {
                if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0fef0060) == 0x01a00020 {
                        return Opcode::Lsr;
                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                        return Opcode::Ldrh;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x0e700000) == 0x08300000 {
                        return Opcode::LdmW;
                    }
                } else if (code & 0x0fef0060) == 0x01a00060 {
                    return Opcode::Ror;
                } else if (code & 0x0e1000f0) == 0x001000f0 {
                    return Opcode::Ldrsh;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x0fef0000) == 0x03a00000 {
                    return Opcode::MovImm;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x00000010) == 0x00000000 {
            if (code & 0x02000000) == 0x02000000 {
                if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Svc;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fff0000) == 0x028f0000 {
                            return Opcode::AdrA;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::Strt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x00800000) == 0x00800000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0fef0000) == 0x03a00000 {
                            return Opcode::MovImm;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00000004) == 0x00000004 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fffffff) == 0x0320f004 {
                            return Opcode::Sev;
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000001) == 0x00000000 {
                        if (code & 0x00000002) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0fffffff) == 0x0320f000 {
                                return Opcode::Nop;
                            } else if (code & 0x0fb0f000) == 0x0320f000 {
                                return Opcode::MsrI;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fffffff) == 0x0320f002 {
                            return Opcode::Wfe;
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x00000002) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fffffff) == 0x0320f001 {
                            return Opcode::Yield;
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0fffffff) == 0x0320f003 {
                        return Opcode::Wfi;
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00800000) == 0x00800000 {
                if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::Strt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0fef0060) == 0x01a00040 {
                                    return Opcode::Asr;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fef0ff0) == 0x01a00000 {
                            return Opcode::MovReg;
                        } else if (code & 0x0fef0060) == 0x01a00000 {
                            return Opcode::Lsl;
                        }
                    } else if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0fef0060) == 0x01a00020 {
                                return Opcode::Lsr;
                            }
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0fef0ff0) == 0x01a00060 {
                        return Opcode::Rrx;
                    } else if (code & 0x0fef0060) == 0x01a00060 {
                        return Opcode::Ror;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00200000) == 0x00000000 {
                if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0xfff1fe20) == 0xf1000000 {
                            return Opcode::Cps;
                        } else if (code & 0x0ff00090) == 0x01000080 {
                            return Opcode::Smla;
                        }
                    } else if (code & 0x00010000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0xfff1fe20) == 0xf1000000 {
                                return Opcode::Cps;
                            }
                        } else if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x00020000) == 0x00000000 {
                        if (code & 0xfffffdff) == 0xf1010000 {
                            return Opcode::Setend;
                        }
                    } else if (code & 0x0fbf0fff) == 0x010f0000 {
                        return Opcode::Mrs;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0fb0fff0) == 0x0120f000 {
                                return Opcode::Msr;
                            }
                        } else if (code & 0x0ff000b0) == 0x01200080 {
                            return Opcode::Smlaw;
                        }
                    } else if (code & 0x0fff0000) == 0x092d0000 {
                        return Opcode::PushM;
                    } else if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x0ffffff0) == 0x012fff20 {
                            return Opcode::Bxj;
                        }
                    } else if (code & 0x0ff0f0b0) == 0x012000a0 {
                        return Opcode::Smulw;
                    }
                } else if (code & 0x0fff0000) == 0x092d0000 {
                    return Opcode::PushM;
                } else if (code & 0x0e700000) == 0x08200000 {
                    return Opcode::StmW;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x0fff0fff) == 0x052d0004 {
                    return Opcode::PushR;
                } else if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0xfe100000) == 0xfc000000 {
                return Opcode::Stc2;
            } else if (code & 0x0e100000) == 0x0c000000 {
                return Opcode::Stc;
            }
        } else if (code & 0x02000000) == 0x00000000 {
            if (code & 0x00200000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000020 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::Strh;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::Strd;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x00800000) == 0x00800000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0xfff1fe20) == 0xf1000000 {
                        return Opcode::Cps;
                    } else if (code & 0x0ff00ff0) == 0x01000050 {
                        return Opcode::Qadd;
                    }
                } else if (code & 0x00000040) == 0x00000040 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1010f0) == 0x000000d0 {
                                    return Opcode::Ldrd;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0xfff1fe20) == 0xf1000000 {
                                return Opcode::Cps;
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e1010f0) == 0x000000d0 {
                            return Opcode::Ldrd;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00800000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0fe0f0f0) == 0x00000090 {
                                return Opcode::Mul;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0xfff1fe20) == 0xf1000000 {
                            return Opcode::Cps;
                        } else if (code & 0x0ff00ff0) == 0x01000090 {
                            return Opcode::Swp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0fe000f0) == 0x00800090 {
                            return Opcode::Umull;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x0ff00ff0) == 0x01800f90 {
                        return Opcode::Strex;
                    } else if (code & 0x0de00000) == 0x01800000 {
                        return Opcode::Orr;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08200000 {
                                        return Opcode::StmW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::Strh;
                                } else if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::Strh;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::Strd;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::Strd;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0e1010f0) == 0x000000d0 {
                                return Opcode::Ldrd;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1010f0) == 0x000000d0 {
                            return Opcode::Ldrd;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0fe000f0) == 0x00200090 {
                            return Opcode::Mla;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0fe000f0) == 0x00a00090 {
                        return Opcode::Umlal;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00000020) == 0x00000000 {
                if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0ffffff0) == 0x012fff10 {
                                    return Opcode::Bx;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01a00f90 {
                            return Opcode::Strexd;
                        } else if (code & 0x0fef0060) == 0x01a00000 {
                            return Opcode::Lsl;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x01200050 {
                                return Opcode::Qsub;
                            }
                        } else if (code & 0x0fef0060) == 0x01a00040 {
                            return Opcode::Asr;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0fef0060) == 0x01a00040 {
                        return Opcode::Asr;
                    } else if (code & 0x0e1010f0) == 0x000000d0 {
                        return Opcode::Ldrd;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0fff0000) == 0x092d0000 {
                        return Opcode::PushM;
                    } else if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x00010000) == 0x00000000 {
                            if (code & 0x0fef0060) == 0x01a00020 {
                                return Opcode::Lsr;
                            }
                        } else if (code & 0x0ffffff0) == 0x012fff30 {
                            return Opcode::BlxR;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0fef0060) == 0x01a00020 {
                        return Opcode::Lsr;
                    } else if (code & 0x0e1000f0) == 0x000000b0 {
                        return Opcode::Strh;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0xfff000f0) == 0xe1200070 {
                            return Opcode::Bkpt;
                        }
                    } else if (code & 0x0fef0060) == 0x01a00060 {
                        return Opcode::Ror;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x0fef0060) == 0x01a00060 {
                    return Opcode::Ror;
                } else if (code & 0x0e1000f0) == 0x000000f0 {
                    return Opcode::Strd;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0x0fff0000) == 0x092d0000 {
                    return Opcode::PushM;
                } else if (code & 0x0e700000) == 0x08200000 {
                    return Opcode::StmW;
                }
            } else if (code & 0xfe100000) == 0xfc000000 {
                return Opcode::Stc2;
            } else if (code & 0x0e100000) == 0x0c000000 {
                return Opcode::Stc;
            }
        } else if (code & 0x00200000) == 0x00000000 {
            if (code & 0x01000000) == 0x01000000 {
                if (code & 0x00000040) == 0x00000040 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0ff0f0d0) == 0x0700f050 {
                            return Opcode::Smusd;
                        } else if (code & 0x0ff000d0) == 0x07000050 {
                            return Opcode::Smlsd;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0x00800000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0ff0f0d0) == 0x0700f010 {
                            return Opcode::Smuad;
                        } else if (code & 0x0ff000d0) == 0x07000010 {
                            return Opcode::Smlad;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0ff0f0f0) == 0x0780f010 {
                        return Opcode::Usad8;
                    } else if (code & 0x0ff000f0) == 0x07800010 {
                        return Opcode::Usada8;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x0f000000) == 0x0f000000 {
                    return Opcode::Svc;
                }
            } else if (code & 0x00800000) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xff100010) == 0xfe000010 {
                    return Opcode::Mcr2;
                } else if (code & 0x0f100010) == 0x0e000010 {
                    return Opcode::Mcr;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00070) == 0x06800010 {
                            return Opcode::Pkhbt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0ff00070) == 0x06800050 {
                        return Opcode::Pkhtb;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06800fb0 {
                            return Opcode::Sel;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x0fff03f0) == 0x068f0070 {
                    return Opcode::Sxtb16;
                } else if (code & 0x0ff003f0) == 0x06800070 {
                    return Opcode::Sxtab16;
                } else if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x0fff0000) == 0x028f0000 {
                    return Opcode::AdrA;
                } else if (code & 0x0de00000) == 0x00800000 {
                    return Opcode::Add;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0a000000 {
                return Opcode::B;
            }
        } else if (code & 0x00800000) == 0x00800000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0fef0000) == 0x03a00000 {
                                return Opcode::MovImm;
                            }
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fe00030) == 0x06a00010 {
                            return Opcode::Ssat;
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::Strt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0fef0000) == 0x03a00000 {
                                return Opcode::MovImm;
                            }
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0ff00ff0) == 0x06a00f30 {
                            return Opcode::Ssat16;
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::Strt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0fff03f0) == 0x06af0070 {
                        return Opcode::Sxtb;
                    } else if (code & 0x0ff003f0) == 0x06a00070 {
                        return Opcode::Sxtab;
                    } else if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x0fef0000) == 0x03a00000 {
                    return Opcode::MovImm;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Svc;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe000010 {
                return Opcode::Mcr2;
            } else if (code & 0x0f100010) == 0x0e000010 {
                return Opcode::Mcr;
            }
        } else if (code & 0x04000000) == 0x04000000 {
            if (code & 0x00000080) == 0x00000080 {
                if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Svc;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x06200f90 {
                        return Opcode::Qadd8;
                    } else if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x0ff00ff0) == 0x06200ff0 {
                    return Opcode::Qsub8;
                } else if (code & 0x0d700000) == 0x04200000 {
                    return Opcode::Strt;
                } else if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06200f10 {
                            return Opcode::Qadd16;
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::Strt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06200f50 {
                        return Opcode::Qsax;
                    } else if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x06200f30 {
                        return Opcode::Qasx;
                    } else if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::Strt;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x0ff00ff0) == 0x06200f70 {
                    return Opcode::Qsub16;
                } else if (code & 0x0d700000) == 0x04200000 {
                    return Opcode::Strt;
                } else if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x0f000000) == 0x0f000000 {
                    return Opcode::Svc;
                }
            } else if (code & 0xff100010) == 0xfe000010 {
                return Opcode::Mcr2;
            } else if (code & 0x0f100010) == 0x0e000010 {
                return Opcode::Mcr;
            }
        } else if (code & 0x01000000) == 0x00000000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x0de00000) == 0x00200000 {
                    return Opcode::Eor;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0a000000 {
                return Opcode::B;
            }
        } else if (code & 0x08000000) == 0x08000000 {
            if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x00000020) == 0x00000000 {
            if (code & 0x0fffffff) == 0x0320f014 {
                return Opcode::Csdb;
            } else if (code & 0x0fb0f000) == 0x0320f000 {
                return Opcode::MsrI;
            }
        } else if (code & 0x0ffffff0) == 0x0320f0f0 {
            return Opcode::Dbg;
        } else if (code & 0x0fb0f000) == 0x0320f000 {
            return Opcode::MsrI;
        }
        Opcode::Illegal
    }
    pub fn mnemonic(self) -> &'static str {
        OPCODE_MNEMONICS[self as usize]
    }
    pub fn count() -> usize {
        185
    }
}
impl Ins {
    /// Rn: First source operand register
    #[inline(always)]
    pub fn field_rn(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rn_wb: Source operand register with writeback
    #[inline(always)]
    pub fn field_rn_wb(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: true,
        }
    }
    /// Rn_deref: Base register
    #[inline(always)]
    pub fn field_rn_deref(&self) -> Reg {
        Reg {
            deref: true,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rn_deref_wb: Base register with writeback
    #[inline(always)]
    pub fn field_rn_deref_wb(&self) -> Reg {
        Reg {
            deref: true,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: true,
        }
    }
    /// Rn_12: First source operand register
    #[inline(always)]
    pub fn field_rn_12(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rm: Second source operand register
    #[inline(always)]
    pub fn field_rm(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse((self.code & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rd: Destination register
    #[inline(always)]
    pub fn field_rd(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rs: Register containing shift offset
    #[inline(always)]
    pub fn field_rs(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 8) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rt: Transferred register
    #[inline(always)]
    pub fn field_rt(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rt1: First transferred register
    #[inline(always)]
    pub fn field_rt1(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 13) & 0x00000007) << 1),
            writeback: false,
        }
    }
    /// Rt2: Second transferred register
    #[inline(always)]
    pub fn field_rt2(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse((((self.code >> 13) & 0x00000007) << 1) | 1),
            writeback: false,
        }
    }
    /// RdHi: Upper 32-bit long destination register
    #[inline(always)]
    pub fn field_rdhi(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// RdLo: Lower 32-bit long destination register
    #[inline(always)]
    pub fn field_rdlo(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// sp_wb: SP optionally with writeback
    #[inline(always)]
    pub fn field_sp_wb(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(13),
            writeback: (((self.code >> 21) & 0x00000001)) != 0,
        }
    }
    /// registers: List of registers
    #[inline(always)]
    pub fn field_registers(&self) -> RegList {
        RegList {
            regs: (self.code & 0x0000ffff),
            user_mode: false,
        }
    }
    /// registers_c: List of registers (with ^ suffix)
    #[inline(always)]
    pub fn field_registers_c(&self) -> RegList {
        RegList {
            regs: (self.code & 0x0000ffff),
            user_mode: true,
        }
    }
    /// Rt_list: List of one register
    #[inline(always)]
    pub fn field_rt_list(&self) -> RegList {
        RegList {
            regs: 1 << ((self.code >> 12) & 0x0000000f),
            user_mode: false,
        }
    }
    /// CRn: First source coprocessor register
    #[inline(always)]
    pub fn field_crn(&self) -> CoReg {
        CoReg::parse(((self.code >> 16) & 0x0000000f))
    }
    /// CRm: Second source coprocessor register
    #[inline(always)]
    pub fn field_crm(&self) -> CoReg {
        CoReg::parse((self.code & 0x0000000f))
    }
    /// CRd: Destination coprocessor register
    #[inline(always)]
    pub fn field_crd(&self) -> CoReg {
        CoReg::parse(((self.code >> 12) & 0x0000000f))
    }
    /// immed_5: 5-bit immediate
    #[inline(always)]
    pub fn field_immed_5(&self) -> u32 {
        ((self.code >> 7) & 0x0000001f)
    }
    /// rotated_immed_8: 8-bit immediate
    #[inline(always)]
    pub fn field_rotated_immed_8(&self) -> u32 {
        (self.code & 0x000000ff).rotate_right(((self.code >> 8) & 0x0000000f) << 1)
    }
    /// rotated_immed_8_neg: 8-bit signed immediate
    #[inline(always)]
    pub fn field_rotated_immed_8_neg(&self) -> i32 {
        (-((self.code & 0x000000ff).rotate_right(((self.code >> 8) & 0x0000000f) << 1)
            as i32)) as i32
    }
    /// immed_24: 24-bit immediate
    #[inline(always)]
    pub fn field_immed_24(&self) -> u32 {
        (self.code & 0x00ffffff)
    }
    /// offset_8: 8-bit immediate offset
    #[inline(always)]
    pub fn field_offset_8(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = ((self.code & 0x0000000f)
                    | (((self.code >> 8) & 0x0000000f) << 4)) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// post_offset_8: 8-bit immediate post-indexed offset
    #[inline(always)]
    pub fn field_post_offset_8(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = ((self.code & 0x0000000f)
                    | (((self.code >> 8) & 0x0000000f) << 4)) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// offset_12: 12-bit immediate offset
    #[inline(always)]
    pub fn field_offset_12(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = (self.code & 0x00000fff) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// post_offset_12: 12-bit immediate post-indexed offset
    #[inline(always)]
    pub fn field_post_offset_12(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = (self.code & 0x00000fff) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// shift_imm: Immediate shift offset
    #[inline(always)]
    pub fn field_shift_imm(&self) -> ShiftImm {
        ShiftImm {
            imm: {
                let value = ((self.code >> 7) & 0x0000001f);
                match ((self.code >> 5) & 0x00000003) {
                    1 | 2 => if value == 0 { 32 } else { value }
                    _ => value,
                }
            },
            op: Shift::parse(((self.code >> 5) & 0x00000003)),
        }
    }
    /// shift_reg: Register shift offset
    #[inline(always)]
    pub fn field_shift_reg(&self) -> ShiftReg {
        ShiftReg {
            op: Shift::parse(((self.code >> 5) & 0x00000003)),
            reg: Register::parse(((self.code >> 8) & 0x0000000f)),
        }
    }
    /// rrx: Rotate right with extend
    #[inline(always)]
    pub fn field_rrx(&self) -> Shift {
        Shift::parse(4)
    }
    /// reg_offset: Register offset
    #[inline(always)]
    pub fn field_reg_offset(&self) -> OffsetReg {
        OffsetReg {
            add: (((self.code >> 23) & 0x00000001)) != 0,
            post_indexed: false,
            reg: Register::parse((self.code & 0x0000000f)),
        }
    }
    /// reg_post_offset: Register post-indexed offset
    #[inline(always)]
    pub fn field_reg_post_offset(&self) -> OffsetReg {
        OffsetReg {
            add: (((self.code >> 23) & 0x00000001)) != 0,
            post_indexed: true,
            reg: Register::parse((self.code & 0x0000000f)),
        }
    }
    /// R: Move SPSR (1) or CPSR (0)
    #[inline(always)]
    pub fn field_r(&self) -> StatusReg {
        StatusReg::parse(((self.code >> 22) & 0x00000001))
    }
    /// coproc_offset: 8-bit immediate coprocessor offset
    #[inline(always)]
    pub fn field_coproc_offset(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = ((self.code & 0x000000ff) << 2) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// coproc_post_offset: 8-bit immediate coprocessor offset
    #[inline(always)]
    pub fn field_coproc_post_offset(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = ((self.code & 0x000000ff) << 2) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// option: Additional instruction options for coprocessor
    #[inline(always)]
    pub fn field_option(&self) -> u32 {
        (self.code & 0x000000ff)
    }
    /// dbg_option: Debug Hint option
    #[inline(always)]
    pub fn field_dbg_option(&self) -> u32 {
        (self.code & 0x0000000f)
    }
    /// branch_offset: 24-bit signed B/BL target offset
    #[inline(always)]
    pub fn field_branch_offset(&self) -> i32 {
        (((((self.code & 0x00ffffff) << 2) + 8) as i32) << 8 >> 8) as i32
    }
    /// blx_offset: 24-bit signed BLX target offset
    #[inline(always)]
    pub fn field_blx_offset(&self) -> i32 {
        (((((self.code & 0x00ffffff) << 2 | ((self.code >> 24) & 0x00000001)) + 8)
            as i32) << 8 >> 8) as i32
    }
    /// immed_16: 16-bit immediate in bits 0..4 and 8..20
    #[inline(always)]
    pub fn field_immed_16(&self) -> u32 {
        (self.code & 0x0000000f) | ((self.code >> 8) & 0x00000fff) << 4
    }
    /// field_mask: Status fields to set
    #[inline(always)]
    pub fn field_field_mask(&self) -> StatusMask {
        StatusMask {
            control: (((self.code >> 16) & 0x00000001)) != 0,
            extension: (((self.code >> 17) & 0x00000001)) != 0,
            flags: (((self.code >> 19) & 0x00000001)) != 0,
            reg: StatusReg::parse(((self.code >> 22) & 0x00000001)),
            status: (((self.code >> 18) & 0x00000001)) != 0,
        }
    }
    /// opcode: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub fn field_opcode(&self) -> u32 {
        ((self.code >> 4) & 0x0000000f)
    }
    /// codat_opcode_1: Coprocessor operation to perform (user-defined, used by CDP instruction)
    #[inline(always)]
    pub fn field_codat_opcode_1(&self) -> u32 {
        ((self.code >> 20) & 0x0000000f)
    }
    /// comov_opcode_1: Coprocessor operation to perform (user-defined, used by MCR/MRC instructions)
    #[inline(always)]
    pub fn field_comov_opcode_1(&self) -> u32 {
        ((self.code >> 21) & 0x00000007)
    }
    /// opcode_2: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub fn field_opcode_2(&self) -> u32 {
        ((self.code >> 5) & 0x00000007)
    }
    /// coproc: Coprocessor number
    #[inline(always)]
    pub fn field_coproc(&self) -> u32 {
        ((self.code >> 8) & 0x0000000f)
    }
    /// cpsr_flags: CPSR flags
    #[inline(always)]
    pub fn field_cpsr_flags(&self) -> CpsrFlags {
        CpsrFlags {
            a: (((self.code >> 8) & 0x00000001)) != 0,
            enable: (((self.code >> 18) & 0x00000001)) != 0,
            f: (((self.code >> 6) & 0x00000001)) != 0,
            i: (((self.code >> 7) & 0x00000001)) != 0,
        }
    }
    /// cpsr_mode: CPSR mode
    #[inline(always)]
    pub fn field_cpsr_mode(&self) -> CpsrMode {
        CpsrMode {
            mode: (self.code & 0x0000001f),
            writeback: (((self.code >> 21) & 0x00000001)) != 0,
        }
    }
    /// spsr_mode: SPSR mode
    #[inline(always)]
    pub fn field_spsr_mode(&self) -> u32 {
        (self.code & 0x0000001f)
    }
    /// endian: Endian specifier
    #[inline(always)]
    pub fn field_endian(&self) -> Endian {
        Endian::parse(((self.code >> 9) & 0x00000001))
    }
    /// ssat_imm: Bit position for saturation
    #[inline(always)]
    pub fn field_ssat_imm(&self) -> u32 {
        ((self.code >> 16) & 0x0000001f) + 1
    }
    /// usat_imm: Bit position for saturation
    #[inline(always)]
    pub fn field_usat_imm(&self) -> u32 {
        ((self.code >> 16) & 0x0000001f)
    }
    /// S: Update condition status flags
    #[inline(always)]
    pub const fn modifier_s(&self) -> bool {
        (self.code & 0x00100000) == 0x00100000
    }
    /// L: Long coprocessor load (e.g. double instead of float)
    #[inline(always)]
    pub const fn modifier_l(&self) -> bool {
        (self.code & 0x00400000) == 0x00400000
    }
    /// y: Second multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_y(&self) -> bool {
        (self.code & 0x00000040) == 0x00000040
    }
    /// x: First multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_x(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// dual: Exchange halfwords in the second operand
    #[inline(always)]
    pub const fn modifier_dual(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// rounded: Round the multiplication
    #[inline(always)]
    pub const fn modifier_rounded(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// imod: Modify interrupt flags
    #[inline(always)]
    pub const fn modifier_imod(&self) -> Imod {
        if (self.code & 0x000e0000) == 0x00080000 {
            Imod::Ie
        } else if (self.code & 0x000e0000) == 0x000a0000 {
            Imod::IeMode
        } else if (self.code & 0x000e0000) == 0x000c0000 {
            Imod::Id
        } else if (self.code & 0x000e0000) == 0x000e0000 {
            Imod::IdMode
        } else if (self.code & 0x000e0000) == 0x00020000 {
            Imod::Mode
        } else {
            Imod::Illegal
        }
    }
    /// pack_shift: Pack shift operand
    #[inline(always)]
    pub const fn modifier_pack_shift(&self) -> PackShift {
        if (self.code & 0x00000f80) == 0x00000000 {
            PackShift::None
        } else {
            PackShift::ShiftImm
        }
    }
    /// rfe_rn: RFE source operand
    #[inline(always)]
    pub const fn modifier_rfe_rn(&self) -> RfeRn {
        match self.code & 0x00200000 {
            0x00200000 => RfeRn::Writeback,
            0x00000000 => RfeRn::NoWriteback,
            _ => RfeRn::Illegal,
        }
    }
    /// sat_shift: Saturation shift
    #[inline(always)]
    pub const fn modifier_sat_shift(&self) -> SatShift {
        if (self.code & 0x00000fe0) == 0x00000000 {
            SatShift::None
        } else {
            SatShift::ShiftImm
        }
    }
    /// ext_shift: Extend shift
    #[inline(always)]
    pub const fn modifier_ext_shift(&self) -> ExtShift {
        if (self.code & 0x00000f80) == 0x00000000 {
            ExtShift::None
        } else {
            ExtShift::RorImm
        }
    }
    /// shift_arg: Second operand for shift instructions
    #[inline(always)]
    pub const fn modifier_shift_arg(&self) -> ShiftArg {
        if (self.code & 0x00000090) == 0x00000010 {
            ShiftArg::Reg
        } else if (self.code & 0x00000010) == 0x00000000 {
            ShiftArg::Imm
        } else {
            ShiftArg::Illegal
        }
    }
    /// cond: Condition code
    #[inline(always)]
    pub const fn modifier_cond(&self) -> Cond {
        match self.code & 0xf0000000 {
            0x00000000 => Cond::Eq,
            0x10000000 => Cond::Ne,
            0x20000000 => Cond::Hs,
            0x30000000 => Cond::Lo,
            0x40000000 => Cond::Mi,
            0x50000000 => Cond::Pl,
            0x60000000 => Cond::Vs,
            0x70000000 => Cond::Vc,
            0x80000000 => Cond::Hi,
            0x90000000 => Cond::Ls,
            0xa0000000 => Cond::Ge,
            0xb0000000 => Cond::Lt,
            0xc0000000 => Cond::Gt,
            0xd0000000 => Cond::Le,
            0xe0000000 => Cond::Al,
            _ => Cond::Illegal,
        }
    }
    /// addr_data: Data-processing operands
    #[inline(always)]
    pub const fn modifier_addr_data(&self) -> AddrData {
        if (self.code & 0x0e000ff0) == 0x00000000 {
            AddrData::Reg
        } else if (self.code & 0x0e000ff0) == 0x00000060 {
            AddrData::Rrx
        } else if (self.code & 0x0e000090) == 0x00000010 {
            AddrData::ShiftReg
        } else if (self.code & 0x0e000010) == 0x00000000 {
            AddrData::ShiftImm
        } else if (self.code & 0x0e000000) == 0x02000000 {
            AddrData::Imm
        } else {
            AddrData::Illegal
        }
    }
    /// addr_ldr_str: Load and Store Word or Unsigned Byte
    #[inline(always)]
    pub const fn modifier_addr_ldr_str(&self) -> AddrLdrStr {
        if (self.code & 0x0f200ff0) == 0x07000000 {
            AddrLdrStr::Reg
        } else if (self.code & 0x0f200ff0) == 0x07000060 {
            AddrLdrStr::Rrx
        } else if (self.code & 0x0f200ff0) == 0x07200000 {
            AddrLdrStr::RegPre
        } else if (self.code & 0x0f200ff0) == 0x07200060 {
            AddrLdrStr::RrxPre
        } else if (self.code & 0x0f200ff0) == 0x06000000 {
            AddrLdrStr::RegPost
        } else if (self.code & 0x0f200ff0) == 0x06000060 {
            AddrLdrStr::RrxPpost
        } else if (self.code & 0x0f200010) == 0x07000000 {
            AddrLdrStr::Scl
        } else if (self.code & 0x0f200010) == 0x07200000 {
            AddrLdrStr::SclPre
        } else if (self.code & 0x0f200010) == 0x06000000 {
            AddrLdrStr::SclPost
        } else if (self.code & 0x0f200000) == 0x05000000 {
            AddrLdrStr::Imm
        } else if (self.code & 0x0f200000) == 0x05200000 {
            AddrLdrStr::ImmPre
        } else if (self.code & 0x0f200000) == 0x04000000 {
            AddrLdrStr::ImmPost
        } else {
            AddrLdrStr::Illegal
        }
    }
    /// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
    #[inline(always)]
    pub const fn modifier_addr_ldrt_strt(&self) -> AddrLdrtStrt {
        if (self.code & 0x0f200ff0) == 0x06200000 {
            AddrLdrtStrt::RegPost
        } else if (self.code & 0x0f200010) == 0x06200000 {
            AddrLdrtStrt::SclPost
        } else if (self.code & 0x0f200000) == 0x04200000 {
            AddrLdrtStrt::ImmPost
        } else {
            AddrLdrtStrt::Illegal
        }
    }
    /// addr_misc_ldr_str: Miscellaneous Loads and Stores
    #[inline(always)]
    pub const fn modifier_addr_misc_ldr_str(&self) -> AddrMiscLdrStr {
        if (self.code & 0x0f600f90) == 0x01000090 {
            AddrMiscLdrStr::Reg
        } else if (self.code & 0x0f600f90) == 0x01200090 {
            AddrMiscLdrStr::RegPre
        } else if (self.code & 0x0f600f90) == 0x00000090 {
            AddrMiscLdrStr::RegPost
        } else if (self.code & 0x0f600090) == 0x01400090 {
            AddrMiscLdrStr::Imm
        } else if (self.code & 0x0f600090) == 0x01600090 {
            AddrMiscLdrStr::ImmPre
        } else if (self.code & 0x0f600090) == 0x00400090 {
            AddrMiscLdrStr::ImmPost
        } else {
            AddrMiscLdrStr::Illegal
        }
    }
    /// addr_ldm_stm: Load and Store Multiple
    #[inline(always)]
    pub const fn modifier_addr_ldm_stm(&self) -> AddrLdmStm {
        match self.code & 0x01800000 {
            0x00800000 => AddrLdmStm::Ia,
            0x01800000 => AddrLdmStm::Ib,
            0x00000000 => AddrLdmStm::Da,
            0x01000000 => AddrLdmStm::Db,
            _ => AddrLdmStm::Illegal,
        }
    }
    /// addr_system: Addressing mode for system instructions
    #[inline(always)]
    pub const fn modifier_addr_system(&self) -> AddrSystem {
        match self.code & 0x01800000 {
            0x00800000 => AddrSystem::Ia,
            0x01800000 => AddrSystem::Ib,
            0x00000000 => AddrSystem::Da,
            0x01000000 => AddrSystem::Db,
            _ => AddrSystem::Illegal,
        }
    }
    /// addr_coproc: Load and Store Coprocessor
    #[inline(always)]
    pub const fn modifier_addr_coproc(&self) -> AddrCoproc {
        if (self.code & 0x01a00000) == 0x00800000 {
            AddrCoproc::Unidx
        } else if (self.code & 0x01200000) == 0x01000000 {
            AddrCoproc::Imm
        } else if (self.code & 0x01200000) == 0x01200000 {
            AddrCoproc::ImmPre
        } else if (self.code & 0x01200000) == 0x00200000 {
            AddrCoproc::ImmPost
        } else {
            AddrCoproc::Illegal
        }
    }
}
/// imod: Modify interrupt flags
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Imod {
    Illegal,
    /// ie: Interrupt Enable
    Ie,
    /// ie_mode: Interrupt Enable and change mode
    IeMode,
    /// id: Interrupt Disable
    Id,
    /// id_mode: Interrupt Disable and change mode
    IdMode,
    /// mode: Change mode
    Mode,
}
/// pack_shift: Pack shift operand
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum PackShift {
    Illegal,
    /// shift_imm: Shift by immediate
    ShiftImm,
    /// none: No shift operand
    None,
}
/// rfe_rn: RFE source operand
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum RfeRn {
    Illegal,
    /// writeback: Writeback to source operand
    Writeback,
    /// no_writeback: No writeback
    NoWriteback,
}
/// sat_shift: Saturation shift
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SatShift {
    Illegal,
    /// none: No shift
    None,
    /// shift_imm: Shift by immediate
    ShiftImm,
}
/// ext_shift: Extend shift
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ExtShift {
    Illegal,
    /// none: No shift
    None,
    /// ror_imm: Rotate right by immediate
    RorImm,
}
/// shift_arg: Second operand for shift instructions
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ShiftArg {
    Illegal,
    /// imm: Immediate
    Imm,
    /// reg: Register
    Reg,
}
/// cond: Condition code
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Cond {
    Illegal,
    /// eq: Equal
    Eq,
    /// ne: Not equal
    Ne,
    /// hs: Unsigned higher or same
    Hs,
    /// lo: Unsigned lower
    Lo,
    /// mi: Minus/negative
    Mi,
    /// pl: Plus/positive or zero
    Pl,
    /// vs: Overflow
    Vs,
    /// vc: No overflow
    Vc,
    /// hi: Unsigned higher
    Hi,
    /// ls: Unsigned lower or same
    Ls,
    /// ge: Signed greater than or equal
    Ge,
    /// lt: Signed less than
    Lt,
    /// gt: Signed greater than
    Gt,
    /// le: Signed less than or equal
    Le,
    /// al: Always
    Al,
}
/// addr_data: Data-processing operands
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrData {
    Illegal,
    /// imm: Immediate
    Imm,
    /// reg: Register
    Reg,
    /// shift_imm: Shift by immediate
    ShiftImm,
    /// shift_reg: Shift by register
    ShiftReg,
    /// rrx: Rotate right with extend
    Rrx,
}
/// addr_ldr_str: Load and Store Word or Unsigned Byte
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// scl: Scaled register offset
    Scl,
    /// rrx: Scaled register offset
    Rrx,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// scl_pre: Scaled register pre-indexed
    SclPre,
    /// rrx_pre: Scaled register offset
    RrxPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
    /// rrx_ppost: Scaled register offset
    RrxPpost,
}
/// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdrtStrt {
    Illegal,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
}
/// addr_misc_ldr_str: Miscellaneous Loads and Stores
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrMiscLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
}
/// addr_ldm_stm: Load and Store Multiple
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdmStm {
    Illegal,
    /// ia: Increment After
    Ia,
    /// ib: Increment Before
    Ib,
    /// da: Decrement After
    Da,
    /// db: Decrement Before
    Db,
}
/// addr_system: Addressing mode for system instructions
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrSystem {
    Illegal,
    /// ia: Increment After
    Ia,
    /// ib: Increment Before
    Ib,
    /// da: Decrement After
    Da,
    /// db: Decrement Before
    Db,
}
/// addr_coproc: Load and Store Coprocessor
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrCoproc {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// unidx: Unindexed
    Unidx,
}
fn parse_adc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_add(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_adr_a(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "adreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "adrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "adrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "adrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "adrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "adrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "adrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "adrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "adrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "adrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "adrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "adrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "adrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "adrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "adr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_adr_s(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "adreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "adrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "adrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "adrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "adrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "adrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "adrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "adrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "adrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "adrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "adrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "adrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "adrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "adrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "adr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SImm(ins.field_rotated_immed_8_neg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_and(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_asr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_shift_arg()) {
        (true, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "asr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "asr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_b(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "beq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ble",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "b",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bl(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bleq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bllo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bllt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blle",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bic(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bkpt(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "bkpt",
        args: [
            Argument::UImm(ins.field_immed_16()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_i(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "blx",
        args: [
            Argument::BranchDest(ins.field_blx_offset()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_r(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "blxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "blx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "bxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bxj(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bxjeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bxjne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bxjhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bxjlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bxjmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bxjpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bxjvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bxjvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bxjhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bxjls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bxjge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bxjlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bxjgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "bxjle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bxj",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "cdpeq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "cdpne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "cdphs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "cdplo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "cdpmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "cdppl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "cdpvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "cdpvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "cdphi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "cdpls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "cdpge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "cdplt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "cdpgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "cdple",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "cdp",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "cdp2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_codat_opcode_1()),
            Argument::CoReg(ins.field_crd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_clrex(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "clrex",
        args: [
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_clz(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "clzeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "clzne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "clzhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "clzlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "clzmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "clzpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "clzvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "clzvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "clzhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "clzls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "clzge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "clzlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "clzgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "clzle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "clz",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmp(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cps(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_imod() {
        Imod::Ie => {
            ParsedIns {
                mnemonic: "cpsie",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::IeMode => {
            ParsedIns {
                mnemonic: "cpsie",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::Id => {
            ParsedIns {
                mnemonic: "cpsid",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::IdMode => {
            ParsedIns {
                mnemonic: "cpsid",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::Mode => {
            ParsedIns {
                mnemonic: "cps",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_csdb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "csdbeq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "csdbne",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "csdbhs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "csdblo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "csdbmi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "csdbpl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "csdbvs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "csdbvc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "csdbhi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "csdbls",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "csdbge",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "csdblt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "csdbgt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "csdble",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "csdb",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_dbg(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "dbgeq",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "dbgne",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "dbghs",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "dbglo",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "dbgmi",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "dbgpl",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "dbgvs",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "dbgvc",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "dbghi",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "dbgls",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "dbgge",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "dbglt",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "dbggt",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "dbgle",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "dbg",
                args: [
                    Argument::UImm(ins.field_dbg_option()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_eor(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_cond(), ins.modifier_addr_coproc()) {
        (true, Cond::Eq, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc2(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_addr_coproc()) {
        (true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmibeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdaeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdbeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmibne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdane",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdbne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmibhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdahs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdbhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmlo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmiblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdalo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmibmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdami",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdbmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmibpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdapl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdbpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmibvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdavs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdbvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmibvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdavc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdbvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmibhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdahi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdbhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmibls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdals",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdbls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmibge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdage",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdbge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmlt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmiblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdalt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmibgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdagt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdbgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmle",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmible",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdale",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdble",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldm",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmibeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdaeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdbeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmibne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdane",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdbne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmibhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdahs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdbhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmiblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdalo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmibmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdami",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdbmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmibpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdapl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdbpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmibvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdavs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdbvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmibvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdavc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdbvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmibhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdahi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdbhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmibls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdals",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdbls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmibge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdage",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdbge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmiblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdalt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmibgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdagt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdbgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmible",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdale",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdble",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldm",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmibeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdaeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdbeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmibne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdane",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdbne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmibhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdahs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdbhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmiblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdalo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmibmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdami",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdbmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmibpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdapl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdbpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmibvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdavs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdbvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmibvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdavc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdbvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmibhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdahi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdbhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmibls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdals",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdbls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmibge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdage",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdbge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmiblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdalt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmibgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdagt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdbgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmible",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdale",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdble",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldm",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmibeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdaeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdbeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmibne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdane",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdbne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmibhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdahs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdbhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmlo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmiblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdalo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmibmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdami",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdbmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmibpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdapl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdbpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmibvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdavs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdbvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmibvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdavc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdbvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmibhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdahi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdbhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmibls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdals",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdbls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmibge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdage",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdbge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmlt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmiblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdalt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmibgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdagt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdbgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmle",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmible",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdale",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdble",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldm",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmibeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdaeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "ldmdbeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmibne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdane",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "ldmdbne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmibhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdahs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "ldmdbhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmiblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdalo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "ldmdblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmibmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdami",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "ldmdbmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmibpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdapl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "ldmdbpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmibvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdavs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "ldmdbvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmibvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdavc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "ldmdbvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmibhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdahi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "ldmdbhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmibls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdals",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "ldmdbls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmibge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdage",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "ldmdbge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmiblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdalt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "ldmdblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmibgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdagt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "ldmdbgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmible",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdale",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "ldmdble",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldm",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrbt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdeq",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdne",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdhs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdlo",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdmi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdpl",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdvs",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdvc",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdhi",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdls",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdge",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdlt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdgt",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrdle",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rt1()),
                    Argument::Reg(ins.field_rt2()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrex(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ldrexeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ldrexne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ldrexhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ldrexlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ldrexmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ldrexpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ldrexvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ldrexvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ldrexhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ldrexls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ldrexge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ldrexlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ldrexgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ldrexle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ldrex",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrexb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ldrexbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ldrexbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ldrexbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ldrexblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ldrexbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ldrexbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ldrexbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ldrexbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ldrexbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ldrexbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ldrexbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ldrexblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ldrexbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ldrexble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ldrexb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrexd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ldrexdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ldrexdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ldrexdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ldrexdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ldrexdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ldrexdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ldrexdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ldrexdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ldrexdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ldrexdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ldrexdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ldrexdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ldrexdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ldrexdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ldrexd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrexh(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ldrexheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ldrexhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ldrexhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ldrexhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ldrexhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ldrexhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ldrexhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ldrexhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ldrexhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ldrexhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ldrexhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ldrexhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ldrexhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ldrexhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ldrexh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrh(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrsb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrsh(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_lsl(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_shift_arg()) {
        (true, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsleq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsllo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsllt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lslle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsleq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsllo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsllt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lslle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_lsr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_shift_arg()) {
        (true, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "lsr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "lsr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mcr2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mcrr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcrreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcrr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcrr2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mcrr2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_opcode()),
            Argument::Reg(ins.field_rd()),
            Argument::Reg(ins.field_rn()),
            Argument::CoReg(ins.field_crm()),
            Argument::None,
        ],
    };
}
fn parse_mla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "mlaseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "mlaeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "mlasne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "mlane",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "mlashs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "mlahs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "mlaslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "mlalo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "mlasmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "mlami",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "mlaspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "mlapl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "mlasvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "mlavs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "mlasvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "mlavc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "mlashi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "mlahi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "mlasls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "mlals",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "mlasge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "mlage",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "mlaslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "mlalt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "mlasgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "mlagt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "mlasle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "mlale",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "mlas",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "mla",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mov_imm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "movseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "movsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "movshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "movslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "movsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "movspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "movsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "movsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "movshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "movsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "movsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "movslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "movsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "movsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mov_reg(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "movseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "movsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "movshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "movslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "movsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "movspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "movsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "movsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "movshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "movsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "movsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "movslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "movsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "movsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mrc2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mrrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrrc2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mrrc2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_opcode()),
            Argument::Reg(ins.field_rd()),
            Argument::Reg(ins.field_rn()),
            Argument::CoReg(ins.field_crm()),
            Argument::None,
        ],
    };
}
fn parse_mrs(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr_i(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "mulseq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "muleq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "mulsne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "mulne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "mulshs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "mulhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "mulslo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "mullo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "mulsmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "mulmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "mulspl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "mulpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "mulsvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "mulvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "mulsvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "mulvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "mulshi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "mulhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "mulsls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "mulls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "mulsge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "mulge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "mulslt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "mullt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "mulsgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "mulgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "mulsle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "mulle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "muls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "mul",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mvn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_nop(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "nopeq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "nopne",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "nophs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "noplo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "nopmi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "noppl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "nopvs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "nopvc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "nophi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "nopls",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "nopge",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "noplt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "nopgt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "nople",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "nop",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_orr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pkhbt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_pack_shift()) {
        (Cond::Eq, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pkhtb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "pkhtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "pkhtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "pkhtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "pkhtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "pkhtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "pkhtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "pkhtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "pkhtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "pkhtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "pkhtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "pkhtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "pkhtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "pkhtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "pkhtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "pkhtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pld(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_addr_ldr_str() {
        AddrLdrStr::Imm => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Reg => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Scl => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Rrx => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RrxPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RrxPpost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pop_m(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "popeq",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "popne",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "pophs",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "poplo",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "popmi",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "poppl",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "popvs",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "popvc",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "pophi",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "popls",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "popge",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "poplt",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "popgt",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "pople",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "pop",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pop_r(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "popeq",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "popne",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "pophs",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "poplo",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "popmi",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "poppl",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "popvs",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "popvc",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "pophi",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "popls",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "popge",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "poplt",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "popgt",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "pople",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "pop",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_push_m(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "pusheq",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "pushne",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "pushhs",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "pushlo",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "pushmi",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "pushpl",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "pushvs",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "pushvc",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "pushhi",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "pushls",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "pushge",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "pushlt",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "pushgt",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "pushle",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "push",
                args: [
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_push_r(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "pusheq",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "pushne",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "pushhs",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "pushlo",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "pushmi",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "pushpl",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "pushvs",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "pushvc",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "pushhi",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "pushls",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "pushge",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "pushlt",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "pushgt",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "pushle",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "push",
                args: [
                    Argument::RegList(ins.field_rt_list()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rev(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "reveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "revne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "revhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "revlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "revmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "revpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "revvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "revvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "revhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "revls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "revge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "revlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "revgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "revle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "rev",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rev16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "rev16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "rev16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "rev16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "rev16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "rev16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "rev16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "rev16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "rev16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "rev16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "rev16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "rev16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "rev16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "rev16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "rev16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "rev16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_revsh(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "revsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "revshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "revshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "revshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "revshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "revshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "revshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "revshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "revshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "revshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "revshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "revshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "revshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "revshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "revsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rfe(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_system(), ins.modifier_rfe_rn()) {
        (AddrSystem::Ia, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Ib, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Da, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Db, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Ia, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Ib, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Da, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrSystem::Db, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ror(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_shift_arg()) {
        (true, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "roreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "rors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Imm) => {
            ParsedIns {
                mnemonic: "ror",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::UImm(ins.field_immed_5()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "roreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "rors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, ShiftArg::Reg) => {
            ParsedIns {
                mnemonic: "ror",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rrx(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "rrxseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "rrxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "rrxsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "rrxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "rrxshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "rrxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "rrxslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "rrxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "rrxsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "rrxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "rrxspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "rrxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "rrxsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "rrxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "rrxsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "rrxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "rrxshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "rrxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "rrxsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "rrxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "rrxsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "rrxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "rrxslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "rrxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "rrxsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "rrxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "rrxsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "rrxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "rrxs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "rrx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "sadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "sadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "sasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sbc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sel(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "seleq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "selne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "selhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sello",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "selmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "selpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "selvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "selvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "selhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sells",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "selge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sellt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "selgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "selle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sel",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_setend(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "setend",
        args: [
            Argument::Endian(ins.field_endian()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_sev(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "seveq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sevne",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sevhs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sevlo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sevmi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sevpl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sevvs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sevvc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sevhi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sevls",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sevge",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sevlt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sevgt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sevle",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sev",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlattne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlatbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlattlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlatblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlattmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlatbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlattpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlatbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlattvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlatbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlattvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlatbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlattls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlatbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlattge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlatbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlattlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlatblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlattgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlatbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlattle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlatble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlad(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smladxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smladeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smladxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smladne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smladxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smladhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smladxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smladlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smladxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smladmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smladxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smladpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smladxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smladvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smladxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smladvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smladxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smladhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smladxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smladls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smladxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smladge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smladxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smladlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smladxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smladgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smladxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smladle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smladx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlad",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalseq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalsne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalshs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalslo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalsmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalspl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalsvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalsvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalshi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalsls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalsge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalslt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalsgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalsle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal_xy(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalttne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbtne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaltbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalttlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbtlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaltblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalttmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbtmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaltbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalttpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbtpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaltbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalttvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbtvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaltbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalttvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbtvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaltbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalttls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbtls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaltbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalttge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbtge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaltbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalttlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbtlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaltblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalttgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbtgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaltbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalttle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbtle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaltble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlald(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaldxeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaldeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaldxne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaldne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaldxhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaldhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaldxlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaldlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaldxmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaldmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaldxpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaldpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaldxvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaldvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaldxvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaldvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaldxhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaldhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaldxls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaldls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaldxge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaldge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaldxlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaldlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaldxgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaldgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaldxle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaldle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaldx",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlald",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlaw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlsd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsdxeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsdeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsdxne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsdne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsdxhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsdhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsdxlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsdlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsdxmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsdmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsdxpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsdpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsdxvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsdvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsdxvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsdvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsdxhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsdhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsdxls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsdls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsdxge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsdge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsdxlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsdlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsdxgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsdgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsdxle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsdle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsdx",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsd",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlsld(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsldxeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsldeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsldxne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsldne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsldxhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsldhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsldxlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsldlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsldxmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsldmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsldxpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsldpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsldxvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsldvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsldxvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsldvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsldxhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsldhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsldxls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsldls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsldxge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsldge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsldxlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsldlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsldxgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsldgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsldxle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsldle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsldx",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsld",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlareq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlaeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlarne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlane",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlarhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlahs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlarlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlalo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlarmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlami",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlarpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlapl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlarvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlavs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlarvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlavc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlarhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlahi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlarls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlals",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlarge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlage",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlarlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlalt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlargt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlagt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlarle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlale",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmlar",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmla",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmls(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlsreq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlseq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlsrne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlsne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlsrhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlshs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlsrlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlslo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlsrmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlsmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlsrpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlspl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlsrvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlsvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlsrvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlsvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlsrhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlshi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlsrls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlsls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlsrge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlsge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlsrlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlslt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlsrgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlsgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlsrle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlsle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmlsr",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmulreq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmuleq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmulrne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmulne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmulrhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmulhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmulrlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmullo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmulrmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmulmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmulrpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmulpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmulrvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmulvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmulrvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmulvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmulrhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmulhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmulrls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmulls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmulrge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmulge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmulrlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmullt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmulrgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmulgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmulrle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmulle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmulr",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmul",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smuad(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smuadxeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smuadeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smuadxne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smuadne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smuadxhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smuadhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smuadxlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smuadlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smuadxmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smuadmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smuadxpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smuadpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smuadxvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smuadvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smuadxvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smuadvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smuadxhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smuadhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smuadxls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smuadls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smuadxge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smuadge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smuadxlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smuadlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smuadxgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smuadgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smuadxle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smuadle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smuadx",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smuad",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulttne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smultbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulttlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smultblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulttmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smultbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulttpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smultbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulttvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smultbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulttvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smultbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulttls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smultbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulttge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smultbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulttlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smultblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulttgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smultbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulttle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smultble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smullseq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smullsne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smullshs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smullslo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smullsmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smullspl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smullsvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smullsvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smullshi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smullsls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smullsge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smullslt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smullsgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smullsle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smulw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smusd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smusdxeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smusdeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smusdxne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smusdne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smusdxhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smusdhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smusdxlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smusdlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smusdxmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smusdmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smusdxpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smusdpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smusdxvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smusdvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smusdxvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smusdvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smusdxhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smusdhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smusdxls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smusdls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smusdxge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smusdge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smusdxlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smusdlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smusdxgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smusdgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smusdxle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smusdle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smusdx",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smusd",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_srs(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_addr_system() {
        AddrSystem::Ia => {
            ParsedIns {
                mnemonic: "srsia",
                args: [
                    Argument::Reg(ins.field_sp_wb()),
                    Argument::UImm(ins.field_spsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrSystem::Ib => {
            ParsedIns {
                mnemonic: "srsib",
                args: [
                    Argument::Reg(ins.field_sp_wb()),
                    Argument::UImm(ins.field_spsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrSystem::Da => {
            ParsedIns {
                mnemonic: "srsda",
                args: [
                    Argument::Reg(ins.field_sp_wb()),
                    Argument::UImm(ins.field_spsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrSystem::Db => {
            ParsedIns {
                mnemonic: "srsdb",
                args: [
                    Argument::Reg(ins.field_sp_wb()),
                    Argument::UImm(ins.field_spsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssat(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_sat_shift()) {
        (Cond::Eq, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssat16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssat16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssat16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssat16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssat16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssat16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssat16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssat16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssat16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssat16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssat16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssat16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssat16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssat16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssat16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssat16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_ssat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_cond(), ins.modifier_addr_coproc()) {
        (true, Cond::Eq, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcleq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcllo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcllt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stc2(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_addr_coproc()) {
        (true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmibeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdaeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdbeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmibne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdane",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdbne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmibhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdahs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdbhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmiblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdalo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmibmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdami",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdbmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmibpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdapl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdbpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmibvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdavs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdbvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmibvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdavc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdbvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmibhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdahi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdbhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmibls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdals",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdbls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmibge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdage",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdbge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmiblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdalt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmibgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdagt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdbgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmible",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdale",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdble",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "stm",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmibeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdaeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdbeq",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmibne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdane",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdbne",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmibhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdahs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdbhs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmlo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmiblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdalo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdblo",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmibmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdami",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdbmi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmibpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdapl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdbpl",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmibvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdavs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdbvs",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmibvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdavc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdbvc",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmibhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdahi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdbhi",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmibls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdals",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdbls",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmibge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdage",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdbge",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmlt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmiblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdalt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdblt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmibgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdagt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdbgt",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmle",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmible",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdale",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdble",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "stm",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_cond()) {
        (AddrLdmStm::Ia, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmibeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdaeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Eq) => {
            ParsedIns {
                mnemonic: "stmdbeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmibne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdane",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ne) => {
            ParsedIns {
                mnemonic: "stmdbne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmibhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdahs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hs) => {
            ParsedIns {
                mnemonic: "stmdbhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmiblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdalo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lo) => {
            ParsedIns {
                mnemonic: "stmdblo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmibmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdami",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Mi) => {
            ParsedIns {
                mnemonic: "stmdbmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmibpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdapl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Pl) => {
            ParsedIns {
                mnemonic: "stmdbpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmibvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdavs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vs) => {
            ParsedIns {
                mnemonic: "stmdbvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmibvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdavc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Vc) => {
            ParsedIns {
                mnemonic: "stmdbvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmibhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdahi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Hi) => {
            ParsedIns {
                mnemonic: "stmdbhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmibls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdals",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ls) => {
            ParsedIns {
                mnemonic: "stmdbls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmibge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdage",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Ge) => {
            ParsedIns {
                mnemonic: "stmdbge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmiblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdalt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Lt) => {
            ParsedIns {
                mnemonic: "stmdblt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmibgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdagt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Gt) => {
            ParsedIns {
                mnemonic: "stmdbgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmible",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdale",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Le) => {
            ParsedIns {
                mnemonic: "stmdble",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, Cond::Al) => {
            ParsedIns {
                mnemonic: "stm",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, Cond::Al) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strbt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strex(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "strexeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "strexne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "strexhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "strexlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "strexmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "strexpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "strexvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "strexvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "strexhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "strexls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "strexge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "strexlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "strexgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "strexle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "strex",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strexb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "strexbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "strexbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "strexbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "strexblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "strexbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "strexbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "strexbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "strexbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "strexbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "strexbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "strexbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "strexblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "strexbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "strexble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "strexb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strexd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "strexdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "strexdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "strexdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "strexdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "strexdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "strexdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "strexdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "strexdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "strexdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "strexdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "strexdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "strexdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "strexdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "strexdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "strexd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strexh(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "strexheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "strexhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "strexhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "strexhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "strexhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "strexhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "strexhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "strexhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "strexhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "strexhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "strexhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "strexhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "strexhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "strexhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "strexh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strh(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sub(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond(), ins.modifier_addr_data()) {
        (true, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_svc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "svceq",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "svcne",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "svchs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "svclo",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "svcmi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "svcpl",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "svcvs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "svcvc",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "svchi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "svcls",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "svcge",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "svclt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "svcgt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "svcle",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "svc",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swphs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swplo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swppl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swphi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swple",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swp",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swpb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swpbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swpblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swpbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swpbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swpblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swpble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swpb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtab(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtab16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtah(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtb16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxth(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_teq(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_tst(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_udf(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "udfeq",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "udfne",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "udfhs",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "udflo",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "udfmi",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "udfpl",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "udfvs",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "udfvc",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "udfhi",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "udfls",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "udfge",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "udflt",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "udfgt",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "udfle",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "udf",
                args: [
                    Argument::UImm(ins.field_immed_16()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umaal(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "umaaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "umaalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "umaalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "umaallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "umaalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "umaalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "umaalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "umaalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "umaalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "umaalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "umaalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "umaallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "umaalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "umaalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "umaal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "umlalseq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "umlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "umlalsne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "umlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "umlalshs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "umlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "umlalslo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "umlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "umlalsmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "umlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "umlalspl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "umlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "umlalsvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "umlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "umlalsvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "umlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "umlalshi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "umlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "umlalsls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "umlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "umlalsge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "umlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "umlalslt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "umlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "umlalsgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "umlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "umlalsle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "umlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "umlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "umlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_s(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "umullseq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "umulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "umullsne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "umullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "umullshs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "umullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "umullslo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "umulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "umullsmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "umullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "umullspl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "umullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "umullsvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "umullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "umullsvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "umullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "umullshi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "umullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "umullsls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "umullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "umullsge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "umullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "umullslt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "umulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "umullsgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "umullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "umullsle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "umullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "umulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "umull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqasx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqasxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqasxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqasxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqasxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqasxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqasxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqasxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqasxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqasxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqasxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqasxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqasxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqasxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqasxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqasx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usad8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usad8eq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usad8ne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usad8hs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usad8lo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usad8mi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usad8pl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usad8vs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usad8vc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usad8hi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usad8ls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usad8ge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usad8lt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usad8gt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usad8le",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usad8",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usada8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usada8eq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usada8ne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usada8hs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usada8lo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usada8mi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usada8pl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usada8vs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usada8vc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usada8hi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usada8ls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usada8ge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usada8lt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usada8gt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usada8le",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usada8",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usat(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_sat_shift()) {
        (Cond::Eq, SatShift::None) => {
            ParsedIns {
                mnemonic: "usateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::None) => {
            ParsedIns {
                mnemonic: "usaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::None) => {
            ParsedIns {
                mnemonic: "usathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::None) => {
            ParsedIns {
                mnemonic: "usat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usat16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usat16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usat16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usat16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usat16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usat16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usat16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usat16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usat16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usat16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usat16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usat16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usat16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usat16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usat16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usat16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_usat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usax(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usaxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usaxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usaxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usaxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usaxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usaxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usaxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usaxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usaxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usaxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usaxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usaxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usaxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usaxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usax",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtab(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtab16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtah(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtb16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxth(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_wfe(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "wfeeq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "wfene",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "wfehs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "wfelo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "wfemi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "wfepl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "wfevs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "wfevc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "wfehi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "wfels",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "wfege",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "wfelt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "wfegt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "wfele",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "wfe",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_wfi(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "wfieq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "wfine",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "wfihs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "wfilo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "wfimi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "wfipl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "wfivs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "wfivc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "wfihi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "wfils",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "wfige",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "wfilt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "wfigt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "wfile",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "wfi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_yield(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "yieldeq",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "yieldne",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "yieldhs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "yieldlo",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "yieldmi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "yieldpl",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "yieldvs",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "yieldvc",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "yieldhi",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "yieldls",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "yieldge",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "yieldlt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "yieldgt",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "yieldle",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "yield",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
type MnemonicParser = fn(&mut ParsedIns, Ins);
static MNEMONIC_PARSERS: [MnemonicParser; 185] = [
    parse_adc,
    parse_add,
    parse_adr_a,
    parse_adr_s,
    parse_and,
    parse_asr,
    parse_b,
    parse_bl,
    parse_bic,
    parse_bkpt,
    parse_blx_i,
    parse_blx_r,
    parse_bx,
    parse_bxj,
    parse_cdp,
    parse_cdp2,
    parse_clrex,
    parse_clz,
    parse_cmn,
    parse_cmp,
    parse_cps,
    parse_csdb,
    parse_dbg,
    parse_eor,
    parse_ldc,
    parse_ldc2,
    parse_ldm_w,
    parse_ldm,
    parse_ldm_p,
    parse_ldm_pc_w,
    parse_ldm_pc,
    parse_ldr,
    parse_ldrb,
    parse_ldrbt,
    parse_ldrd,
    parse_ldrex,
    parse_ldrexb,
    parse_ldrexd,
    parse_ldrexh,
    parse_ldrh,
    parse_ldrsb,
    parse_ldrsh,
    parse_ldrt,
    parse_lsl,
    parse_lsr,
    parse_mcr,
    parse_mcr2,
    parse_mcrr,
    parse_mcrr2,
    parse_mla,
    parse_mov_imm,
    parse_mov_reg,
    parse_mrc,
    parse_mrc2,
    parse_mrrc,
    parse_mrrc2,
    parse_mrs,
    parse_msr_i,
    parse_msr,
    parse_mul,
    parse_mvn,
    parse_nop,
    parse_orr,
    parse_pkhbt,
    parse_pkhtb,
    parse_pld,
    parse_pop_m,
    parse_pop_r,
    parse_push_m,
    parse_push_r,
    parse_qadd,
    parse_qadd16,
    parse_qadd8,
    parse_qasx,
    parse_qdadd,
    parse_qdsub,
    parse_qsax,
    parse_qsub,
    parse_qsub16,
    parse_qsub8,
    parse_rev,
    parse_rev16,
    parse_revsh,
    parse_rfe,
    parse_ror,
    parse_rrx,
    parse_rsb,
    parse_rsc,
    parse_sadd16,
    parse_sadd8,
    parse_sasx,
    parse_sbc,
    parse_sel,
    parse_setend,
    parse_sev,
    parse_shadd16,
    parse_shadd8,
    parse_shasx,
    parse_shsax,
    parse_shsub16,
    parse_shsub8,
    parse_smla,
    parse_smlad,
    parse_smlal,
    parse_smlal_xy,
    parse_smlald,
    parse_smlaw,
    parse_smlsd,
    parse_smlsld,
    parse_smmla,
    parse_smmls,
    parse_smmul,
    parse_smuad,
    parse_smul,
    parse_smull,
    parse_smulw,
    parse_smusd,
    parse_srs,
    parse_ssat,
    parse_ssat16,
    parse_ssax,
    parse_ssub16,
    parse_ssub8,
    parse_stc,
    parse_stc2,
    parse_stm,
    parse_stm_w,
    parse_stm_p,
    parse_str,
    parse_strb,
    parse_strbt,
    parse_strd,
    parse_strex,
    parse_strexb,
    parse_strexd,
    parse_strexh,
    parse_strh,
    parse_strt,
    parse_sub,
    parse_svc,
    parse_swp,
    parse_swpb,
    parse_sxtab,
    parse_sxtab16,
    parse_sxtah,
    parse_sxtb,
    parse_sxtb16,
    parse_sxth,
    parse_teq,
    parse_tst,
    parse_uadd16,
    parse_uadd8,
    parse_uasx,
    parse_udf,
    parse_uhadd16,
    parse_uhadd8,
    parse_uhasx,
    parse_uhsax,
    parse_uhsub16,
    parse_uhsub8,
    parse_umaal,
    parse_umlal,
    parse_umull,
    parse_uqadd16,
    parse_uqadd8,
    parse_uqasx,
    parse_uqsax,
    parse_uqsub16,
    parse_uqsub8,
    parse_usad8,
    parse_usada8,
    parse_usat,
    parse_usat16,
    parse_usax,
    parse_usub16,
    parse_usub8,
    parse_uxtab,
    parse_uxtab16,
    parse_uxtah,
    parse_uxtb,
    parse_uxtb16,
    parse_uxth,
    parse_wfe,
    parse_wfi,
    parse_yield,
];
#[inline]
pub fn parse(out: &mut ParsedIns, ins: Ins) {
    if ins.op != Opcode::Illegal {
        MNEMONIC_PARSERS[ins.op as usize](out, ins);
    } else {
        *out = ParsedIns {
            mnemonic: "<illegal>",
            args: [
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
            ],
        };
    }
}
