#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
#![allow(clippy::double_parens, clippy::unnecessary_cast)]
// Generated by unarm-generator. Do not edit!
use crate::{args::*, parse::ParsedIns};
use super::Ins;
/// These are the mnemonics of each opcode. Some mnemonics are duplicated due to them having multiple formats.
static OPCODE_MNEMONICS: [&str; 159] = [
    "adc",
    "add",
    "and",
    "b",
    "bl",
    "bic",
    "bkpt",
    "blx",
    "blx",
    "bx",
    "bxj",
    "cdp",
    "cdp2",
    "clz",
    "cmn",
    "cmp",
    "cps",
    "cpy",
    "eor",
    "ldc",
    "ldc2",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldr",
    "ldrb",
    "ldrbt",
    "ldrd",
    "ldrex",
    "ldrh",
    "ldrsb",
    "ldrsh",
    "ldrt",
    "mcr",
    "mcr2",
    "mcrr",
    "mcrr2",
    "mla",
    "mov",
    "mrc",
    "mrc2",
    "mrrc",
    "mrrc2",
    "mrs",
    "msr",
    "msr",
    "mul",
    "mvn",
    "orr",
    "pkhbt",
    "pkhtb",
    "pld",
    "qadd",
    "qadd16",
    "qadd8",
    "qaddsubx",
    "qdadd",
    "qdsub",
    "qsub",
    "qsub16",
    "qsub8",
    "qsubaddx",
    "rev",
    "rev16",
    "revsh",
    "rfe",
    "rsb",
    "rsc",
    "sadd16",
    "sadd8",
    "saddsubx",
    "sbc",
    "sel",
    "setend",
    "shadd16",
    "shadd8",
    "shaddsubx",
    "shsub16",
    "shsub8",
    "shsubaddx",
    "smla",
    "smlad",
    "smlal",
    "smlal",
    "smlald",
    "smlaw",
    "smlsd",
    "smlsld",
    "smmla",
    "smmls",
    "smmul",
    "smuad",
    "smul",
    "smull",
    "smulw",
    "smusd",
    "srs",
    "ssat",
    "ssat16",
    "ssub16",
    "ssub8",
    "ssubaddx",
    "stc",
    "stc2",
    "stm",
    "stm",
    "stm",
    "str",
    "strb",
    "strbt",
    "strd",
    "strex",
    "strh",
    "strt",
    "sub",
    "swi",
    "swp",
    "swpb",
    "sxtab",
    "sxtab16",
    "sxtah",
    "sxtb",
    "sxtb16",
    "sxth",
    "teq",
    "tst",
    "uadd16",
    "uadd8",
    "uaddsubx",
    "uhadd16",
    "uhadd8",
    "uhaddsubx",
    "uhsub16",
    "uhsub8",
    "uhsubaddx",
    "umaal",
    "umlal",
    "umull",
    "uqadd16",
    "uqadd8",
    "uqaddsubx",
    "uqsub16",
    "uqsub8",
    "uqsubaddx",
    "usad8",
    "usada8",
    "usat",
    "usat16",
    "usub16",
    "usub8",
    "usubaddx",
    "uxtab",
    "uxtab16",
    "uxtah",
    "uxtb",
    "uxtb16",
    "uxth",
];
#[derive(Clone, Copy, Debug, Default, PartialEq, Eq)]
#[repr(u8)]
#[non_exhaustive]
pub enum Opcode {
    /// Illegal or unknown
    #[default]
    Illegal = u8::MAX,
    /// ADC: Add with Carry
    Adc = 0,
    /// ADD: Add
    Add = 1,
    /// AND: Bitwise AND
    And = 2,
    /// B: Branch
    B = 3,
    /// BL: Branch and Link
    Bl = 4,
    /// BIC: Bit Clear
    Bic = 5,
    /// BKPT: Breakpoint
    Bkpt = 6,
    /// BLX: Branch and Link and Exchange to Thumb (immediate target)
    BlxI = 7,
    /// BLX: Branch and Link and Exchange to Thumb (register target)
    BlxR = 8,
    /// BX: Branch and Exchange
    Bx = 9,
    /// BXJ: Branch and Exchange to Jazelle state
    Bxj = 10,
    /// CDP: Coprocessor Data Processing
    Cdp = 11,
    /// CDP2: Coprocessor Data Processing (unconditional, extended)
    Cdp2 = 12,
    /// CLZ: Count Leading Zeros
    Clz = 13,
    /// CMN: Compare Negative
    Cmn = 14,
    /// CMP: Compare
    Cmp = 15,
    /// CPS: Change Processor State
    Cps = 16,
    /// CPY: Copy
    Cpy = 17,
    /// EOR: Bitwise Exclusive OR
    Eor = 18,
    /// LDC: Load Coprocessor
    Ldc = 19,
    /// LDC2: Load Coprocessor (unconditional, extended)
    Ldc2 = 20,
    /// LDM: Load Multiple (writeback)
    LdmW = 21,
    /// LDM: Load Multiple
    Ldm = 22,
    /// LDM: Load Multiple (privileged)
    LdmP = 23,
    /// LDM: Load Multiple (including PC, writeback)
    LdmPcW = 24,
    /// LDM: Load Multiple (including PC)
    LdmPc = 25,
    /// LDR: Load Register
    Ldr = 26,
    /// LDRB: Load Register Byte
    LdrB = 27,
    /// LDRBT: Load Register Byte with Translation
    LdrBt = 28,
    /// LDRD: Load Registers Doubleword
    LdrD = 29,
    /// LDREX: Load Register Exclusive
    Ldrex = 30,
    /// LDRH: Load Register Halfword
    LdrH = 31,
    /// LDRSB: Load Register Signed Byte
    LdrSb = 32,
    /// LDRSH: Load Register Signed Halfword
    LdrSh = 33,
    /// LDRT: Load Register with Translation
    LdrT = 34,
    /// MCR: Move to Coprocessor from ARM Register
    Mcr = 35,
    /// MCR2: Move to Coprocessor from ARM Register (unconditional, extended)
    Mcr2 = 36,
    /// MCRR: Move to Coprocessor from two ARM Registers
    Mcrr = 37,
    /// MCRR2: Move to Coprocessor from two ARM Registers (unconditional, extended)
    Mcrr2 = 38,
    /// MLA: Multiply Accumulate
    Mla = 39,
    /// MOV: Move
    Mov = 40,
    /// MRC: Move to ARM Register from Coprocessor
    Mrc = 41,
    /// MRC2: Move to ARM Register from Coprocessor (unconditional, extended)
    Mrc2 = 42,
    /// MRRC: Move to two ARM Registers from Coprocessor
    Mrrc = 43,
    /// MRRC2: Move to two ARM Registers from Coprocessor (unconditional, extended)
    Mrrc2 = 44,
    /// MRS: Move to ARM Register from Status Register
    Mrs = 45,
    /// MSR: Move to Status Register from ARM Register
    MsrI = 46,
    /// MSR: Move to Status Register from ARM Register
    Msr = 47,
    /// MUL: Multiply
    Mul = 48,
    /// MVN: Move Not
    Mvn = 49,
    /// ORR: Logical OR
    Orr = 50,
    /// PKHBT: Pack Halfword Bottom Top
    Pkhbt = 51,
    /// PKHTB: Pack Halfword Top Bottom
    Pkhtb = 52,
    /// PLD: Preload Data
    Pld = 53,
    /// QADD: Saturating Add
    Qadd = 54,
    /// QADD16: Saturating Add two 16-bit integers
    Qadd16 = 55,
    /// QADD8: Saturating Add four 8-bit integers
    Qadd8 = 56,
    /// QADDSUBX: Saturating Add and Subtract with Exchange
    Qaddsubx = 57,
    /// QDADD: Saturating Double and Add
    Qdadd = 58,
    /// QDSUB: Saturating Double and Subtract
    Qdsub = 59,
    /// QSUB: Saturating Subtract
    Qsub = 60,
    /// QSUB16: Saturating Subtract two 16-bit integers
    Qsub16 = 61,
    /// QSUB8: Saturating Subtract four 8-bit integers
    Qsub8 = 62,
    /// QSUBADDX: Saturating Subtract and Add with Exchange
    Qsubaddx = 63,
    /// REV: Byte-Reverse Word
    Rev = 64,
    /// REV16: Byte-Reverse Packed Halfword
    Rev16 = 65,
    /// REVSH: Byte-Reverse Signed Halfword
    Revsh = 66,
    /// RFE: Return From Exception
    Rfe = 67,
    /// RSB: Reverse Subtract
    Rsb = 68,
    /// RSC: Reverse Subtract with Carry
    Rsc = 69,
    /// SADD16: Signed Add two 16-bit integers
    Sadd16 = 70,
    /// SADD8: Signed Add four 8-bit integers
    Sadd8 = 71,
    /// SADDSUBX: Signed Add and Subtract with Exchange
    Saddsubx = 72,
    /// SBC: Subtract with Carry
    Sbc = 73,
    /// SEL: Select
    Sel = 74,
    /// SETEND: Set Endian
    Setend = 75,
    /// SHADD16: Signed Halving Add two 16-bit integers
    Shadd16 = 76,
    /// SHADD8: Signed Halving Add four 8-bit integers
    Shadd8 = 77,
    /// SHADDSUBX: Signed Halving Add and Subtract with Exchange
    Shaddsubx = 78,
    /// SHSUB16: Signed Halving Subtract two 16-bit integers
    Shsub16 = 79,
    /// SHSUB8: Signed Halving Subtract four 8-bit integers
    Shsub8 = 80,
    /// SHSUBADDX: Signed Halving Subtract and Add with Exchange
    Shsubaddx = 81,
    /// SMLA: Signed Multiply Accumulate
    Smla = 82,
    /// SMLAD: Signed Multiply Accumulate Dual
    Smlad = 83,
    /// SMLAL: Signed Multiply Accumulate Long
    Smlal = 84,
    /// SMLAL: Signed Multiply Accumulate Long
    SmlalXy = 85,
    /// SMLALD: Signed Multiply Accumulate Long Dual
    Smlald = 86,
    /// SMLAW: Signed Multiply Accumulate Word
    Smlaw = 87,
    /// SMLSD: Signed Multiply Subtract accumulate Dual
    Smlsd = 88,
    /// SMLSLD: Signed Multiply Subtract accumulate Long Dual
    Smlsld = 89,
    /// SMMLA: Signed Most significant word Multiply Accumulate
    Smmla = 90,
    /// SMMLS: Signed Most signifcant word Multiply Subtract
    Smmls = 91,
    /// SMMUL: Signed Most signifcant word Multiply
    Smmul = 92,
    /// SMUAD: Signed Multiply Add Dual
    Smuad = 93,
    /// SMUL: Signed Multiply
    Smul = 94,
    /// SMULL: Signed Multiply Long
    Smull = 95,
    /// SMULW: Signed Multiply Word
    Smulw = 96,
    /// SMUSD: Signed Multiply Subtract Dual
    Smusd = 97,
    /// SRS: Store Return State
    Srs = 98,
    /// SSAT: Signed Saturate
    Ssat = 99,
    /// SSAT16: Signed Saturate two 16-bit integers
    Ssat16 = 100,
    /// SSUB16: Signed Subtract two 16-bit integers
    Ssub16 = 101,
    /// SSUB8: Signed Subtract four 8-bit integers
    Ssub8 = 102,
    /// SSUBADDX: Signed Subtract and Add with Exchange
    Ssubaddx = 103,
    /// STC: Store Coprocessor
    Stc = 104,
    /// STC2: Store Coprocessor (unconditional, extended)
    Stc2 = 105,
    /// STM: Store Multiple
    Stm = 106,
    /// STM: Store Multiple (writeback)
    StmW = 107,
    /// STM: Store Multiple (privileged)
    StmP = 108,
    /// STR: Store Register
    Str = 109,
    /// STRB: Store Register Byte
    StrB = 110,
    /// STRBT: Store Register Byte with Translation
    StrBt = 111,
    /// STRD: Store Registers Doubleword
    StrD = 112,
    /// STREX: Store Register Exclusive
    Strex = 113,
    /// STRH: Store Register Halfword
    StrH = 114,
    /// STRT: Store Register with Translation
    StrT = 115,
    /// SUB: Subtract
    Sub = 116,
    /// SWI: Software Interrupt
    Swi = 117,
    /// SWP: Swap
    Swp = 118,
    /// SWPB: Swap Byte
    Swpb = 119,
    /// SXTAB: Sign Extend one Byte to 32 bits and Add
    Sxtab = 120,
    /// SXTAB16: Sign Extend two Bytes to 16 bits and Add
    Sxtab16 = 121,
    /// SXTAH: Sign Extend one Halfword to 32 bits and Add
    Sxtah = 122,
    /// SXTB: Sign Extend Byte to 32 bits
    Sxtb = 123,
    /// SXTB16: Sign Extend two Bytes to 16 bits
    Sxtb16 = 124,
    /// SXTH: Sign Extend Halfword to 32 bits
    Sxth = 125,
    /// TEQ: Test Equivalence
    Teq = 126,
    /// TST: Test
    Tst = 127,
    /// UADD16: Unsigned Add two 16-bit integers
    Uadd16 = 128,
    /// UADD8: Unsigned Add four 8-bit integers
    Uadd8 = 129,
    /// UADDSUBX: Unsigned Add and Subtract with Exchange
    Uaddsubx = 130,
    /// UHADD16: Unsigned Halving Add two 16-bit integers
    Uhadd16 = 131,
    /// UHADD8: Unsigned Halving Add four 8-bit integers
    Uhadd8 = 132,
    /// UHADDSUBX: Unsigned Halving Add and Subtract with Exchange
    Uhaddsubx = 133,
    /// UHSUB16: Unsigned Halving Subtract two 16-bit integers
    Uhsub16 = 134,
    /// UHSUB8: Unsigned Halving Subtract four 8-bit integers
    Uhsub8 = 135,
    /// UHSUBADDX: Unsigned Halving Subtract and Add with Exchange
    Uhsubaddx = 136,
    /// UMAAL: Unsigned Multiply Accumulate Accumulate Long
    Umaal = 137,
    /// UMLAL: Unsigned Multiply Accumulate Long
    Umlal = 138,
    /// UMULL: Unsigned Multiply Long
    Umull = 139,
    /// UQADD16: Unsigned Saturating Add two 16-bit integers
    Uqadd16 = 140,
    /// UQADD8: Unsigned Saturating Add four 8-bit integers
    Uqadd8 = 141,
    /// UQADDSUBX: Unsigned Saturating Add and Subtract with Exchange
    Uqaddsubx = 142,
    /// UQSUB16: Unsigned Saturating Subtract two 16-bit integers
    Uqsub16 = 143,
    /// UQSUB8: Unsigned Saturating Subtract four 8-bit integers
    Uqsub8 = 144,
    /// UQSUBADDX: Unsigned Saturating Subtract and Add with Exchange
    Uqsubaddx = 145,
    /// USAD8: Unsigned Sum of Absolute Differences of four 8-bit integer pairs
    Usad8 = 146,
    /// USADA8: Unsigned Sum of Absolute Differences of four 8-bit integer pairs and Accumulate
    Usada8 = 147,
    /// USAT: Unsigned Saturate
    Usat = 148,
    /// USAT16: Unsigned Saturate two 16-bit integers
    Usat16 = 149,
    /// USUB16: Unsigned Subtract two 16-bit integers
    Usub16 = 150,
    /// USUB8: Unsigned Subtract four 8-bit integers
    Usub8 = 151,
    /// USUBADDX: Unsigned Subtract and Add with Exchange
    Usubaddx = 152,
    /// UXTAB: Zero Extend Byte to 32 bits and Add
    Uxtab = 153,
    /// UXTAB16: Zero Extend two Bytes to 16 bits and Add
    Uxtab16 = 154,
    /// UXTAH: Zero Extend Halfword to 32 bits and Add
    Uxtah = 155,
    /// UXTB: Zero Extend Byte to 32 bits
    Uxtb = 156,
    /// UXTB16: Zero Extend two Bytes to 16 bits
    Uxtb16 = 157,
    /// UXTH: Zero Extend Halfword to 32 bits
    Uxth = 158,
}
impl Opcode {
    #[inline]
    pub fn find(code: u32) -> Self {
        if (code & 0x02000000) == 0x00000000 {
            if (code & 0x00100000) == 0x00100000 {
                if (code & 0x00200000) == 0x00200000 {
                    if (code & 0x00400000) == 0x00400000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x00000020) == 0x00000000 {
                                    if (code & 0x00008000) == 0x00000000 {
                                        if (code & 0x00800000) == 0x00000000 {
                                            if (code & 0x0df0f000) == 0x01700000 {
                                                return Opcode::Cmn;
                                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                                return Opcode::LdrSb;
                                            }
                                        } else if (code & 0x0def0000) == 0x01e00000 {
                                            return Opcode::Mvn;
                                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                                            return Opcode::LdrSb;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::LdrSb;
                                    }
                                } else if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x00008000) == 0x00000000 {
                                        if (code & 0x00800000) == 0x00000000 {
                                            if (code & 0x0df0f000) == 0x01700000 {
                                                return Opcode::Cmn;
                                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                                return Opcode::LdrH;
                                            }
                                        } else if (code & 0x0def0000) == 0x01e00000 {
                                            return Opcode::Mvn;
                                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                                            return Opcode::LdrH;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    }
                                } else if (code & 0x00008000) == 0x00000000 {
                                    if (code & 0x00800000) == 0x00000000 {
                                        if (code & 0x0df0f000) == 0x01700000 {
                                            return Opcode::Cmn;
                                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                                            return Opcode::LdrSh;
                                        }
                                    } else if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                                        return Opcode::LdrSh;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                }
                            } else if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::LdrB;
                                }
                            } else if (code & 0xfe100000) == 0xfc100000 {
                                return Opcode::Ldc2;
                            } else if (code & 0x0e100000) == 0x0c100000 {
                                return Opcode::Ldc;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::LdrSb;
                                    } else if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0fe000f0) == 0x00e00090 {
                                        return Opcode::Smlal;
                                    } else if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e708000) == 0x08708000 {
                                            return Opcode::LdmPcW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    } else if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08708000 {
                                        return Opcode::LdmPcW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                } else if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04700000 {
                                return Opcode::LdrBt;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::LdrB;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x0de00000) == 0x00200000 {
                                            return Opcode::Eor;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01300000 {
                                        return Opcode::Teq;
                                    }
                                } else if (code & 0xfe50ffff) == 0xf8100a00 {
                                    return Opcode::Rfe;
                                } else if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00a00000 {
                                        return Opcode::Adc;
                                    }
                                } else if (code & 0x0def0000) == 0x01a00000 {
                                    return Opcode::Mov;
                                }
                            } else if (code & 0xfe50ffff) == 0xf8100a00 {
                                return Opcode::Rfe;
                            } else if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08300000 {
                                            return Opcode::LdmW;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01300000 {
                                        return Opcode::Teq;
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::LdrSb;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0def0000) == 0x01a00000 {
                                    return Opcode::Mov;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08300000 {
                                            return Opcode::LdmW;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01300000 {
                                        return Opcode::Teq;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0def0000) == 0x01a00000 {
                                    return Opcode::Mov;
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0df0f000) == 0x01300000 {
                                    return Opcode::Teq;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000020 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08300000 {
                                            return Opcode::LdmW;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    } else if (code & 0x0de00000) == 0x00200000 {
                                        return Opcode::Eor;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00a00000 {
                                    return Opcode::Adc;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                } else if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0fe000f0) == 0x00200090 {
                                return Opcode::Mla;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0fe000f0) == 0x00a00090 {
                            return Opcode::Umlal;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0xfe50ffff) == 0xf8100a00 {
                                    return Opcode::Rfe;
                                } else if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0xfe100000) == 0xfc100000 {
                                return Opcode::Ldc2;
                            } else if (code & 0x0e100000) == 0x0c100000 {
                                return Opcode::Ldc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0df0f000) == 0x01100000 {
                                return Opcode::Tst;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x01000000) == 0x00000000 {
                                        if (code & 0x08000000) == 0x08000000 {
                                            if (code & 0x0e700000) == 0x08100000 {
                                                return Opcode::Ldm;
                                            }
                                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                                            return Opcode::LdrH;
                                        } else if (code & 0x0de00000) == 0x00000000 {
                                            return Opcode::And;
                                        }
                                    } else if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08100000 {
                                            return Opcode::Ldm;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01100000 {
                                        return Opcode::Tst;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08100000 {
                                            return Opcode::Ldm;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                                        return Opcode::LdrSh;
                                    } else if (code & 0x0de00000) == 0x00000000 {
                                        return Opcode::And;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08100000 {
                                            return Opcode::Ldm;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    } else if (code & 0x0de00000) == 0x00800000 {
                                        return Opcode::Add;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x01000000) == 0x01000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0fe0f0f0) == 0x00000090 {
                                    return Opcode::Mul;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0fe000f0) == 0x00800090 {
                                return Opcode::Umull;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0ff00fff) == 0x01900f9f {
                            return Opcode::Ldrex;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x00008000) == 0x00000000 {
                                    if (code & 0x0e708000) == 0x08500000 {
                                        return Opcode::LdmP;
                                    }
                                } else if (code & 0x0e708000) == 0x08508000 {
                                    return Opcode::LdmPc;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            }
                        } else if (code & 0x00008000) == 0x00008000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08508000 {
                                        return Opcode::LdmPc;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08508000 {
                                    return Opcode::LdmPc;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e708000) == 0x08500000 {
                                        return Opcode::LdmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08500000 {
                                return Opcode::LdmP;
                            }
                        } else if (code & 0x0df0f000) == 0x01500000 {
                            return Opcode::Cmp;
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0fe000f0) == 0x00c00090 {
                                return Opcode::Smull;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::LdrSb;
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00008000) == 0x00000000 {
                        if (code & 0x0e708000) == 0x08500000 {
                            return Opcode::LdmP;
                        }
                    } else if (code & 0x0e708000) == 0x08508000 {
                        return Opcode::LdmPc;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0xfff00000) == 0xfc500000 {
                        return Opcode::Mrrc2;
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0ff00000) == 0x0c500000 {
                        return Opcode::Mrrc;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x0c500000) == 0x04500000 {
                    return Opcode::LdrB;
                }
            } else if (code & 0x00400000) == 0x00400000 {
                if (code & 0x00800000) == 0x00800000 {
                    if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00200000) == 0x00200000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0xfe5fffe0) == 0xf84d0500 {
                                        return Opcode::Srs;
                                    }
                                } else if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                }
                            } else if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00c00000 {
                                        return Opcode::Sbc;
                                    }
                                } else if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0xfe5fffe0) == 0xf84d0500 {
                                return Opcode::Srs;
                            } else if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x00200000) == 0x00200000 {
                                    if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x000000d0 {
                                        return Opcode::LdrD;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000d0 {
                                    return Opcode::LdrD;
                                } else if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0x00200000) == 0x00200000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x0def0000) == 0x01e00000 {
                                        return Opcode::Mvn;
                                    } else if (code & 0x0e1000f0) == 0x000000b0 {
                                        return Opcode::StrH;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x000000f0 {
                                    return Opcode::StrD;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::StrH;
                                } else if (code & 0x0de00000) == 0x01c00000 {
                                    return Opcode::Bic;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::StrD;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000020 {
                            if (code & 0x00200000) == 0x00200000 {
                                if (code & 0x00000040) == 0x00000000 {
                                    if (code & 0x0e1000f0) == 0x000000b0 {
                                        return Opcode::StrH;
                                    } else if (code & 0x0de00000) == 0x00e00000 {
                                        return Opcode::Rsc;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000f0 {
                                    return Opcode::StrD;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08400000 {
                                        return Opcode::StmP;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::StrH;
                                } else if (code & 0x0de00000) == 0x00c00000 {
                                    return Opcode::Sbc;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::StrD;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x00200000) == 0x00200000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x0fe000f0) == 0x00e00090 {
                                    return Opcode::Smlal;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0fe000f0) == 0x00c00090 {
                                return Opcode::Smull;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00000020) == 0x00000020 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00200000) == 0x00200000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04600000 {
                                    return Opcode::StrBt;
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0xfe100000) == 0xfc000000 {
                                return Opcode::Stc2;
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0xfff00000) == 0xfc400000 {
                                return Opcode::Mcrr2;
                            } else if (code & 0x0ff00000) == 0x0c400000 {
                                return Opcode::Mcrr;
                            } else if (code & 0xfe100000) == 0xfc000000 {
                                return Opcode::Stc2;
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00200000) == 0x00200000 {
                        if (code & 0x00000010) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00600000 {
                                    return Opcode::Rsb;
                                }
                            } else if (code & 0x0ff0f090) == 0x01600080 {
                                return Opcode::Smul;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00090) == 0x01400080 {
                            return Opcode::SmlalXy;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08400000 {
                            return Opcode::StmP;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    } else if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x00200000) == 0x00200000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000010) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00600000 {
                                        return Opcode::Rsb;
                                    }
                                } else if (code & 0x0ff0f090) == 0x01600080 {
                                    return Opcode::Smul;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01600050 {
                            return Opcode::Qdsub;
                        }
                    } else if (code & 0x00000100) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0fb0fff0) == 0x0120f000 {
                            return Opcode::Msr;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0xfe5fffe0) == 0xf84d0500 {
                            return Opcode::Srs;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0fff0ff0) == 0x016f0f10 {
                        return Opcode::Clz;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0fbf0fff) == 0x010f0000 {
                                return Opcode::Mrs;
                            }
                        } else if (code & 0x0ff00090) == 0x01400080 {
                            return Opcode::SmlalXy;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01400050 {
                            return Opcode::Qdadd;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x01400090 {
                                return Opcode::Swpb;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x0ff000f0) == 0x00400090 {
                        return Opcode::Umaal;
                    } else if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0xfff00000) == 0xfc400000 {
                        return Opcode::Mcrr2;
                    } else if (code & 0x0ff00000) == 0x0c400000 {
                        return Opcode::Mcrr;
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0xfe5fffe0) == 0xf84d0500 {
                    return Opcode::Srs;
                } else if (code & 0x0e700000) == 0x08400000 {
                    return Opcode::StmP;
                }
            } else if (code & 0x00800000) == 0x00800000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00a00000 {
                                    return Opcode::Adc;
                                }
                            } else if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0fff0ff0) == 0x01a00000 {
                            return Opcode::Cpy;
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::StrT;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x01000000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08000000 {
                                            return Opcode::Stm;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x000000b0 {
                                        return Opcode::StrH;
                                    } else if (code & 0x0de00000) == 0x00800000 {
                                        return Opcode::Add;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::StrH;
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000f0 {
                                    return Opcode::StrD;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::StrD;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x000000d0 {
                                    return Opcode::LdrD;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0fe000f0) == 0x00800090 {
                                return Opcode::Umull;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0ff00ff0) == 0x01800f90 {
                            return Opcode::Strex;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0fe000f0) == 0x00a00090 {
                                return Opcode::Umlal;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0def0000) == 0x01a00000 {
                        return Opcode::Mov;
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::StrT;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08000000 {
                                        return Opcode::Stm;
                                    }
                                } else if (code & 0x0fe0f0f0) == 0x00000090 {
                                    return Opcode::Mul;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08200000 {
                                    return Opcode::StmW;
                                }
                            } else if (code & 0x0fe000f0) == 0x00200090 {
                                return Opcode::Mla;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    } else if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::StrT;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00000020) == 0x00000020 {
                if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xfe100000) == 0xfc000000 {
                            return Opcode::Stc2;
                        } else if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0ff00090) == 0x01000080 {
                                return Opcode::Smla;
                            }
                        } else if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    }
                } else if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0ffffff0) == 0x012fff20 {
                                return Opcode::Bxj;
                            }
                        } else if (code & 0x0ff0f0b0) == 0x012000a0 {
                            return Opcode::Smulw;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0ffffff0) == 0x012fff30 {
                                return Opcode::BlxR;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0xfff000f0) == 0xe1200070 {
                            return Opcode::Bkpt;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00000100) == 0x00000100 {
                if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0xfe100000) == 0xfc000000 {
                        return Opcode::Stc2;
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0ffffff0) == 0x012fff10 {
                            return Opcode::Bx;
                        }
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000010) == 0x00000010 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        }
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x0ff00090) == 0x01000080 {
                        return Opcode::Smla;
                    }
                } else if (code & 0x0ff000b0) == 0x01200080 {
                    return Opcode::Smlaw;
                }
            } else if (code & 0x00200000) == 0x00200000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x00000080) == 0x00000000 {
                            if (code & 0x0fb0fff0) == 0x0120f000 {
                                return Opcode::Msr;
                            }
                        } else if (code & 0x0ff000b0) == 0x01200080 {
                            return Opcode::Smlaw;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x01200050 {
                            return Opcode::Qsub;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000d0 {
                        return Opcode::LdrD;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00000010) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0xfff1ff20) == 0xf1000000 {
                            return Opcode::Cps;
                        } else if (code & 0x0ff00090) == 0x01000080 {
                            return Opcode::Smla;
                        }
                    } else if (code & 0x00010000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0xfff1ff20) == 0xf1000000 {
                                return Opcode::Cps;
                            }
                        } else if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x00020000) == 0x00000000 {
                        if (code & 0xfffffdff) == 0xf1010000 {
                            return Opcode::Setend;
                        }
                    } else if (code & 0x0fbf0fff) == 0x010f0000 {
                        return Opcode::Mrs;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0xfe100000) == 0xfc000000 {
                    return Opcode::Stc2;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0xfff1ff20) == 0xf1000000 {
                        return Opcode::Cps;
                    } else if (code & 0x0ff00ff0) == 0x01000090 {
                        return Opcode::Swp;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0xfff1ff20) == 0xf1000000 {
                        return Opcode::Cps;
                    } else if (code & 0x0ff00ff0) == 0x01000050 {
                        return Opcode::Qadd;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x0e700000) == 0x08000000 {
                        return Opcode::Stm;
                    }
                } else if (code & 0xfff1ff20) == 0xf1000000 {
                    return Opcode::Cps;
                } else if (code & 0x0e1000f0) == 0x000000d0 {
                    return Opcode::LdrD;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0xfe100000) == 0xfc000000 {
                return Opcode::Stc2;
            } else if (code & 0x0e100000) == 0x0c000000 {
                return Opcode::Stc;
            }
        } else if (code & 0x00200000) == 0x00000000 {
            if (code & 0x00800000) == 0x00800000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0xfe000000) == 0xfa000000 {
                                    return Opcode::BlxI;
                                } else if (code & 0x0f000000) == 0x0a000000 {
                                    return Opcode::B;
                                }
                            } else if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x01000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x00100000) == 0x00100000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0xfd70f000) == 0xf550f000 {
                                return Opcode::Pld;
                            } else if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::LdrB;
                            }
                        } else if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xff100010) == 0xfe100010 {
                            return Opcode::Mrc2;
                        } else if (code & 0x0f100010) == 0x0e100010 {
                            return Opcode::Mrc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x0de00000) == 0x01c00000 {
                        return Opcode::Bic;
                    }
                } else if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff03f0) == 0x06cf0070 {
                                return Opcode::Uxtb16;
                            } else if (code & 0x0ff003f0) == 0x06c00070 {
                                return Opcode::Uxtab16;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x01000000) == 0x01000000 {
                                if (code & 0x04000000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x01800000 {
                                        return Opcode::Orr;
                                    }
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06800fb0 {
                                return Opcode::Sel;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff03f0) == 0x068f0070 {
                                return Opcode::Sxtb16;
                            } else if (code & 0x0ff003f0) == 0x06800070 {
                                return Opcode::Sxtab16;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x0ff00070) == 0x06800050 {
                            return Opcode::Pkhtb;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x0ff00070) == 0x06800010 {
                            return Opcode::Pkhbt;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0ff0f0f0) == 0x0780f010 {
                            return Opcode::Usad8;
                        } else if (code & 0x0ff000f0) == 0x07800010 {
                            return Opcode::Usada8;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0de00000) == 0x01800000 {
                        return Opcode::Orr;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe000010 {
                    return Opcode::Mcr2;
                } else if (code & 0x0f100010) == 0x0e000010 {
                    return Opcode::Mcr;
                }
            } else if (code & 0x00000080) == 0x00000080 {
                if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0f000000) == 0x0f000000 {
                                    return Opcode::Swi;
                                }
                            } else if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x00000010) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x00400000) == 0x00000000 {
                                    if (code & 0x0c500000) == 0x04000000 {
                                        return Opcode::Str;
                                    }
                                } else if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0xff000010) == 0xfe000000 {
                                return Opcode::Cdp2;
                            } else if (code & 0x0f000010) == 0x0e000000 {
                                return Opcode::Cdp;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x00001000) == 0x00001000 {
                            if (code & 0x00400000) == 0x00400000 {
                                if (code & 0xfd70f000) == 0xf550f000 {
                                    return Opcode::Pld;
                                } else if (code & 0x0ff000d0) == 0x075000d0 {
                                    return Opcode::Smmls;
                                } else if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::LdrB;
                                }
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                }
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            }
                        } else if (code & 0x0ff000d0) == 0x075000d0 {
                            return Opcode::Smmls;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06100f90 {
                                return Opcode::Sadd8;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06100ff0 {
                            return Opcode::Ssub8;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06500f90 {
                            return Opcode::Uadd8;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500ff0 {
                        return Opcode::Usub8;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000010) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00100000) == 0x00000000 {
                if (code & 0x00000010) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff000d0) == 0x07400010 {
                                return Opcode::Smlald;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0ff000d0) == 0x07400050 {
                            return Opcode::Smlsld;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff0f0d0) == 0x0700f010 {
                            return Opcode::Smuad;
                        } else if (code & 0x0ff000d0) == 0x07000010 {
                            return Opcode::Smlad;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0ff0f0d0) == 0x0700f050 {
                        return Opcode::Smusd;
                    } else if (code & 0x0ff000d0) == 0x07000050 {
                        return Opcode::Smlsd;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00000010) == 0x00000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x01000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x0df0f000) == 0x01100000 {
                        return Opcode::Tst;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x0df0f000) == 0x01500000 {
                    return Opcode::Cmp;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01100000 {
                                return Opcode::Tst;
                            }
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06100f10 {
                            return Opcode::Sadd16;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06100f50 {
                        return Opcode::Ssubaddx;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0df0f000) == 0x01100000 {
                            return Opcode::Tst;
                        }
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06100f30 {
                        return Opcode::Saddsubx;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00000000 {
                        return Opcode::And;
                    }
                } else if (code & 0x0ff00ff0) == 0x06100f70 {
                    return Opcode::Ssub16;
                } else if (code & 0x0c500000) == 0x04100000 {
                    return Opcode::Ldr;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0ff0f0d0) == 0x0750f010 {
                            return Opcode::Smmul;
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0ff000d0) == 0x07500010 {
                            return Opcode::Smmla;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0df0f000) == 0x01500000 {
                        return Opcode::Cmp;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06500f10 {
                            return Opcode::Uadd16;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500f50 {
                        return Opcode::Usubaddx;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06500f30 {
                        return Opcode::Uaddsubx;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x0ff00ff0) == 0x06500f70 {
                    return Opcode::Usub16;
                } else if (code & 0x0c500000) == 0x04500000 {
                    return Opcode::LdrB;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe100010 {
                return Opcode::Mrc2;
            } else if (code & 0x0f100010) == 0x0e100010 {
                return Opcode::Mrc;
            }
        } else if (code & 0x00000100) == 0x00000000 {
            if (code & 0x00000010) == 0x00000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0f000000) == 0x0f000000 {
                                    return Opcode::Swi;
                                }
                            } else if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04200000 {
                                    return Opcode::StrT;
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0xff000010) == 0xfe000000 {
                                return Opcode::Cdp2;
                            } else if (code & 0x0f000010) == 0x0e000000 {
                                return Opcode::Cdp;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x00800000) == 0x00800000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00001000) == 0x00001000 {
                    if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x0df0f000) == 0x01300000 {
                        return Opcode::Teq;
                    }
                } else if (code & 0x0df0f000) == 0x01700000 {
                    return Opcode::Cmn;
                }
            } else if (code & 0x00800000) == 0x00000000 {
                if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0b000000 {
                                return Opcode::Bl;
                            }
                        } else if (code & 0x00001000) == 0x00001000 {
                            if (code & 0x0fb0f000) == 0x0320f000 {
                                return Opcode::MsrI;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01300000 {
                                return Opcode::Teq;
                            }
                        } else if (code & 0x0df0f000) == 0x01700000 {
                            return Opcode::Cmn;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0d700000) == 0x04200000 {
                                    return Opcode::StrT;
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0xff100010) == 0xfe000010 {
                                return Opcode::Mcr2;
                            } else if (code & 0x0f100010) == 0x0e000010 {
                                return Opcode::Mcr;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xff100010) == 0xfe100010 {
                            return Opcode::Mrc2;
                        } else if (code & 0x0f100010) == 0x0e100010 {
                            return Opcode::Mrc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0def0000) == 0x01a00000 {
                                    return Opcode::Mov;
                                }
                            } else if (code & 0x00100000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0fe00030) == 0x06a00010 {
                                    return Opcode::Ssat;
                                } else if (code & 0x0d700000) == 0x04200000 {
                                    return Opcode::StrT;
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fe00030) == 0x06a00010 {
                                return Opcode::Ssat;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fff03f0) == 0x06af0070 {
                                return Opcode::Sxtb;
                            } else if (code & 0x0ff003f0) == 0x06a00070 {
                                return Opcode::Sxtab;
                            } else if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fff03f0) == 0x06bf0070 {
                            return Opcode::Sxth;
                        } else if (code & 0x0ff003f0) == 0x06b00070 {
                            return Opcode::Sxtah;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0def0000) == 0x01a00000 {
                        return Opcode::Mov;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xff100010) == 0xfe000010 {
                            return Opcode::Mcr2;
                        } else if (code & 0x0f100010) == 0x0e000010 {
                            return Opcode::Mcr;
                        }
                    } else if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff100010) == 0xfe100010 {
                        return Opcode::Mrc2;
                    } else if (code & 0x0f100010) == 0x0e100010 {
                        return Opcode::Mrc;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0fe00030) == 0x06e00010 {
                                return Opcode::Usat;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fe00030) == 0x06e00010 {
                            return Opcode::Usat;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fff03f0) == 0x06ef0070 {
                            return Opcode::Uxtb;
                        } else if (code & 0x0ff003f0) == 0x06e00070 {
                            return Opcode::Uxtab;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x0def0000) == 0x01e00000 {
                        return Opcode::Mvn;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0fff03f0) == 0x06ff0070 {
                        return Opcode::Uxth;
                    } else if (code & 0x0ff003f0) == 0x06f00070 {
                        return Opcode::Uxtah;
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x0def0000) == 0x01e00000 {
                    return Opcode::Mvn;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x00800000) == 0x00800000 {
            if (code & 0x00000010) == 0x00000000 {
                if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00400000) == 0x00000000 {
                                if (code & 0x0def0000) == 0x01a00000 {
                                    return Opcode::Mov;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x00100000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::StrT;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::LdrT;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x0d700000) == 0x04600000 {
                        return Opcode::StrBt;
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x0d700000) == 0x04700000 {
                    return Opcode::LdrBt;
                } else if (code & 0x0c500000) == 0x04500000 {
                    return Opcode::LdrB;
                }
            } else if (code & 0x00400000) == 0x00400000 {
                if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00100000) == 0x00000000 {
                            if (code & 0x01000000) == 0x01000000 {
                                if (code & 0x0f000000) == 0x0f000000 {
                                    return Opcode::Swi;
                                }
                            } else if (code & 0xff100010) == 0xfe000010 {
                                return Opcode::Mcr2;
                            } else if (code & 0x0f100010) == 0x0e000010 {
                                return Opcode::Mcr;
                            }
                        } else if (code & 0x01000000) == 0x01000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xff100010) == 0xfe100010 {
                            return Opcode::Mrc2;
                        } else if (code & 0x0f100010) == 0x0e100010 {
                            return Opcode::Mrc;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0fe00030) == 0x06e00010 {
                                return Opcode::Usat;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06e00f30 {
                            return Opcode::Usat16;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x0def0000) == 0x01e00000 {
                        return Opcode::Mvn;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x0fe00030) == 0x06e00010 {
                            return Opcode::Usat;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0fff0ff0) == 0x06ff0fb0 {
                        return Opcode::Revsh;
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x0def0000) == 0x01e00000 {
                    return Opcode::Mvn;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0fe00030) == 0x06a00010 {
                                return Opcode::Ssat;
                            } else if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06a00f30 {
                            return Opcode::Ssat16;
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::StrT;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0def0000) == 0x01a00000 {
                        return Opcode::Mov;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            }
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fe00030) == 0x06a00010 {
                            return Opcode::Ssat;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x00010000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            }
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::LdrT;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0fff0ff0) == 0x06bf0f30 {
                            return Opcode::Rev;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0fff0ff0) == 0x06bf0fb0 {
                        return Opcode::Rev16;
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::LdrT;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x0de00000) == 0x00a00000 {
                    return Opcode::Adc;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00100000) == 0x00000000 {
                    if (code & 0x01000000) == 0x01000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x00100000) == 0x00000000 {
            if (code & 0x00000010) == 0x00000000 {
                if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0fb0f000) == 0x0320f000 {
                                return Opcode::MsrI;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000080) == 0x00000080 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000020) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06200f90 {
                                    return Opcode::Qadd8;
                                } else if (code & 0x0d700000) == 0x04200000 {
                                    return Opcode::StrT;
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06200ff0 {
                                return Opcode::Qsub8;
                            } else if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x0ff00ff0) == 0x06200f10 {
                                    return Opcode::Qadd16;
                                } else if (code & 0x0d700000) == 0x04200000 {
                                    return Opcode::StrT;
                                } else if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0ff00ff0) == 0x06200f50 {
                                return Opcode::Qsubaddx;
                            } else if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x01000000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06200f30 {
                                return Opcode::Qaddsubx;
                            } else if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06200f70 {
                            return Opcode::Qsub16;
                        } else if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::StrT;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x01000000) == 0x01000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff100010) == 0xfe000010 {
                    return Opcode::Mcr2;
                } else if (code & 0x0f100010) == 0x0e000010 {
                    return Opcode::Mcr;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000080) == 0x00000080 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06600f90 {
                                return Opcode::Uqadd8;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06600ff0 {
                            return Opcode::Uqsub8;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06600f10 {
                                return Opcode::Uqadd16;
                            } else if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06600f50 {
                            return Opcode::Uqsubaddx;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06600f30 {
                            return Opcode::Uqaddsubx;
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06600f70 {
                        return Opcode::Uqsub16;
                    } else if (code & 0x0d700000) == 0x04600000 {
                        return Opcode::StrBt;
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0x0fb0f000) == 0x0320f000 {
                    return Opcode::MsrI;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe000010 {
                return Opcode::Mcr2;
            } else if (code & 0x0f100010) == 0x0e000010 {
                return Opcode::Mcr;
            }
        } else if (code & 0x00000010) == 0x00000000 {
            if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0df0f000) == 0x01300000 {
                            return Opcode::Teq;
                        }
                    } else if (code & 0x0df0f000) == 0x01700000 {
                        return Opcode::Cmn;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0xff000010) == 0xfe000000 {
                    return Opcode::Cdp2;
                } else if (code & 0x0f000010) == 0x0e000000 {
                    return Opcode::Cdp;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x0de00000) == 0x00600000 {
                    return Opcode::Rsb;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0a000000 {
                return Opcode::B;
            }
        } else if (code & 0x00400000) == 0x00000000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000080) == 0x00000080 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06300f90 {
                                return Opcode::Shadd8;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06300ff0 {
                            return Opcode::Shsub8;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0df0f000) == 0x01300000 {
                        return Opcode::Teq;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x06300f10 {
                                return Opcode::Shadd16;
                            } else if (code & 0x0d700000) == 0x04300000 {
                                return Opcode::LdrT;
                            } else if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0ff00ff0) == 0x06300f50 {
                            return Opcode::Shsubaddx;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x01000000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0df0f000) == 0x01300000 {
                        return Opcode::Teq;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06300f30 {
                            return Opcode::Shaddsubx;
                        } else if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06300f70 {
                        return Opcode::Shsub16;
                    } else if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::LdrT;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x0df0f000) == 0x01300000 {
                    return Opcode::Teq;
                }
            } else if (code & 0x01000000) == 0x01000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe100010 {
                return Opcode::Mrc2;
            } else if (code & 0x0f100010) == 0x0e100010 {
                return Opcode::Mrc;
            }
        } else if (code & 0x08000000) == 0x00000000 {
            if (code & 0x00000080) == 0x00000080 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06700f90 {
                            return Opcode::Uhadd8;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06700ff0 {
                        return Opcode::Uhsub8;
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0x0df0f000) == 0x01700000 {
                    return Opcode::Cmn;
                }
            } else if (code & 0x00000020) == 0x00000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0ff00ff0) == 0x06700f10 {
                            return Opcode::Uhadd16;
                        } else if (code & 0x0d700000) == 0x04700000 {
                            return Opcode::LdrBt;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0ff00ff0) == 0x06700f50 {
                        return Opcode::Uhsubaddx;
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x01000000) == 0x00000000 {
                    if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0x0df0f000) == 0x01700000 {
                    return Opcode::Cmn;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x06700f30 {
                        return Opcode::Uhaddsubx;
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x0ff00ff0) == 0x06700f70 {
                    return Opcode::Uhsub16;
                } else if (code & 0x0d700000) == 0x04700000 {
                    return Opcode::LdrBt;
                } else if (code & 0x0c500000) == 0x04500000 {
                    return Opcode::LdrB;
                }
            } else if (code & 0x01000000) == 0x00000000 {
                if (code & 0x0de00000) == 0x00600000 {
                    return Opcode::Rsb;
                }
            } else if (code & 0x0df0f000) == 0x01700000 {
                return Opcode::Cmn;
            }
        } else if (code & 0x01000000) == 0x01000000 {
            if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0f000000) == 0x0f000000 {
                    return Opcode::Swi;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x04000000) == 0x00000000 {
            if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0a000000 {
                return Opcode::B;
            }
        } else if (code & 0xff100010) == 0xfe100010 {
            return Opcode::Mrc2;
        } else if (code & 0x0f100010) == 0x0e100010 {
            return Opcode::Mrc;
        }
        Opcode::Illegal
    }
    pub fn mnemonic(self) -> &'static str {
        OPCODE_MNEMONICS[self as usize]
    }
    pub fn count() -> usize {
        159
    }
}
impl Ins {
    /// Rn: First source operand register
    #[inline(always)]
    pub fn field_rn(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rn_wb: Source operand register with writeback
    #[inline(always)]
    pub fn field_rn_wb(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: true,
        }
    }
    /// Rn_deref: Base register
    #[inline(always)]
    pub fn field_rn_deref(&self) -> Reg {
        Reg {
            deref: true,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rn_deref_wb: Base register with writeback
    #[inline(always)]
    pub fn field_rn_deref_wb(&self) -> Reg {
        Reg {
            deref: true,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: true,
        }
    }
    /// Rn_12: First source operand register
    #[inline(always)]
    pub fn field_rn_12(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rm: Second source operand register
    #[inline(always)]
    pub fn field_rm(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse((self.code & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rd: Destination register
    #[inline(always)]
    pub fn field_rd(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// Rs: Register containing shift offset
    #[inline(always)]
    pub fn field_rs(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 8) & 0x0000000f)),
            writeback: false,
        }
    }
    /// RdHi: Upper 32-bit long destination register
    #[inline(always)]
    pub fn field_rdhi(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 16) & 0x0000000f)),
            writeback: false,
        }
    }
    /// RdLo: Lower 32-bit long destination register
    #[inline(always)]
    pub fn field_rdlo(&self) -> Reg {
        Reg {
            deref: false,
            reg: Register::parse(((self.code >> 12) & 0x0000000f)),
            writeback: false,
        }
    }
    /// registers: List of registers
    #[inline(always)]
    pub fn field_registers(&self) -> RegList {
        RegList {
            regs: (self.code & 0x0000ffff),
            user_mode: false,
        }
    }
    /// registers_c: List of registers (with ^ suffix)
    #[inline(always)]
    pub fn field_registers_c(&self) -> RegList {
        RegList {
            regs: (self.code & 0x0000ffff),
            user_mode: true,
        }
    }
    /// CRn: First source coprocessor register
    #[inline(always)]
    pub fn field_crn(&self) -> CoReg {
        CoReg::parse(((self.code >> 16) & 0x0000000f))
    }
    /// CRm: Second source coprocessor register
    #[inline(always)]
    pub fn field_crm(&self) -> CoReg {
        CoReg::parse((self.code & 0x0000000f))
    }
    /// CRd: Destination coprocessor register
    #[inline(always)]
    pub fn field_crd(&self) -> CoReg {
        CoReg::parse(((self.code >> 12) & 0x0000000f))
    }
    /// rotated_immed_8: 8-bit immediate
    #[inline(always)]
    pub fn field_rotated_immed_8(&self) -> u32 {
        (self.code & 0x000000ff).rotate_right(((self.code >> 8) & 0x0000000f) << 1)
    }
    /// immed_24: 24-bit immediate
    #[inline(always)]
    pub fn field_immed_24(&self) -> u32 {
        (self.code & 0x00ffffff)
    }
    /// offset_8: 8-bit immediate offset
    #[inline(always)]
    pub fn field_offset_8(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = ((self.code & 0x0000000f)
                    | (((self.code >> 8) & 0x0000000f) << 4)) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// post_offset_8: 8-bit immediate post-indexed offset
    #[inline(always)]
    pub fn field_post_offset_8(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = ((self.code & 0x0000000f)
                    | (((self.code >> 8) & 0x0000000f) << 4)) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// offset_12: 12-bit immediate offset
    #[inline(always)]
    pub fn field_offset_12(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = (self.code & 0x00000fff) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// post_offset_12: 12-bit immediate post-indexed offset
    #[inline(always)]
    pub fn field_post_offset_12(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = (self.code & 0x00000fff) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// shift_imm: Immediate shift offset
    #[inline(always)]
    pub fn field_shift_imm(&self) -> ShiftImm {
        ShiftImm {
            imm: {
                let value = ((self.code >> 7) & 0x0000001f);
                match ((self.code >> 5) & 0x00000003) {
                    1 | 2 => if value == 0 { 32 } else { value }
                    _ => value,
                }
            },
            op: Shift::parse(((self.code >> 5) & 0x00000003)),
        }
    }
    /// shift_reg: Register shift offset
    #[inline(always)]
    pub fn field_shift_reg(&self) -> ShiftReg {
        ShiftReg {
            op: Shift::parse(((self.code >> 5) & 0x00000003)),
            reg: Register::parse(((self.code >> 8) & 0x0000000f)),
        }
    }
    /// rrx: Rotate right with extend
    #[inline(always)]
    pub fn field_rrx(&self) -> Shift {
        Shift::parse(4)
    }
    /// reg_offset: Register offset
    #[inline(always)]
    pub fn field_reg_offset(&self) -> OffsetReg {
        OffsetReg {
            add: (((self.code >> 23) & 0x00000001)) != 0,
            post_indexed: false,
            reg: Register::parse((self.code & 0x0000000f)),
        }
    }
    /// reg_post_offset: Register post-indexed offset
    #[inline(always)]
    pub fn field_reg_post_offset(&self) -> OffsetReg {
        OffsetReg {
            add: (((self.code >> 23) & 0x00000001)) != 0,
            post_indexed: true,
            reg: Register::parse((self.code & 0x0000000f)),
        }
    }
    /// R: Move SPSR (1) or CPSR (0)
    #[inline(always)]
    pub fn field_r(&self) -> StatusReg {
        StatusReg::parse(((self.code >> 22) & 0x00000001))
    }
    /// coproc_offset: 8-bit immediate coprocessor offset
    #[inline(always)]
    pub fn field_coproc_offset(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: false,
            value: ({
                let value = ((self.code & 0x000000ff) << 2) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// coproc_post_offset: 8-bit immediate coprocessor offset
    #[inline(always)]
    pub fn field_coproc_post_offset(&self) -> OffsetImm {
        OffsetImm {
            post_indexed: true,
            value: ({
                let value = ((self.code & 0x000000ff) << 2) as i32;
                if ((self.code & 0x00800000) != 0) { value } else { -value }
            }) as i32,
        }
    }
    /// option: Additional instruction options for coprocessor
    #[inline(always)]
    pub fn field_option(&self) -> u32 {
        (self.code & 0x000000ff)
    }
    /// branch_offset: 24-bit signed B/BL target offset
    #[inline(always)]
    pub fn field_branch_offset(&self) -> i32 {
        (((((self.code & 0x00ffffff) << 2) + 8) as i32) << 8 >> 8) as i32
    }
    /// blx_offset: 24-bit signed BLX target offset
    #[inline(always)]
    pub fn field_blx_offset(&self) -> i32 {
        (((((self.code & 0x00ffffff) << 2 | ((self.code >> 24) & 0x00000001)) + 8)
            as i32) << 8 >> 8) as i32
    }
    /// immed_16: 16-bit immediate in bits 0..4 and 8..20
    #[inline(always)]
    pub fn field_immed_16(&self) -> u32 {
        (self.code & 0x0000000f) | ((self.code >> 8) & 0x00000fff) << 4
    }
    /// field_mask: Status fields to set
    #[inline(always)]
    pub fn field_field_mask(&self) -> StatusMask {
        StatusMask {
            control: (((self.code >> 16) & 0x00000001)) != 0,
            extension: (((self.code >> 17) & 0x00000001)) != 0,
            flags: (((self.code >> 19) & 0x00000001)) != 0,
            reg: StatusReg::parse(((self.code >> 22) & 0x00000001)),
            status: (((self.code >> 18) & 0x00000001)) != 0,
        }
    }
    /// opcode: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub fn field_opcode(&self) -> u32 {
        ((self.code >> 4) & 0x0000000f)
    }
    /// codat_opcode_1: Coprocessor operation to perform (user-defined, used by CDP instruction)
    #[inline(always)]
    pub fn field_codat_opcode_1(&self) -> u32 {
        ((self.code >> 20) & 0x0000000f)
    }
    /// comov_opcode_1: Coprocessor operation to perform (user-defined, used by MCR/MRC instructions)
    #[inline(always)]
    pub fn field_comov_opcode_1(&self) -> u32 {
        ((self.code >> 21) & 0x00000007)
    }
    /// opcode_2: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub fn field_opcode_2(&self) -> u32 {
        ((self.code >> 5) & 0x00000007)
    }
    /// coproc: Coprocessor number
    #[inline(always)]
    pub fn field_coproc(&self) -> u32 {
        ((self.code >> 8) & 0x0000000f)
    }
    /// cpsr_flags: CPSR flags
    #[inline(always)]
    pub fn field_cpsr_flags(&self) -> CpsrFlags {
        CpsrFlags {
            a: (((self.code >> 8) & 0x00000001)) != 0,
            enable: (((self.code >> 18) & 0x00000001)) != 0,
            f: (((self.code >> 6) & 0x00000001)) != 0,
            i: (((self.code >> 7) & 0x00000001)) != 0,
        }
    }
    /// cpsr_mode: CPSR mode
    #[inline(always)]
    pub fn field_cpsr_mode(&self) -> CpsrMode {
        CpsrMode {
            mode: (self.code & 0x0000001f),
            writeback: (((self.code >> 21) & 0x00000001)) != 0,
        }
    }
    /// endian: Endian specifier
    #[inline(always)]
    pub fn field_endian(&self) -> Endian {
        Endian::parse(((self.code >> 9) & 0x00000001))
    }
    /// sat_imm: Bit position for saturation
    #[inline(always)]
    pub fn field_sat_imm(&self) -> u32 {
        ((self.code >> 16) & 0x0000001f) + 1
    }
    /// S: Update condition status flags
    #[inline(always)]
    pub const fn modifier_s(&self) -> bool {
        (self.code & 0x00100000) == 0x00100000
    }
    /// L: Long coprocessor load (e.g. double instead of float)
    #[inline(always)]
    pub const fn modifier_l(&self) -> bool {
        (self.code & 0x00400000) == 0x00400000
    }
    /// y: Second multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_y(&self) -> bool {
        (self.code & 0x00000040) == 0x00000040
    }
    /// x: First multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_x(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// dual: Exchange halfwords in the second operand
    #[inline(always)]
    pub const fn modifier_dual(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// rounded: Round the multiplication
    #[inline(always)]
    pub const fn modifier_rounded(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// imod: Modify interrupt flags
    #[inline(always)]
    pub const fn modifier_imod(&self) -> Imod {
        if (self.code & 0x000e0000) == 0x00080000 {
            Imod::Ie
        } else if (self.code & 0x000e0000) == 0x000a0000 {
            Imod::IeMode
        } else if (self.code & 0x000e0000) == 0x000c0000 {
            Imod::Id
        } else if (self.code & 0x000e0000) == 0x000e0000 {
            Imod::IdMode
        } else if (self.code & 0x000e0000) == 0x00020000 {
            Imod::Mode
        } else {
            Imod::Illegal
        }
    }
    /// pack_shift: Pack shift operand
    #[inline(always)]
    pub const fn modifier_pack_shift(&self) -> PackShift {
        if (self.code & 0x00000f80) == 0x00000000 {
            PackShift::None
        } else {
            PackShift::ShiftImm
        }
    }
    /// rfe_rn: RFE source operand
    #[inline(always)]
    pub const fn modifier_rfe_rn(&self) -> RfeRn {
        match self.code & 0x00200000 {
            0x00200000 => RfeRn::Writeback,
            0x00000000 => RfeRn::NoWriteback,
            _ => RfeRn::Illegal,
        }
    }
    /// sat_shift: Saturation shift
    #[inline(always)]
    pub const fn modifier_sat_shift(&self) -> SatShift {
        if (self.code & 0x00000fe0) == 0x00000000 {
            SatShift::None
        } else {
            SatShift::ShiftImm
        }
    }
    /// ext_shift: Extend shift
    #[inline(always)]
    pub const fn modifier_ext_shift(&self) -> ExtShift {
        if (self.code & 0x00000fe0) == 0x00000000 {
            ExtShift::None
        } else {
            ExtShift::RorImm
        }
    }
    /// cond: Condition code
    #[inline(always)]
    pub const fn modifier_cond(&self) -> Cond {
        match self.code & 0xf0000000 {
            0x00000000 => Cond::Eq,
            0x10000000 => Cond::Ne,
            0x20000000 => Cond::Hs,
            0x30000000 => Cond::Lo,
            0x40000000 => Cond::Mi,
            0x50000000 => Cond::Pl,
            0x60000000 => Cond::Vs,
            0x70000000 => Cond::Vc,
            0x80000000 => Cond::Hi,
            0x90000000 => Cond::Ls,
            0xa0000000 => Cond::Ge,
            0xb0000000 => Cond::Lt,
            0xc0000000 => Cond::Gt,
            0xd0000000 => Cond::Le,
            0xe0000000 => Cond::Al,
            _ => Cond::Illegal,
        }
    }
    /// addr_data: Data-processing operands
    #[inline(always)]
    pub const fn modifier_addr_data(&self) -> AddrData {
        if (self.code & 0x0e000ff0) == 0x00000000 {
            AddrData::Reg
        } else if (self.code & 0x0e000ff0) == 0x00000060 {
            AddrData::Rrx
        } else if (self.code & 0x0e000090) == 0x00000010 {
            AddrData::ShiftReg
        } else if (self.code & 0x0e000010) == 0x00000000 {
            AddrData::ShiftImm
        } else if (self.code & 0x0e000000) == 0x02000000 {
            AddrData::Imm
        } else {
            AddrData::Illegal
        }
    }
    /// addr_ldr_str: Load and Store Word or Unsigned Byte
    #[inline(always)]
    pub const fn modifier_addr_ldr_str(&self) -> AddrLdrStr {
        if (self.code & 0x0f200ff0) == 0x07000000 {
            AddrLdrStr::Reg
        } else if (self.code & 0x0f200ff0) == 0x07000060 {
            AddrLdrStr::Rrx
        } else if (self.code & 0x0f200ff0) == 0x07200000 {
            AddrLdrStr::RegPre
        } else if (self.code & 0x0f200ff0) == 0x07200060 {
            AddrLdrStr::RrxPre
        } else if (self.code & 0x0f200ff0) == 0x06000000 {
            AddrLdrStr::RegPost
        } else if (self.code & 0x0f200ff0) == 0x06000060 {
            AddrLdrStr::RrxPpost
        } else if (self.code & 0x0f200010) == 0x07000000 {
            AddrLdrStr::Scl
        } else if (self.code & 0x0f200010) == 0x07200000 {
            AddrLdrStr::SclPre
        } else if (self.code & 0x0f200010) == 0x06000000 {
            AddrLdrStr::SclPost
        } else if (self.code & 0x0f200000) == 0x05000000 {
            AddrLdrStr::Imm
        } else if (self.code & 0x0f200000) == 0x05200000 {
            AddrLdrStr::ImmPre
        } else if (self.code & 0x0f200000) == 0x04000000 {
            AddrLdrStr::ImmPost
        } else {
            AddrLdrStr::Illegal
        }
    }
    /// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
    #[inline(always)]
    pub const fn modifier_addr_ldrt_strt(&self) -> AddrLdrtStrt {
        if (self.code & 0x0f200ff0) == 0x06200000 {
            AddrLdrtStrt::RegPost
        } else if (self.code & 0x0f200010) == 0x06200000 {
            AddrLdrtStrt::SclPost
        } else if (self.code & 0x0f200000) == 0x04200000 {
            AddrLdrtStrt::ImmPost
        } else {
            AddrLdrtStrt::Illegal
        }
    }
    /// addr_misc_ldr_str: Miscellaneous Loads and Stores
    #[inline(always)]
    pub const fn modifier_addr_misc_ldr_str(&self) -> AddrMiscLdrStr {
        if (self.code & 0x0f600f90) == 0x01000090 {
            AddrMiscLdrStr::Reg
        } else if (self.code & 0x0f600f90) == 0x01200090 {
            AddrMiscLdrStr::RegPre
        } else if (self.code & 0x0f600f90) == 0x00000090 {
            AddrMiscLdrStr::RegPost
        } else if (self.code & 0x0f600090) == 0x01400090 {
            AddrMiscLdrStr::Imm
        } else if (self.code & 0x0f600090) == 0x01600090 {
            AddrMiscLdrStr::ImmPre
        } else if (self.code & 0x0f600090) == 0x00400090 {
            AddrMiscLdrStr::ImmPost
        } else {
            AddrMiscLdrStr::Illegal
        }
    }
    /// addr_ldm_stm: Load and Store Multiple
    #[inline(always)]
    pub const fn modifier_addr_ldm_stm(&self) -> AddrLdmStm {
        match self.code & 0x01800000 {
            0x00800000 => AddrLdmStm::Ia,
            0x01800000 => AddrLdmStm::Ib,
            0x00000000 => AddrLdmStm::Da,
            0x01000000 => AddrLdmStm::Db,
            _ => AddrLdmStm::Illegal,
        }
    }
    /// addr_coproc: Load and Store Coprocessor
    #[inline(always)]
    pub const fn modifier_addr_coproc(&self) -> AddrCoproc {
        if (self.code & 0x01a00000) == 0x00800000 {
            AddrCoproc::Unidx
        } else if (self.code & 0x01200000) == 0x01000000 {
            AddrCoproc::Imm
        } else if (self.code & 0x01200000) == 0x01200000 {
            AddrCoproc::ImmPre
        } else if (self.code & 0x01200000) == 0x00200000 {
            AddrCoproc::ImmPost
        } else {
            AddrCoproc::Illegal
        }
    }
}
/// imod: Modify interrupt flags
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Imod {
    Illegal,
    /// ie: Interrupt Enable
    Ie,
    /// ie_mode: Interrupt Enable and change mode
    IeMode,
    /// id: Interrupt Disable
    Id,
    /// id_mode: Interrupt Disable and change mode
    IdMode,
    /// mode: Change mode
    Mode,
}
/// pack_shift: Pack shift operand
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum PackShift {
    Illegal,
    /// shift_imm: Shift by immediate
    ShiftImm,
    /// none: No shift operand
    None,
}
/// rfe_rn: RFE source operand
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum RfeRn {
    Illegal,
    /// writeback: Writeback to source operand
    Writeback,
    /// no_writeback: No writeback
    NoWriteback,
}
/// sat_shift: Saturation shift
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SatShift {
    Illegal,
    /// none: No shift
    None,
    /// shift_imm: Shift by immediate
    ShiftImm,
}
/// ext_shift: Extend shift
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ExtShift {
    Illegal,
    /// none: No shift
    None,
    /// ror_imm: Rotate right by immediate
    RorImm,
}
/// cond: Condition code
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Cond {
    Illegal,
    /// eq: Equal
    Eq,
    /// ne: Not equal
    Ne,
    /// hs: Unsigned higher or same
    Hs,
    /// lo: Unsigned lower
    Lo,
    /// mi: Minus/negative
    Mi,
    /// pl: Plus/positive or zero
    Pl,
    /// vs: Overflow
    Vs,
    /// vc: No overflow
    Vc,
    /// hi: Unsigned higher
    Hi,
    /// ls: Unsigned lower or same
    Ls,
    /// ge: Signed greater than or equal
    Ge,
    /// lt: Signed less than
    Lt,
    /// gt: Signed greater than
    Gt,
    /// le: Signed less than or equal
    Le,
    /// al: Always
    Al,
}
/// addr_data: Data-processing operands
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrData {
    Illegal,
    /// imm: Immediate
    Imm,
    /// reg: Register
    Reg,
    /// shift_imm: Shift by immediate
    ShiftImm,
    /// shift_reg: Shift by register
    ShiftReg,
    /// rrx: Rotate right with extend
    Rrx,
}
/// addr_ldr_str: Load and Store Word or Unsigned Byte
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// scl: Scaled register offset
    Scl,
    /// rrx: Scaled register offset
    Rrx,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// scl_pre: Scaled register pre-indexed
    SclPre,
    /// rrx_pre: Scaled register offset
    RrxPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
    /// rrx_ppost: Scaled register offset
    RrxPpost,
}
/// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdrtStrt {
    Illegal,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
}
/// addr_misc_ldr_str: Miscellaneous Loads and Stores
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrMiscLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
}
/// addr_ldm_stm: Load and Store Multiple
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrLdmStm {
    Illegal,
    /// ia: Increment After
    Ia,
    /// ib: Increment Before
    Ib,
    /// da: Decrement After
    Da,
    /// db: Decrement Before
    Db,
}
/// addr_coproc: Load and Store Coprocessor
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum AddrCoproc {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// unidx: Unindexed
    Unidx,
}
fn parse_adc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_add(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_and(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_b(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "beq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ble",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "b",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bl(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bleq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bllo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bllt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blle",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bic(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bkpt(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "bkpt",
        args: [
            Argument::UImm(ins.field_immed_16()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_i(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "blx",
        args: [
            Argument::BranchDest(ins.field_blx_offset()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_r(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "blxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "blx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "bxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bxj(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bxjeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bxjne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bxjhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bxjlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bxjmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bxjpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bxjvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bxjvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bxjhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bxjls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bxjge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bxjlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bxjgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "bxjle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bxj",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "cdpeq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "cdpne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "cdphs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "cdplo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "cdpmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "cdppl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "cdpvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "cdpvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "cdphi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "cdpls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "cdpge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "cdplt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "cdpgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "cdple",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "cdp",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "cdp2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_codat_opcode_1()),
            Argument::CoReg(ins.field_crd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_clz(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "clzeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "clzne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "clzhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "clzlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "clzmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "clzpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "clzvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "clzvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "clzhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "clzls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "clzge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "clzlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "clzgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "clzle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "clz",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmp(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cps(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_imod() {
        Imod::Ie => {
            ParsedIns {
                mnemonic: "cpsie",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::IeMode => {
            ParsedIns {
                mnemonic: "cpsie",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::Id => {
            ParsedIns {
                mnemonic: "cpsid",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::IdMode => {
            ParsedIns {
                mnemonic: "cpsid",
                args: [
                    Argument::CpsrFlags(ins.field_cpsr_flags()),
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Imod::Mode => {
            ParsedIns {
                mnemonic: "cps",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cpy(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "cpyeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "cpyne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "cpyhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "cpylo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "cpymi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "cpypl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "cpyvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "cpyvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "cpyhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "cpyls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "cpyge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "cpylt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "cpygt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "cpyle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "cpy",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_eor(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_l(), ins.modifier_addr_coproc()) {
        (Cond::Eq, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc2(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_addr_coproc()) {
        (true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_b(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_bt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_d(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldrex(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ldrexeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ldrexne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ldrexhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ldrexlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ldrexmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ldrexpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ldrexvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ldrexvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ldrexhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ldrexls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ldrexge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ldrexlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ldrexgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ldrexle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ldrex",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_h(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_sb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_sh(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_t(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mcr2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mcrr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcrreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcrr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcrr2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mcrr2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_opcode()),
            Argument::Reg(ins.field_rd()),
            Argument::Reg(ins.field_rn()),
            Argument::CoReg(ins.field_crm()),
            Argument::None,
        ],
    };
}
fn parse_mla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "mlaeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "mlanes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "mlahss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "mlalos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "mlamis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "mlapls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "mlavss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "mlavcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "mlahis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "mlalss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "mlages",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "mlalts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "mlagts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "mlales",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "mlas",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "mlaeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "mlane",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "mlahs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "mlalo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "mlami",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "mlapl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "mlavs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "mlavc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "mlahi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "mlals",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "mlage",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "mlalt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "mlagt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "mlale",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "mla",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mov(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mrc2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mrrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrrc2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mrrc2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_opcode()),
            Argument::Reg(ins.field_rd()),
            Argument::Reg(ins.field_rn()),
            Argument::CoReg(ins.field_crm()),
            Argument::None,
        ],
    };
}
fn parse_mrs(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr_i(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::StatusMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "muleqs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "mulnes",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "mulhss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "mullos",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "mulmis",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "mulpls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "mulvss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "mulvcs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "mulhis",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "mullss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "mulges",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "mullts",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "mulgts",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "mulles",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "muls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "muleq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "mulne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "mulhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "mullo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "mulmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "mulpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "mulvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "mulvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "mulhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "mulls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "mulge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "mullt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "mulgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "mulle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "mul",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mvn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_orr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pkhbt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_pack_shift()) {
        (Cond::Eq, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pkhtb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_pack_shift()) {
        (Cond::Eq, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "pkhtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, PackShift::None) => {
            ParsedIns {
                mnemonic: "pkhtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pld(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_addr_ldr_str() {
        AddrLdrStr::Imm => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Reg => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Scl => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Rrx => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RrxPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RrxPpost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qaddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qaddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qaddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qaddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qaddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qaddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qaddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qaddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qaddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qaddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qaddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qaddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qaddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qaddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qaddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qaddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rev(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "reveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "revne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "revhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "revlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "revmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "revpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "revvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "revvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "revhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "revls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "revge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "revlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "revgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "revle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "rev",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rev16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "rev16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "rev16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "rev16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "rev16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "rev16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "rev16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "rev16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "rev16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "rev16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "rev16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "rev16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "rev16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "rev16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "rev16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "rev16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_revsh(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "revsheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "revshne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "revshhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "revshlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "revshmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "revshpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "revshvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "revshvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "revshhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "revshls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "revshge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "revshlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "revshgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "revshle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "revsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rfe(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_addr_ldm_stm(), ins.modifier_rfe_rn()) {
        (AddrLdmStm::Ia, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfeda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, RfeRn::Writeback) => {
            ParsedIns {
                mnemonic: "rfedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ia, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Ib, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Da, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (AddrLdmStm::Db, RfeRn::NoWriteback) => {
            ParsedIns {
                mnemonic: "rfedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "sadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "sadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "sadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "sadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "sadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "sadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "sadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "sadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "sadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "sadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "sadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "sadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_saddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "saddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "saddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "saddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "saddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "saddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "saddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "saddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "saddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "saddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "saddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "saddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "saddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "saddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "saddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "saddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sbc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sel(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "seleq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "selne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "selhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "sello",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "selmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "selpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "selvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "selvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "selhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "sells",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "selge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "sellt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "selgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "selle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "sel",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_setend(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "setend",
        args: [
            Argument::Endian(ins.field_endian()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_shadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shaddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shaddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shaddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shaddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shaddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shaddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shaddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shaddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shaddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shaddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shaddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shaddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shaddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shaddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shaddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shaddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_shsubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "shsubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "shsubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "shsubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "shsubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "shsubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "shsubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "shsubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "shsubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "shsubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "shsubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "shsubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "shsubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "shsubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "shsubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "shsubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlattne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlatbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlattlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlatblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlattmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlatbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlattpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlatbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlattvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlatbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlattvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlatbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlattls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlatbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlattge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlatbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlattlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlatblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlattgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlatbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlattle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlatble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlad(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smladxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smladeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smladxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smladne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smladxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smladhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smladxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smladlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smladxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smladmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smladxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smladpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smladxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smladvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smladxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smladvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smladxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smladhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smladxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smladls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smladxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smladge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smladxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smladlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smladxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smladgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smladxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smladle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smladx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlad",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "smlaleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "smlalnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "smlalhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "smlallos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "smlalmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "smlalpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "smlalvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "smlalvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "smlalhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "smlallss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "smlalges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "smlallts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "smlalgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "smlalles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "smlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "smlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "smlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "smlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "smlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "smlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "smlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "smlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "smlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "smlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "smlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "smlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "smlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "smlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "smlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "smlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal_xy(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalttne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbtne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaltbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalttlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbtlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaltblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalttmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbtmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaltbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalttpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbtpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaltbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalttvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbtvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaltbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalttvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbtvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaltbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalttls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbtls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaltbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalttge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbtge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaltbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalttlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbtlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaltblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalttgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbtgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaltbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalttle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbtle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaltble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlald(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaldxeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaldeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaldxne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaldne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaldxhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaldhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaldxlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaldlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaldxmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaldmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaldxpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaldpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaldxvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaldvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaldxvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaldvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaldxhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaldhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaldxls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaldls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaldxge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaldge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaldxlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaldlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaldxgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaldgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaldxle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaldle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaldx",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlald",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlaw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlsd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsdxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsdeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsdxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsdne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsdxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsdhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsdxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsdlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsdxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsdmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsdxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsdpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsdxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsdvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsdxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsdvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsdxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsdhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsdxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsdls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsdxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsdge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsdxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsdlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsdxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsdgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsdxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsdle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsdx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlsld(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsldxeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlsldeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsldxne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlsldne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsldxhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlsldhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsldxlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlsldlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsldxmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlsldmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsldxpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlsldpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsldxvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlsldvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsldxvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlsldvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsldxhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlsldhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsldxls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlsldls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsldxge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlsldge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsldxlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlsldlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsldxgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlsldgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsldxle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlsldle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsldx",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlsld",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlareq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlaeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlarne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlane",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlarhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlahs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlarlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlalo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlarmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlami",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlarpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlapl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlarvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlavs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlarvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlavc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlarhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlahi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlarls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlals",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlarge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlage",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlarlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlalt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlargt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlagt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlarle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlale",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmlar",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmla",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmls(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlsreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmlseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlsrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmlsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlsrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmlshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlsrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmlslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlsrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmlsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlsrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmlspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlsrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmlsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlsrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmlsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlsrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmlshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlsrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmlsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlsrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmlsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlsrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmlslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlsrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmlsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlsrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmlsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmlsr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smmul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_rounded(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmulreq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smmuleq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmulrne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smmulne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmulrhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smmulhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmulrlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smmullo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmulrmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smmulmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmulrpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smmulpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmulrvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smmulvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmulrvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smmulvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmulrhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smmulhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmulrls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smmulls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmulrge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smmulge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmulrlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smmullt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmulrgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smmulgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmulrle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smmulle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmulr",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smmul",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smuad(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smuadxeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smuadeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smuadxne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smuadne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smuadxhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smuadhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smuadxlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smuadlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smuadxmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smuadmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smuadxpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smuadpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smuadxvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smuadvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smuadxvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smuadvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smuadxhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smuadhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smuadxls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smuadls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smuadxge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smuadge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smuadxlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smuadlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smuadxgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smuadgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smuadxle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smuadle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smuadx",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smuad",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulttne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smultbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulttlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smultblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulttmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smultbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulttpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smultbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulttvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smultbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulttvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smultbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulttls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smultbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulttge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smultbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulttlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smultblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulttgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smultbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulttle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smultble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "smulleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "smullnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "smullhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "smulllos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "smullmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "smullpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "smullvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "smullvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "smullhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "smulllss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "smullges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "smulllts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "smullgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "smullles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "smulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "smulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "smullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "smullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "smulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "smullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "smullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "smullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "smullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "smullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "smullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "smullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "smulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "smullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "smullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "smull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smulw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smusd(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_dual(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smusdxeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smusdeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smusdxne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smusdne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smusdxhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smusdhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smusdxlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smusdlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smusdxmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smusdmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smusdxpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smusdpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smusdxvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smusdvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smusdxvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smusdvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smusdxhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smusdhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smusdxls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smusdls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smusdxge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smusdge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smusdxlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smusdlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smusdxgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smusdgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smusdxle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smusdle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smusdx",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smusd",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_srs(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_addr_ldm_stm() {
        AddrLdmStm::Ia => {
            ParsedIns {
                mnemonic: "srsia",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdmStm::Ib => {
            ParsedIns {
                mnemonic: "srsib",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdmStm::Da => {
            ParsedIns {
                mnemonic: "srsda",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdmStm::Db => {
            ParsedIns {
                mnemonic: "srsdb",
                args: [
                    Argument::CpsrMode(ins.field_cpsr_mode()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssat(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_sat_shift()) {
        (Cond::Eq, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::None) => {
            ParsedIns {
                mnemonic: "ssat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "ssat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssat16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssat16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssat16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssat16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssat16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssat16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssat16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssat16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssat16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssat16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssat16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssat16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssat16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssat16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssat16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssat16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ssubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "ssubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "ssubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "ssubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "ssubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "ssubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "ssubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "ssubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "ssubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "ssubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "ssubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "ssubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "ssubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "ssubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ssubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "ssubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_l(), ins.modifier_addr_coproc()) {
        (Cond::Eq, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stc2(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_addr_coproc()) {
        (true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_coproc_post_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_b(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Rrx) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RrxPpost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_bt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_d(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_strex(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "strexeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "strexne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "strexhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "strexlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "strexmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "strexpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "strexvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "strexvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "strexhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "strexls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "strexge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "strexlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "strexgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "strexle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "strex",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_h(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetImm(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref_wb()),
                    Argument::OffsetReg(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_t(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetImm(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::OffsetReg(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sub(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swi(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swieq",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swine",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swihs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swilo",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swimi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swipl",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swivs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swivc",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swihi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swils",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swige",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swilt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swigt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swile",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swphs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swplo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swppl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swphi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swple",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swp",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swpb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swpbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swpblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swpbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swpbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swpblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swpble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swpb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn_deref()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtab(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtab16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtah(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxtb16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sxth(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "sxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "sxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_teq(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_tst(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Shift(ins.field_rrx()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uaddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uaddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uaddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uaddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uaddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uaddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uaddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uaddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uaddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uaddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uaddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uaddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uaddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uaddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uaddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uaddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhaddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhaddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhaddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhaddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhaddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhaddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhaddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhaddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhaddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhaddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhaddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhaddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhaddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhaddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhaddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhaddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uhsubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uhsubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uhsubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uhsubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uhsubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uhsubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uhsubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uhsubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uhsubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uhsubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uhsubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uhsubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uhsubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uhsubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uhsubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uhsubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umaal(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "umaaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "umaalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "umaalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "umaallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "umaalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "umaalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "umaalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "umaalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "umaalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "umaalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "umaalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "umaallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "umaalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "umaalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "umaal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "umlaleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "umlalnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "umlalhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "umlallos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "umlalmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "umlalpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "umlalvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "umlalvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "umlalhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "umlallss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "umlalges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "umlallts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "umlalgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "umlalles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "umlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "umlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "umlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "umlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "umlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "umlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "umlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "umlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "umlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "umlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "umlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "umlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "umlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "umlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "umlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "umlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "umulleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "umullnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "umullhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "umulllos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "umullmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "umullpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "umullvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "umullvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "umullhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "umulllss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "umullges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "umulllts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "umullgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "umullles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "umulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "umulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "umullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "umullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "umulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "umullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "umullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "umullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "umullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "umullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "umullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "umullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "umulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "umullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "umullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "umull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqadd16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqadd16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqadd16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqadd16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqadd16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqadd16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqadd16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqadd16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqadd16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqadd16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqadd16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqadd16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqadd16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqadd16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqadd16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqadd16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqadd8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqadd8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqadd8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqadd8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqadd8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqadd8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqadd8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqadd8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqadd8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqadd8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqadd8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqadd8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqadd8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqadd8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqadd8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqadd8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqaddsubx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqaddsubxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqaddsubxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqaddsubxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqaddsubxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqaddsubxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqaddsubxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqaddsubxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqaddsubxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqaddsubxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqaddsubxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqaddsubxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqaddsubxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqaddsubxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqaddsubxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqaddsubx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uqsubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "uqsubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "uqsubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "uqsubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "uqsubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "uqsubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "uqsubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "uqsubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "uqsubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "uqsubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "uqsubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "uqsubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "uqsubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "uqsubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "uqsubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "uqsubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usad8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usad8eq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usad8ne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usad8hs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usad8lo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usad8mi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usad8pl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usad8vs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usad8vc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usad8hi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usad8ls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usad8ge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usad8lt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usad8gt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usad8le",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usad8",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usada8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usada8eq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usada8ne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usada8hs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usada8lo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usada8mi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usada8pl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usada8vs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usada8vc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usada8hi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usada8ls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usada8ge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usada8lt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usada8gt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usada8le",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usada8",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn_12()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usat(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_sat_shift()) {
        (Cond::Eq, SatShift::None) => {
            ParsedIns {
                mnemonic: "usateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::None) => {
            ParsedIns {
                mnemonic: "usaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::None) => {
            ParsedIns {
                mnemonic: "usathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::None) => {
            ParsedIns {
                mnemonic: "usatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::None) => {
            ParsedIns {
                mnemonic: "usat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usateq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usaths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usathi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usatle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, SatShift::ShiftImm) => {
            ParsedIns {
                mnemonic: "usat",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usat16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usat16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usat16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usat16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usat16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usat16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usat16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usat16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usat16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usat16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usat16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usat16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usat16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usat16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usat16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usat16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::SatImm(ins.field_sat_imm()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usub16(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usub16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usub16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usub16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usub16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usub16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usub16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usub16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usub16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usub16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usub16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usub16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usub16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usub16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usub16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usub16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usub8(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usub8eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usub8ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usub8hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usub8lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usub8mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usub8pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usub8vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usub8vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usub8hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usub8ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usub8ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usub8lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usub8gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usub8le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usub8",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_usubaddx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "usubaddxeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "usubaddxne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "usubaddxhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "usubaddxlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "usubaddxmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "usubaddxpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "usubaddxvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "usubaddxvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "usubaddxhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "usubaddxls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "usubaddxge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "usubaddxlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "usubaddxgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "usubaddxle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "usubaddx",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtab(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtablo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtablt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtabgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtable",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtab16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtab16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtah(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtaheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtahle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtah",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxtb16(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16eq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16hs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16lo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16mi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16pl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16vs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16vc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16hi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16ge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16lt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16gt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16le",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtb16",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_uxth(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_ext_shift()) {
        (Cond::Eq, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::None) => {
            ParsedIns {
                mnemonic: "uxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxtheq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxthle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, ExtShift::RorImm) => {
            ParsedIns {
                mnemonic: "uxth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
type MnemonicParser = fn(&mut ParsedIns, Ins);
static MNEMONIC_PARSERS: [MnemonicParser; 159] = [
    parse_adc,
    parse_add,
    parse_and,
    parse_b,
    parse_bl,
    parse_bic,
    parse_bkpt,
    parse_blx_i,
    parse_blx_r,
    parse_bx,
    parse_bxj,
    parse_cdp,
    parse_cdp2,
    parse_clz,
    parse_cmn,
    parse_cmp,
    parse_cps,
    parse_cpy,
    parse_eor,
    parse_ldc,
    parse_ldc2,
    parse_ldm_w,
    parse_ldm,
    parse_ldm_p,
    parse_ldm_pc_w,
    parse_ldm_pc,
    parse_ldr,
    parse_ldr_b,
    parse_ldr_bt,
    parse_ldr_d,
    parse_ldrex,
    parse_ldr_h,
    parse_ldr_sb,
    parse_ldr_sh,
    parse_ldr_t,
    parse_mcr,
    parse_mcr2,
    parse_mcrr,
    parse_mcrr2,
    parse_mla,
    parse_mov,
    parse_mrc,
    parse_mrc2,
    parse_mrrc,
    parse_mrrc2,
    parse_mrs,
    parse_msr_i,
    parse_msr,
    parse_mul,
    parse_mvn,
    parse_orr,
    parse_pkhbt,
    parse_pkhtb,
    parse_pld,
    parse_qadd,
    parse_qadd16,
    parse_qadd8,
    parse_qaddsubx,
    parse_qdadd,
    parse_qdsub,
    parse_qsub,
    parse_qsub16,
    parse_qsub8,
    parse_qsubaddx,
    parse_rev,
    parse_rev16,
    parse_revsh,
    parse_rfe,
    parse_rsb,
    parse_rsc,
    parse_sadd16,
    parse_sadd8,
    parse_saddsubx,
    parse_sbc,
    parse_sel,
    parse_setend,
    parse_shadd16,
    parse_shadd8,
    parse_shaddsubx,
    parse_shsub16,
    parse_shsub8,
    parse_shsubaddx,
    parse_smla,
    parse_smlad,
    parse_smlal,
    parse_smlal_xy,
    parse_smlald,
    parse_smlaw,
    parse_smlsd,
    parse_smlsld,
    parse_smmla,
    parse_smmls,
    parse_smmul,
    parse_smuad,
    parse_smul,
    parse_smull,
    parse_smulw,
    parse_smusd,
    parse_srs,
    parse_ssat,
    parse_ssat16,
    parse_ssub16,
    parse_ssub8,
    parse_ssubaddx,
    parse_stc,
    parse_stc2,
    parse_stm,
    parse_stm_w,
    parse_stm_p,
    parse_str,
    parse_str_b,
    parse_str_bt,
    parse_str_d,
    parse_strex,
    parse_str_h,
    parse_str_t,
    parse_sub,
    parse_swi,
    parse_swp,
    parse_swpb,
    parse_sxtab,
    parse_sxtab16,
    parse_sxtah,
    parse_sxtb,
    parse_sxtb16,
    parse_sxth,
    parse_teq,
    parse_tst,
    parse_uadd16,
    parse_uadd8,
    parse_uaddsubx,
    parse_uhadd16,
    parse_uhadd8,
    parse_uhaddsubx,
    parse_uhsub16,
    parse_uhsub8,
    parse_uhsubaddx,
    parse_umaal,
    parse_umlal,
    parse_umull,
    parse_uqadd16,
    parse_uqadd8,
    parse_uqaddsubx,
    parse_uqsub16,
    parse_uqsub8,
    parse_uqsubaddx,
    parse_usad8,
    parse_usada8,
    parse_usat,
    parse_usat16,
    parse_usub16,
    parse_usub8,
    parse_usubaddx,
    parse_uxtab,
    parse_uxtab16,
    parse_uxtah,
    parse_uxtb,
    parse_uxtb16,
    parse_uxth,
];
#[inline]
pub fn parse(out: &mut ParsedIns, ins: Ins) {
    if ins.op != Opcode::Illegal {
        MNEMONIC_PARSERS[ins.op as usize](out, ins);
    } else {
        *out = ParsedIns {
            mnemonic: "<illegal>",
            args: [
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
            ],
        };
    }
}
