#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
// Generated by armv5te-generator. Do not edit!
use crate::disasm::{Ins, ParsedIns};
/// These are the mnemonics of each opcode. Some mnemonics are duplicated due to them having multiple formats.
static OPCODE_MNEMONICS: [&str; 78] = [
    "adc",
    "add",
    "and",
    "b",
    "bl",
    "bic",
    "bkpt",
    "blx",
    "blx",
    "bx",
    "cdp",
    "cdp2",
    "clz",
    "cmn",
    "cmp",
    "eor",
    "ldc",
    "ldc2",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldm",
    "ldr",
    "ldrb",
    "ldrbt",
    "ldrd",
    "ldrh",
    "ldrsb",
    "ldrsh",
    "ldrt",
    "mcr",
    "mcr2",
    "mcrr",
    "mla",
    "mov",
    "mrc",
    "mrc2",
    "mrrc",
    "mrs",
    "msr",
    "msr",
    "mul",
    "mvn",
    "orr",
    "pld",
    "qadd",
    "qdadd",
    "qdsub",
    "qsub",
    "rsb",
    "rsc",
    "sbc",
    "smla",
    "smlal",
    "smlal",
    "smlaw",
    "smul",
    "smull",
    "smulw",
    "stc",
    "stm",
    "stm",
    "stm",
    "str",
    "strb",
    "strbt",
    "strd",
    "strh",
    "strt",
    "sub",
    "swi",
    "swp",
    "swpb",
    "teq",
    "tst",
    "umlal",
    "umull",
];
#[derive(Clone, Copy, Debug, Default, PartialEq, Eq)]
#[repr(u8)]
#[non_exhaustive]
pub enum Opcode {
    /// Illegal or unknown
    #[default]
    Illegal = u8::MAX,
    /// ADC: Add with Carry
    Adc = 0,
    /// ADD: Add
    Add = 1,
    /// AND: Bitwise AND
    And = 2,
    /// B: Branch
    B = 3,
    /// BL: Branch and Link
    Bl = 4,
    /// BIC: Bit Clear
    Bic = 5,
    /// BKPT: Breakpoint
    Bkpt = 6,
    /// BLX: Branch and Link and Exchange to Thumb (immediate target)
    BlxI = 7,
    /// BLX: Branch and Link and Exchange to Thumb (register target)
    BlxR = 8,
    /// BX: Branch and Exchange to Thumb
    Bx = 9,
    /// CDP: Coprocessor Data Processing
    Cdp = 10,
    /// CDP2: Coprocessor Data Processing (unconditional, extended)
    Cdp2 = 11,
    /// CLZ: Count Leading Zeros
    Clz = 12,
    /// CMN: Compare Negative
    Cmn = 13,
    /// CMP: Compare
    Cmp = 14,
    /// EOR: Bitwise Exclusive OR
    Eor = 15,
    /// LDC: Load Coprocessor
    Ldc = 16,
    /// LDC2: Load Coprocessor (unconditional, extended)
    Ldc2 = 17,
    /// LDM: Load Multiple (writeback)
    LdmW = 18,
    /// LDM: Load Multiple
    Ldm = 19,
    /// LDM: Load Multiple (privileged)
    LdmP = 20,
    /// LDM: Load Multiple (including PC, writeback)
    LdmPcW = 21,
    /// LDM: Load Multiple (including PC)
    LdmPc = 22,
    /// LDR: Load Register
    Ldr = 23,
    /// LDRB: Load Register Byte
    LdrB = 24,
    /// LDRBT: Load Register Byte with Translation
    LdrBt = 25,
    /// LDRD: Load Registers Doubleword
    LdrD = 26,
    /// LDRH: Load Register Halfword
    LdrH = 27,
    /// LDRSB: Load Register Signed Byte
    LdrSb = 28,
    /// LDRSH: Load Register Signed Halfword
    LdrSh = 29,
    /// LDRT: Load Register with Translation
    LdrT = 30,
    /// MCR: Move to Coprocessor from ARM Register
    Mcr = 31,
    /// MCR2: Move to Coprocessor from ARM Register (unconditional, extended)
    Mcr2 = 32,
    /// MCRR: Move to Coprocessor from two ARM Registers
    Mcrr = 33,
    /// MLA: Multiply Accumulate
    Mla = 34,
    /// MOV: Move
    Mov = 35,
    /// MRC: Move to ARM Register from Coprocessor
    Mrc = 36,
    /// MRC2: Move to ARM Register from Coprocessor (unconditional, extended)
    Mrc2 = 37,
    /// MRRC: Move to two ARM Registers from Coprocessor
    Mrrc = 38,
    /// MRS: Move to ARM Register from Status Register
    Mrs = 39,
    /// MSR: Move to Status Register from ARM Register
    MsrI = 40,
    /// MSR: Move to Status Register from ARM Register
    Msr = 41,
    /// MUL: Multiply
    Mul = 42,
    /// MVN: Move Not
    Mvn = 43,
    /// ORR: Logical OR
    Orr = 44,
    /// PLD: Preload Data
    Pld = 45,
    /// QADD: Saturating Add
    Qadd = 46,
    /// QDADD: Saturating Double and Add
    Qdadd = 47,
    /// QDSUB: Saturating Double and Subtract
    Qdsub = 48,
    /// QSUB: Saturating Subtract
    Qsub = 49,
    /// RSB: Reverse Subtract
    Rsb = 50,
    /// RSC: Reverse Subtract with Carry
    Rsc = 51,
    /// SBC: Subtract with Carry
    Sbc = 52,
    /// SMLA: Signed Multiply Accumulate
    Smla = 53,
    /// SMLAL: Signed Multiply Accumulate Long
    Smlal = 54,
    /// SMLAL: Signed Multiply Accumulate Long
    SmlalXy = 55,
    /// SMLAW: Signed Multiply Accumulate Word
    Smlaw = 56,
    /// SMUL: Signed Multiply
    Smul = 57,
    /// SMULL: Signed Multiply Long
    Smull = 58,
    /// SMULW: Signed Multiply Word
    Smulw = 59,
    /// STC: Store Coprocessor
    Stc = 60,
    /// STM: Store Multiple
    Stm = 61,
    /// STM: Store Multiple (writeback)
    StmW = 62,
    /// STM: Store Multiple (privileged)
    StmP = 63,
    /// STR: Store Register
    Str = 64,
    /// STRB: Store Register Byte
    StrB = 65,
    /// STRBT: Store Register Byte with Translation
    StrBt = 66,
    /// STRD: Store Registers Doubleword
    StrD = 67,
    /// STRH: Store Register Halfword
    StrH = 68,
    /// STRT: Store Register with Translation
    StrT = 69,
    /// SUB: Subtract
    Sub = 70,
    /// SWI: Software Interrupt
    Swi = 71,
    /// SWP: Swap
    Swp = 72,
    /// SWPB: Swap Byte
    Swpb = 73,
    /// TEQ: Test Equivalence
    Teq = 74,
    /// TST: Test
    Tst = 75,
    /// UMLAL: Unsigned Multiply Accumulate Long
    Umlal = 76,
    /// UMULL: Unsigned Multiply Long
    Umull = 77,
}
impl Opcode {
    #[inline]
    pub fn find(code: u32) -> Self {
        if (code & 0x00100000) == 0x00100000 {
            if (code & 0x01000000) == 0x01000000 {
                if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00200000) == 0x00000000 {
                                if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x0df0f000) == 0x01100000 {
                                        return Opcode::Tst;
                                    }
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01300000 {
                                    return Opcode::Teq;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x00200000) == 0x00200000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04500000 {
                                    return Opcode::LdrB;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01700000 {
                                    return Opcode::Cmn;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xfd70f000) == 0xf550f000 {
                            return Opcode::Pld;
                        } else if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            }
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x00200000) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x04000000) == 0x04000000 {
                                        if (code & 0x0c500000) == 0x04100000 {
                                            return Opcode::Ldr;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01100000 {
                                        return Opcode::Tst;
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::LdrSb;
                                    }
                                } else if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x0df0f000) == 0x01300000 {
                                    return Opcode::Teq;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            }
                        } else if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x04000000) == 0x04000000 {
                                        if (code & 0x0c500000) == 0x04100000 {
                                            return Opcode::Ldr;
                                        }
                                    } else if (code & 0x0df0f000) == 0x01100000 {
                                        return Opcode::Tst;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    }
                                } else if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x0df0f000) == 0x01100000 {
                                    return Opcode::Tst;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x04000000) == 0x04000000 {
                                    if (code & 0x0c500000) == 0x04100000 {
                                        return Opcode::Ldr;
                                    }
                                } else if (code & 0x0df0f000) == 0x01300000 {
                                    return Opcode::Teq;
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                }
                            } else if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04100000 {
                                    return Opcode::Ldr;
                                }
                            } else if (code & 0x0df0f000) == 0x01300000 {
                                return Opcode::Teq;
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x00200000) == 0x00200000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000020) == 0x00000000 {
                            if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x0df0f000) == 0x01700000 {
                                        return Opcode::Cmn;
                                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                                        return Opcode::LdrSb;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x0df0f000) == 0x01700000 {
                                        return Opcode::Cmn;
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    }
                                } else if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            }
                        } else if (code & 0x00008000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0df0f000) == 0x01700000 {
                                    return Opcode::Cmn;
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                }
                            } else if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08708000 {
                                return Opcode::LdmPcW;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x00008000) == 0x00000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::LdrSb;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00008000) == 0x00008000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08508000 {
                                    return Opcode::LdmPc;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08508000 {
                                return Opcode::LdmPc;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08500000 {
                                    return Opcode::LdmP;
                                }
                            } else if (code & 0x0df0f000) == 0x01500000 {
                                return Opcode::Cmp;
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08500000 {
                                return Opcode::LdmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                            return Opcode::LdrH;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08500000 {
                                return Opcode::LdmP;
                            }
                        } else if (code & 0x0df0f000) == 0x01500000 {
                            return Opcode::Cmp;
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e708000) == 0x08500000 {
                            return Opcode::LdmP;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                        return Opcode::LdrSh;
                    } else if (code & 0x0de00000) == 0x01c00000 {
                        return Opcode::Bic;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0xfd70f000) == 0xf550f000 {
                        return Opcode::Pld;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0xfe100000) == 0xfc100000 {
                    return Opcode::Ldc2;
                } else if (code & 0x0e100000) == 0x0c100000 {
                    return Opcode::Ldc;
                }
            } else if (code & 0x02000000) == 0x02000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x0de00000) == 0x00000000 {
                                        return Opcode::And;
                                    }
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0xfe000000) == 0xfa000000 {
                                return Opcode::BlxI;
                            } else if (code & 0x0f000000) == 0x0a000000 {
                                return Opcode::B;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00400000 {
                                    return Opcode::Sub;
                                }
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0a000000 {
                            return Opcode::B;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0d700000) == 0x04300000 {
                            return Opcode::LdrT;
                        } else if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x00000010) == 0x00000000 {
                    if (code & 0xff000010) == 0xfe000000 {
                        return Opcode::Cdp2;
                    } else if (code & 0x0f000010) == 0x0e000000 {
                        return Opcode::Cdp;
                    }
                } else if (code & 0xff100010) == 0xfe100010 {
                    return Opcode::Mrc2;
                } else if (code & 0x0f100010) == 0x0e100010 {
                    return Opcode::Mrc;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x00800000) == 0x00000000 {
                                    if (code & 0x08000000) == 0x08000000 {
                                        if (code & 0x0e700000) == 0x08100000 {
                                            return Opcode::Ldm;
                                        }
                                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                                        return Opcode::LdrH;
                                    } else if (code & 0x0de00000) == 0x00000000 {
                                        return Opcode::And;
                                    }
                                } else if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00800000 {
                                    return Opcode::Add;
                                }
                            } else if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000f0 {
                                    return Opcode::LdrSh;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04100000 {
                                return Opcode::Ldr;
                            }
                        } else if (code & 0xfe100000) == 0xfc100000 {
                            return Opcode::Ldc2;
                        } else if (code & 0x0e100000) == 0x0c100000 {
                            return Opcode::Ldc;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000040 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08100000 {
                                        return Opcode::Ldm;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000d0 {
                                    return Opcode::LdrSb;
                                } else if (code & 0x0de00000) == 0x00000000 {
                                    return Opcode::And;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08100000 {
                                    return Opcode::Ldm;
                                }
                            } else if (code & 0x0fe0f0f0) == 0x00000090 {
                                return Opcode::Mul;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08100000 {
                                return Opcode::Ldm;
                            }
                        } else if (code & 0x0fe000f0) == 0x00800090 {
                            return Opcode::Umull;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04100000 {
                            return Opcode::Ldr;
                        }
                    } else if (code & 0xfe100000) == 0xfc100000 {
                        return Opcode::Ldc2;
                    } else if (code & 0x0e100000) == 0x0c100000 {
                        return Opcode::Ldc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000020 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x00800000) == 0x00000000 {
                                if (code & 0x08000000) == 0x08000000 {
                                    if (code & 0x0e700000) == 0x08300000 {
                                        return Opcode::LdmW;
                                    }
                                } else if (code & 0x0e1000f0) == 0x001000b0 {
                                    return Opcode::LdrH;
                                } else if (code & 0x0de00000) == 0x00200000 {
                                    return Opcode::Eor;
                                }
                            } else if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            } else if (code & 0x0de00000) == 0x00a00000 {
                                return Opcode::Adc;
                            }
                        } else if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000f0 {
                                return Opcode::LdrSh;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00000040) == 0x00000040 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08300000 {
                                    return Opcode::LdmW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x00200000 {
                                return Opcode::Eor;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::LdrSb;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08300000 {
                                return Opcode::LdmW;
                            }
                        } else if (code & 0x0fe000f0) == 0x00200090 {
                            return Opcode::Mla;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08300000 {
                            return Opcode::LdmW;
                        }
                    } else if (code & 0x0fe000f0) == 0x00a00090 {
                        return Opcode::Umlal;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04300000 {
                        return Opcode::LdrT;
                    } else if (code & 0x0c500000) == 0x04100000 {
                        return Opcode::Ldr;
                    }
                } else if (code & 0xfe100000) == 0xfc100000 {
                    return Opcode::Ldc2;
                } else if (code & 0x0e100000) == 0x0c100000 {
                    return Opcode::Ldc;
                }
            } else if (code & 0x00200000) == 0x00200000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000d0 {
                                return Opcode::LdrSb;
                            } else if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0fe000f0) == 0x00e00090 {
                                return Opcode::Smlal;
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08708000 {
                                return Opcode::LdmPcW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::LdrSb;
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x00800000) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e708000) == 0x08708000 {
                                    return Opcode::LdmPcW;
                                }
                            } else if (code & 0x0e1000f0) == 0x001000b0 {
                                return Opcode::LdrH;
                            } else if (code & 0x0de00000) == 0x00600000 {
                                return Opcode::Rsb;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08708000 {
                                return Opcode::LdmPcW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                            return Opcode::LdrH;
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e708000) == 0x08708000 {
                                return Opcode::LdmPcW;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000f0 {
                            return Opcode::LdrSh;
                        } else if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e708000) == 0x08708000 {
                            return Opcode::LdmPcW;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                        return Opcode::LdrSh;
                    } else if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0d700000) == 0x04700000 {
                        return Opcode::LdrBt;
                    } else if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0xfe100000) == 0xfc100000 {
                    return Opcode::Ldc2;
                } else if (code & 0x0e100000) == 0x0c100000 {
                    return Opcode::Ldc;
                }
            } else if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::LdrB;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000d0 {
                            return Opcode::LdrSb;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::LdrB;
                            }
                        } else if (code & 0x0fe000f0) == 0x00c00090 {
                            return Opcode::Smull;
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000d0 {
                        return Opcode::LdrSb;
                    } else if (code & 0x0de00000) == 0x00c00000 {
                        return Opcode::Sbc;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x00800000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04500000 {
                                return Opcode::LdrB;
                            }
                        } else if (code & 0x0e1000f0) == 0x001000b0 {
                            return Opcode::LdrH;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000b0 {
                        return Opcode::LdrH;
                    } else if (code & 0x0de00000) == 0x00c00000 {
                        return Opcode::Sbc;
                    }
                } else if (code & 0x00800000) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04500000 {
                            return Opcode::LdrB;
                        }
                    } else if (code & 0x0e1000f0) == 0x001000f0 {
                        return Opcode::LdrSh;
                    } else if (code & 0x0de00000) == 0x00400000 {
                        return Opcode::Sub;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04500000 {
                        return Opcode::LdrB;
                    }
                } else if (code & 0x0e1000f0) == 0x001000f0 {
                    return Opcode::LdrSh;
                } else if (code & 0x0de00000) == 0x00c00000 {
                    return Opcode::Sbc;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0x00008000) == 0x00000000 {
                    if (code & 0x0e708000) == 0x08500000 {
                        return Opcode::LdmP;
                    }
                } else if (code & 0x0e708000) == 0x08508000 {
                    return Opcode::LdmPc;
                }
            } else if (code & 0xfe100000) == 0xfc100000 {
                return Opcode::Ldc2;
            } else if (code & 0x0ff00000) == 0x0c500000 {
                return Opcode::Mrrc;
            } else if (code & 0x0e100000) == 0x0c100000 {
                return Opcode::Ldc;
            }
        } else if (code & 0x00800000) == 0x00800000 {
            if (code & 0x01000000) == 0x01000000 {
                if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x08000000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x00200000) == 0x00000000 {
                                if (code & 0x0de00000) == 0x01800000 {
                                    return Opcode::Orr;
                                }
                            } else if (code & 0x0def0000) == 0x01a00000 {
                                return Opcode::Mov;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0f000000) == 0x0f000000 {
                                return Opcode::Swi;
                            }
                        } else if (code & 0xfe000000) == 0xfa000000 {
                            return Opcode::BlxI;
                        } else if (code & 0x0f000000) == 0x0b000000 {
                            return Opcode::Bl;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0f000000) == 0x0f000000 {
                            return Opcode::Swi;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0b000000 {
                        return Opcode::Bl;
                    }
                } else if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00200000) == 0x00200000 {
                            if (code & 0x04000000) == 0x00000000 {
                                if (code & 0x0def0000) == 0x01e00000 {
                                    return Opcode::Mvn;
                                } else if (code & 0x0e1000f0) == 0x000000d0 {
                                    return Opcode::LdrD;
                                }
                            } else if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x00200000) == 0x00200000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x08000000) == 0x00000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0x0e100000) == 0x0c000000 {
                                return Opcode::Stc;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x0def0000) == 0x01e00000 {
                                return Opcode::Mvn;
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            }
                        } else if (code & 0x0def0000) == 0x01e00000 {
                            return Opcode::Mvn;
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x01c00000 {
                                return Opcode::Bic;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x01c00000 {
                            return Opcode::Bic;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x01800000 {
                                return Opcode::Orr;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0def0000) == 0x01a00000 {
                            return Opcode::Mov;
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        }
                    } else if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x01800000 {
                            return Opcode::Orr;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0def0000) == 0x01a00000 {
                        return Opcode::Mov;
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08000000 {
                        return Opcode::Stm;
                    }
                } else if (code & 0x0e700000) == 0x08200000 {
                    return Opcode::StmW;
                }
            } else if (code & 0x02000000) == 0x02000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0d700000) == 0x04200000 {
                                return Opcode::StrT;
                            } else if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00000010) == 0x00000000 {
                        if (code & 0xff000010) == 0xfe000000 {
                            return Opcode::Cdp2;
                        } else if (code & 0x0f000010) == 0x0e000000 {
                            return Opcode::Cdp;
                        }
                    } else if (code & 0xff100010) == 0xfe000010 {
                        return Opcode::Mcr2;
                    } else if (code & 0x0f100010) == 0x0e000010 {
                        return Opcode::Mcr;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0x00400000) == 0x00400000 {
                if (code & 0x00000020) == 0x00000020 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00200000) == 0x00200000 {
                            if (code & 0x00000040) == 0x00000000 {
                                if (code & 0x0e1000f0) == 0x000000b0 {
                                    return Opcode::StrH;
                                } else if (code & 0x0de00000) == 0x00e00000 {
                                    return Opcode::Rsc;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000f0 {
                                return Opcode::StrD;
                            } else if (code & 0x0de00000) == 0x00e00000 {
                                return Opcode::Rsc;
                            }
                        } else if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e100000) == 0x0c000000 {
                            return Opcode::Stc;
                        }
                    } else if (code & 0x0d700000) == 0x04600000 {
                        return Opcode::StrBt;
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08400000 {
                                    return Opcode::StmP;
                                }
                            } else if (code & 0x0fe000f0) == 0x00c00090 {
                                return Opcode::Smull;
                            } else if (code & 0x0de00000) == 0x00c00000 {
                                return Opcode::Sbc;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08400000 {
                                return Opcode::StmP;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00c00000 {
                            return Opcode::Sbc;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0fe000f0) == 0x00e00090 {
                            return Opcode::Smlal;
                        } else if (code & 0x0de00000) == 0x00e00000 {
                            return Opcode::Rsc;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000d0 {
                        return Opcode::LdrD;
                    } else if (code & 0x0de00000) == 0x00e00000 {
                        return Opcode::Rsc;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x0d700000) == 0x04600000 {
                    return Opcode::StrBt;
                } else if (code & 0x0c500000) == 0x04400000 {
                    return Opcode::StrB;
                }
            } else if (code & 0x00200000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x08000000) == 0x08000000 {
                                if (code & 0x0e700000) == 0x08000000 {
                                    return Opcode::Stm;
                                }
                            } else if (code & 0x0fe000f0) == 0x00800090 {
                                return Opcode::Umull;
                            } else if (code & 0x0de00000) == 0x00800000 {
                                return Opcode::Add;
                            }
                        } else if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x08000000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08000000 {
                                return Opcode::Stm;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        } else if (code & 0x0de00000) == 0x00800000 {
                            return Opcode::Add;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    } else if (code & 0x0de00000) == 0x00800000 {
                        return Opcode::Add;
                    }
                } else if (code & 0x08000000) == 0x00000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x08000000) == 0x08000000 {
                            if (code & 0x0e700000) == 0x08200000 {
                                return Opcode::StmW;
                            }
                        } else if (code & 0x0fe000f0) == 0x00a00090 {
                            return Opcode::Umlal;
                        } else if (code & 0x0de00000) == 0x00a00000 {
                            return Opcode::Adc;
                        }
                    } else if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000d0 {
                        return Opcode::LdrD;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x08000000) == 0x08000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000b0 {
                        return Opcode::StrH;
                    } else if (code & 0x0de00000) == 0x00a00000 {
                        return Opcode::Adc;
                    }
                } else if (code & 0x08000000) == 0x08000000 {
                    if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0x0e1000f0) == 0x000000f0 {
                    return Opcode::StrD;
                } else if (code & 0x0de00000) == 0x00a00000 {
                    return Opcode::Adc;
                }
            } else if (code & 0x08000000) == 0x08000000 {
                if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x0d700000) == 0x04200000 {
                return Opcode::StrT;
            } else if (code & 0x0c500000) == 0x04000000 {
                return Opcode::Str;
            }
        } else if (code & 0x01000000) == 0x00000000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x00000020) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0d700000) == 0x04600000 {
                                return Opcode::StrBt;
                            } else if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x00200000) == 0x00000000 {
                            if (code & 0x0e1000f0) == 0x000000d0 {
                                return Opcode::LdrD;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        } else if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04400000 {
                                    return Opcode::StrB;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00400000 {
                                return Opcode::Sub;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04400000 {
                                return Opcode::StrB;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00400000 {
                            return Opcode::Sub;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0d700000) == 0x04600000 {
                            return Opcode::StrBt;
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        } else if (code & 0x0de00000) == 0x00600000 {
                            return Opcode::Rsb;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    } else if (code & 0x0de00000) == 0x00600000 {
                        return Opcode::Rsb;
                    }
                } else if (code & 0x00000020) == 0x00000020 {
                    if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x00000040) == 0x00000000 {
                            if (code & 0x04000000) == 0x04000000 {
                                if (code & 0x0c500000) == 0x04000000 {
                                    return Opcode::Str;
                                }
                            } else if (code & 0x0e1000f0) == 0x000000b0 {
                                return Opcode::StrH;
                            } else if (code & 0x0de00000) == 0x00000000 {
                                return Opcode::And;
                            }
                        } else if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0e1000f0) == 0x000000f0 {
                            return Opcode::StrD;
                        } else if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0d700000) == 0x04200000 {
                            return Opcode::StrT;
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        } else if (code & 0x0de00000) == 0x00200000 {
                            return Opcode::Eor;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    } else if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x04000000) == 0x04000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0fe0f0f0) == 0x00000090 {
                            return Opcode::Mul;
                        } else if (code & 0x0de00000) == 0x00000000 {
                            return Opcode::And;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000d0 {
                        return Opcode::LdrD;
                    } else if (code & 0x0de00000) == 0x00000000 {
                        return Opcode::And;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0d700000) == 0x04200000 {
                        return Opcode::StrT;
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x0fe000f0) == 0x00200090 {
                        return Opcode::Mla;
                    } else if (code & 0x0de00000) == 0x00200000 {
                        return Opcode::Eor;
                    }
                } else if (code & 0x0e1000f0) == 0x000000d0 {
                    return Opcode::LdrD;
                } else if (code & 0x0de00000) == 0x00200000 {
                    return Opcode::Eor;
                }
            } else if (code & 0x02000000) == 0x00000000 {
                if (code & 0x00200000) == 0x00200000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0e700000) == 0x08200000 {
                            return Opcode::StmW;
                        }
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00400000) == 0x00000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0e700000) == 0x08000000 {
                            return Opcode::Stm;
                        }
                    } else if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08400000 {
                        return Opcode::StmP;
                    }
                } else if (code & 0x0ff00000) == 0x0c400000 {
                    return Opcode::Mcrr;
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00000010) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0xfe000000) == 0xfa000000 {
                        return Opcode::BlxI;
                    } else if (code & 0x0f000000) == 0x0a000000 {
                        return Opcode::B;
                    }
                } else if (code & 0xff000010) == 0xfe000000 {
                    return Opcode::Cdp2;
                } else if (code & 0x0f000010) == 0x0e000000 {
                    return Opcode::Cdp;
                }
            } else if (code & 0x04000000) == 0x00000000 {
                if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0a000000 {
                    return Opcode::B;
                }
            } else if (code & 0xff100010) == 0xfe000010 {
                return Opcode::Mcr2;
            } else if (code & 0x0f100010) == 0x0e000010 {
                return Opcode::Mcr;
            }
        } else if (code & 0x00000010) == 0x00000000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000080) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x00400000) == 0x00000000 {
                            if (code & 0x0c500000) == 0x04000000 {
                                return Opcode::Str;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x0fbf0fff) == 0x010f0000 {
                            return Opcode::Mrs;
                        }
                    } else if (code & 0x02000000) == 0x00000000 {
                        if (code & 0x0fb0fff0) == 0x0120f000 {
                            return Opcode::Msr;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0ff00090) == 0x01000080 {
                                return Opcode::Smla;
                            }
                        } else if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0ff00090) == 0x01400080 {
                            return Opcode::SmlalXy;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00001000) == 0x00000000 {
                        if (code & 0x0ff0f090) == 0x01600080 {
                            return Opcode::Smul;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000020) == 0x00000000 {
                    if (code & 0x0ff000b0) == 0x01200080 {
                        return Opcode::Smlaw;
                    }
                } else if (code & 0x0ff0f0b0) == 0x012000a0 {
                    return Opcode::Smulw;
                }
            } else if (code & 0x02000000) == 0x02000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00200000) == 0x00200000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x0e700000) == 0x08000000 {
                    return Opcode::Stm;
                }
            } else if (code & 0x0e700000) == 0x08400000 {
                return Opcode::StmP;
            }
        } else if (code & 0x00000020) == 0x00000020 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x00400000) == 0x00000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x00400000) == 0x00400000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x00000040) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000b0 {
                            return Opcode::StrH;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000f0 {
                        return Opcode::StrD;
                    }
                } else if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04000000 {
                            return Opcode::Str;
                        }
                    } else if (code & 0x00000080) == 0x00000000 {
                        if (code & 0x0ffffff0) == 0x012fff30 {
                            return Opcode::BlxR;
                        }
                    } else if (code & 0x0e1000f0) == 0x000000b0 {
                        return Opcode::StrH;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04000000 {
                        return Opcode::Str;
                    }
                } else if (code & 0x00000080) == 0x00000000 {
                    if (code & 0xfff000f0) == 0xe1200070 {
                        return Opcode::Bkpt;
                    }
                } else if (code & 0x0e1000f0) == 0x000000f0 {
                    return Opcode::StrD;
                }
            } else if (code & 0x02000000) == 0x02000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0f000000) == 0x0f000000 {
                        return Opcode::Swi;
                    }
                } else if (code & 0xfe000000) == 0xfa000000 {
                    return Opcode::BlxI;
                } else if (code & 0x0f000000) == 0x0b000000 {
                    return Opcode::Bl;
                }
            } else if (code & 0x00200000) == 0x00200000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08200000 {
                        return Opcode::StmW;
                    }
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x00400000) == 0x00000000 {
                if (code & 0x0e700000) == 0x08000000 {
                    return Opcode::Stm;
                }
            } else if (code & 0x0e700000) == 0x08400000 {
                return Opcode::StmP;
            }
        } else if (code & 0x00400000) == 0x00400000 {
            if (code & 0x08000000) == 0x00000000 {
                if (code & 0x00000040) == 0x00000000 {
                    if (code & 0x00200000) == 0x00000000 {
                        if (code & 0x04000000) == 0x00000000 {
                            if (code & 0x0ff00ff0) == 0x01400090 {
                                return Opcode::Swpb;
                            }
                        } else if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x04000000) == 0x04000000 {
                        if (code & 0x0c500000) == 0x04400000 {
                            return Opcode::StrB;
                        }
                    } else if (code & 0x02000000) == 0x00000000 {
                        if (code & 0x0fff0ff0) == 0x016f0f10 {
                            return Opcode::Clz;
                        }
                    } else if (code & 0x0fb0f000) == 0x0320f000 {
                        return Opcode::MsrI;
                    }
                } else if (code & 0x02000000) == 0x02000000 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0fb0f000) == 0x0320f000 {
                            return Opcode::MsrI;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x00000080) == 0x00000080 {
                    if (code & 0x04000000) == 0x00000000 {
                        if (code & 0x0e1000f0) == 0x000000d0 {
                            return Opcode::LdrD;
                        }
                    } else if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0c500000) == 0x04400000 {
                        return Opcode::StrB;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x01400050 {
                        return Opcode::Qdadd;
                    }
                } else if (code & 0x0ff00ff0) == 0x01600050 {
                    return Opcode::Qdsub;
                }
            } else if (code & 0x02000000) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08400000 {
                        return Opcode::StmP;
                    }
                } else if (code & 0x0e100000) == 0x0c000000 {
                    return Opcode::Stc;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0f000000) == 0x0f000000 {
                    return Opcode::Swi;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x08000000) == 0x08000000 {
            if (code & 0x02000000) == 0x00000000 {
                if (code & 0x04000000) == 0x04000000 {
                    if (code & 0x0e100000) == 0x0c000000 {
                        return Opcode::Stc;
                    }
                } else if (code & 0x00200000) == 0x00000000 {
                    if (code & 0x0e700000) == 0x08000000 {
                        return Opcode::Stm;
                    }
                } else if (code & 0x0e700000) == 0x08200000 {
                    return Opcode::StmW;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0f000000) == 0x0f000000 {
                    return Opcode::Swi;
                }
            } else if (code & 0xfe000000) == 0xfa000000 {
                return Opcode::BlxI;
            } else if (code & 0x0f000000) == 0x0b000000 {
                return Opcode::Bl;
            }
        } else if (code & 0x00000040) == 0x00000000 {
            if (code & 0x00200000) == 0x00000000 {
                if (code & 0x04000000) == 0x00000000 {
                    if (code & 0x0ff00ff0) == 0x01000090 {
                        return Opcode::Swp;
                    }
                } else if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0x04000000) == 0x04000000 {
                if (code & 0x0c500000) == 0x04000000 {
                    return Opcode::Str;
                }
            } else if (code & 0x02000000) == 0x00000000 {
                if (code & 0x0ffffff0) == 0x012fff10 {
                    return Opcode::Bx;
                }
            } else if (code & 0x0fb0f000) == 0x0320f000 {
                return Opcode::MsrI;
            }
        } else if (code & 0x02000000) == 0x02000000 {
            if (code & 0x04000000) == 0x00000000 {
                if (code & 0x0fb0f000) == 0x0320f000 {
                    return Opcode::MsrI;
                }
            } else if (code & 0x0c500000) == 0x04000000 {
                return Opcode::Str;
            }
        } else if (code & 0x00000080) == 0x00000080 {
            if (code & 0x04000000) == 0x00000000 {
                if (code & 0x0e1000f0) == 0x000000d0 {
                    return Opcode::LdrD;
                }
            } else if (code & 0x0c500000) == 0x04000000 {
                return Opcode::Str;
            }
        } else if (code & 0x04000000) == 0x04000000 {
            if (code & 0x0c500000) == 0x04000000 {
                return Opcode::Str;
            }
        } else if (code & 0x00200000) == 0x00000000 {
            if (code & 0x0ff00ff0) == 0x01000050 {
                return Opcode::Qadd;
            }
        } else if (code & 0x0ff00ff0) == 0x01200050 {
            return Opcode::Qsub;
        }
        Opcode::Illegal
    }
    pub fn mnemonic(self) -> &'static str {
        OPCODE_MNEMONICS[self as usize]
    }
    pub fn count() -> usize {
        78
    }
}
#[derive(Clone, Copy, PartialEq, Eq)]
pub struct ShiftImm {
    pub op: Shift,
    pub imm: u32,
}
#[derive(Clone, Copy, PartialEq, Eq)]
pub struct ShiftReg {
    pub op: Shift,
    pub reg: Reg,
}
#[derive(Clone, Copy, PartialEq, Eq)]
pub struct RegOffset {
    pub add: bool,
    pub reg: Reg,
}
#[derive(Clone, Copy, PartialEq, Eq)]
pub struct RegPostOffset {
    pub add: bool,
    pub reg: Reg,
}
#[derive(Clone, Copy, PartialEq, Eq)]
pub struct FieldMask {
    pub reg: StatusReg,
    pub mask: StatusMask,
}
impl Ins {
    /// Rn: First source operand register
    #[inline(always)]
    pub const fn field_rn(&self) -> Reg {
        Reg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// Rn_wb: Source operand register with writeback
    #[inline(always)]
    pub const fn field_rn_wb(&self) -> Reg {
        Reg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// Rn_deref: Base register
    #[inline(always)]
    pub const fn field_rn_deref(&self) -> Reg {
        Reg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// Rn_deref_wb: Base register with writeback
    #[inline(always)]
    pub const fn field_rn_deref_wb(&self) -> Reg {
        Reg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// Rm: Second source operand register
    #[inline(always)]
    pub const fn field_rm(&self) -> Reg {
        Reg::parse((self.code & 0x0000000f) as u8)
    }
    /// Rd: Destination register
    #[inline(always)]
    pub const fn field_rd(&self) -> Reg {
        Reg::parse(((self.code & 0x0000f000) >> 12) as u8)
    }
    /// Rs: Register containing shift offset
    #[inline(always)]
    pub const fn field_rs(&self) -> Reg {
        Reg::parse(((self.code & 0x00000f00) >> 8) as u8)
    }
    /// RdHi: Upper 32-bit long destination register
    #[inline(always)]
    pub const fn field_rdhi(&self) -> Reg {
        Reg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// RdLo: Lower 32-bit long destination register
    #[inline(always)]
    pub const fn field_rdlo(&self) -> Reg {
        Reg::parse(((self.code & 0x0000f000) >> 12) as u8)
    }
    /// registers: List of registers
    #[inline(always)]
    pub const fn field_registers(&self) -> u32 {
        self.code & 0x0000ffff
    }
    /// registers_c: List of registers (with ^ suffix)
    #[inline(always)]
    pub const fn field_registers_c(&self) -> u32 {
        self.code & 0x0000ffff
    }
    /// CRn: First source coprocessor register
    #[inline(always)]
    pub const fn field_crn(&self) -> CoReg {
        CoReg::parse(((self.code & 0x000f0000) >> 16) as u8)
    }
    /// CRm: Second source coprocessor register
    #[inline(always)]
    pub const fn field_crm(&self) -> CoReg {
        CoReg::parse((self.code & 0x0000000f) as u8)
    }
    /// CRd: Destination coprocessor register
    #[inline(always)]
    pub const fn field_crd(&self) -> CoReg {
        CoReg::parse(((self.code & 0x0000f000) >> 12) as u8)
    }
    /// rotated_immed_8: 8-bit immediate
    #[inline(always)]
    pub const fn field_rotated_immed_8(&self) -> u32 {
        let mut value = self.code & 0x000000ff;
        value = value.rotate_right((self.code & 0x00000f00) >> 7);
        value
    }
    /// immed_24: 24-bit immediate
    #[inline(always)]
    pub const fn field_immed_24(&self) -> u32 {
        self.code & 0x00ffffff
    }
    /// offset_8: 8-bit immediate offset
    #[inline(always)]
    pub const fn field_offset_8(&self) -> (i32, u8) {
        let mut value = (self.code & 0x0000000f) as i32;
        value |= ((self.code & 0x00000f00) >> 4) as i32;
        value = if (self.code & 0x00800000) >> 23 == 0 { -value } else { value };
        (value, 8)
    }
    /// post_offset_8: 8-bit immediate post-indexed offset
    #[inline(always)]
    pub const fn field_post_offset_8(&self) -> (i32, u8) {
        let mut value = (self.code & 0x0000000f) as i32;
        value |= ((self.code & 0x00000f00) >> 4) as i32;
        value = if (self.code & 0x00800000) >> 23 == 0 { -value } else { value };
        (value, 8)
    }
    /// offset_12: 12-bit immediate offset
    #[inline(always)]
    pub const fn field_offset_12(&self) -> (i32, u8) {
        let mut value = (self.code & 0x00000fff) as i32;
        value = if (self.code & 0x00800000) >> 23 == 0 { -value } else { value };
        (value, 12)
    }
    /// post_offset_12: 12-bit immediate post-indexed offset
    #[inline(always)]
    pub const fn field_post_offset_12(&self) -> (i32, u8) {
        let mut value = (self.code & 0x00000fff) as i32;
        value = if (self.code & 0x00800000) >> 23 == 0 { -value } else { value };
        (value, 12)
    }
    /// shift_imm: Immediate shift offset
    #[inline(always)]
    pub const fn field_shift_imm(&self) -> ShiftImm {
        ShiftImm {
            op: { Shift::parse(((self.code & 0x00000060) >> 5) as u8) },
            imm: {
                let mut value = (self.code & 0x00000f80) >> 7;
                value = match (self.code & 0x00000060) >> 5 {
                    // In ARM, shifting right by 0 actually shifts by 32
                    1 | 2 => if value == 0 { 32 } else { value }
                    _ => value,
                };
                value
            },
        }
    }
    /// shift_reg: Register shift offset
    #[inline(always)]
    pub const fn field_shift_reg(&self) -> ShiftReg {
        ShiftReg {
            op: { Shift::parse(((self.code & 0x00000060) >> 5) as u8) },
            reg: { Reg::parse(((self.code & 0x00000f00) >> 8) as u8) },
        }
    }
    /// reg_offset: Register offset
    #[inline(always)]
    pub const fn field_reg_offset(&self) -> RegOffset {
        RegOffset {
            add: { ((self.code & 0x00800000) >> 23) != 0 },
            reg: { Reg::parse((self.code & 0x0000000f) as u8) },
        }
    }
    /// reg_post_offset: Register post-indexed offset
    #[inline(always)]
    pub const fn field_reg_post_offset(&self) -> RegPostOffset {
        RegPostOffset {
            add: { ((self.code & 0x00800000) >> 23) != 0 },
            reg: { Reg::parse((self.code & 0x0000000f) as u8) },
        }
    }
    /// R: Move SPSR (1) or CPSR (0)
    #[inline(always)]
    pub const fn field_r(&self) -> StatusReg {
        StatusReg::parse(((self.code & 0x00400000) >> 22) as u8)
    }
    /// coproc_offset: 8-bit immediate coprocessor offset
    #[inline(always)]
    pub const fn field_coproc_offset(&self) -> (i32, u8) {
        let mut value = (self.code & 0x000000ff) as i32;
        value <<= 2;
        value = if (self.code & 0x00800000) >> 23 == 0 { -value } else { value };
        (value, 10)
    }
    /// option: Additional instruction options for coprocessor
    #[inline(always)]
    pub const fn field_option(&self) -> u32 {
        self.code & 0x000000ff
    }
    /// H: Add 2 to BLX target address
    #[inline(always)]
    pub const fn field_h(&self) -> bool {
        ((self.code & 0x01000000) >> 24) != 0
    }
    /// branch_offset: 24-bit signed B/BL target offset
    #[inline(always)]
    pub const fn field_branch_offset(&self) -> (i32, u8) {
        let mut value = (((self.code & 0x00ffffff) as i32) << 8) >> 8;
        value <<= 2;
        value += 8;
        (value, 26)
    }
    /// blx_offset: 24-bit signed BLX target offset
    #[inline(always)]
    pub const fn field_blx_offset(&self) -> (i32, u8) {
        let mut value = (((self.code & 0x00ffffff) as i32) << 8) >> 8;
        value <<= 2;
        value |= ((self.code & 0x01000000) >> 23) as i32;
        value += 8;
        (value, 26)
    }
    /// immed_16: 16-bit immediate in bits 0..4 and 8..20
    #[inline(always)]
    pub const fn field_immed_16(&self) -> u32 {
        let mut value = self.code & 0x0000000f;
        value |= (self.code & 0x000fff00) >> 4;
        value
    }
    /// field_mask: Status fields to set
    #[inline(always)]
    pub const fn field_field_mask(&self) -> FieldMask {
        FieldMask {
            reg: { StatusReg::parse(((self.code & 0x00400000) >> 22) as u8) },
            mask: { StatusMask::parse(((self.code & 0x000f0000) >> 16) as u8) },
        }
    }
    /// opcode: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub const fn field_opcode(&self) -> u32 {
        (self.code & 0x000000f0) >> 4
    }
    /// codat_opcode_1: Coprocessor operation to perform (user-defined, used by CDP instruction)
    #[inline(always)]
    pub const fn field_codat_opcode_1(&self) -> u32 {
        (self.code & 0x00f00000) >> 20
    }
    /// comov_opcode_1: Coprocessor operation to perform (user-defined, used by MCR/MRC instructions)
    #[inline(always)]
    pub const fn field_comov_opcode_1(&self) -> u32 {
        (self.code & 0x00e00000) >> 21
    }
    /// opcode_2: Coprocessor operation to perform (user-defined)
    #[inline(always)]
    pub const fn field_opcode_2(&self) -> u32 {
        (self.code & 0x000000e0) >> 5
    }
    /// coproc: Coprocessor number
    #[inline(always)]
    pub const fn field_coproc(&self) -> u32 {
        (self.code & 0x00000f00) >> 8
    }
    /// S: Update condition status flags
    #[inline(always)]
    pub const fn modifier_s(&self) -> bool {
        (self.code & 0x00100000) == 0x00100000
    }
    /// L: Long coprocessor load (e.g. double instead of float)
    #[inline(always)]
    pub const fn modifier_l(&self) -> bool {
        (self.code & 0x00400000) == 0x00400000
    }
    /// y: Second multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_y(&self) -> bool {
        (self.code & 0x00000040) == 0x00000040
    }
    /// x: First multiply operand in bottom (0) or top (1) half
    #[inline(always)]
    pub const fn modifier_x(&self) -> bool {
        (self.code & 0x00000020) == 0x00000020
    }
    /// cond: Condition code
    #[inline(always)]
    pub const fn modifier_cond(&self) -> Cond {
        match self.code & 0xf0000000 {
            0x00000000 => Cond::Eq,
            0x10000000 => Cond::Ne,
            0x20000000 => Cond::Hs,
            0x30000000 => Cond::Lo,
            0x40000000 => Cond::Mi,
            0x50000000 => Cond::Pl,
            0x60000000 => Cond::Vs,
            0x70000000 => Cond::Vc,
            0x80000000 => Cond::Hi,
            0x90000000 => Cond::Ls,
            0xa0000000 => Cond::Ge,
            0xb0000000 => Cond::Lt,
            0xc0000000 => Cond::Gt,
            0xd0000000 => Cond::Le,
            0xe0000000 => Cond::Al,
            _ => Cond::Illegal,
        }
    }
    /// addr_data: Data-processing operands
    #[inline(always)]
    pub const fn modifier_addr_data(&self) -> AddrData {
        if (self.code & 0x0e000ff0) == 0x00000000 {
            AddrData::Reg
        } else if (self.code & 0x0e000ff0) == 0x00000060 {
            AddrData::Rrx
        } else if (self.code & 0x0e000090) == 0x00000010 {
            AddrData::ShiftReg
        } else if (self.code & 0x0e000010) == 0x00000000 {
            AddrData::ShiftImm
        } else if (self.code & 0x0e000000) == 0x02000000 {
            AddrData::Imm
        } else {
            AddrData::Illegal
        }
    }
    /// addr_ldr_str: Load and Store Word or Unsigned Byte
    #[inline(always)]
    pub const fn modifier_addr_ldr_str(&self) -> AddrLdrStr {
        if (self.code & 0x0f200ff0) == 0x07000000 {
            AddrLdrStr::Reg
        } else if (self.code & 0x0f200ff0) == 0x07200000 {
            AddrLdrStr::RegPre
        } else if (self.code & 0x0f200ff0) == 0x06000000 {
            AddrLdrStr::RegPost
        } else if (self.code & 0x0f200010) == 0x07000000 {
            AddrLdrStr::Scl
        } else if (self.code & 0x0f200010) == 0x07200000 {
            AddrLdrStr::SclPre
        } else if (self.code & 0x0f200010) == 0x06000000 {
            AddrLdrStr::SclPost
        } else if (self.code & 0x0f200000) == 0x05000000 {
            AddrLdrStr::Imm
        } else if (self.code & 0x0f200000) == 0x05200000 {
            AddrLdrStr::ImmPre
        } else if (self.code & 0x0f200000) == 0x04000000 {
            AddrLdrStr::ImmPost
        } else {
            AddrLdrStr::Illegal
        }
    }
    /// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
    #[inline(always)]
    pub const fn modifier_addr_ldrt_strt(&self) -> AddrLdrtStrt {
        if (self.code & 0x0f200ff0) == 0x06200000 {
            AddrLdrtStrt::RegPost
        } else if (self.code & 0x0f200010) == 0x06200000 {
            AddrLdrtStrt::SclPost
        } else if (self.code & 0x0f200000) == 0x04200000 {
            AddrLdrtStrt::ImmPost
        } else {
            AddrLdrtStrt::Illegal
        }
    }
    /// addr_misc_ldr_str: Miscellaneous Loads and Stores
    #[inline(always)]
    pub const fn modifier_addr_misc_ldr_str(&self) -> AddrMiscLdrStr {
        if (self.code & 0x0f600f90) == 0x01000090 {
            AddrMiscLdrStr::Reg
        } else if (self.code & 0x0f600f90) == 0x01200090 {
            AddrMiscLdrStr::RegPre
        } else if (self.code & 0x0f600f90) == 0x00000090 {
            AddrMiscLdrStr::RegPost
        } else if (self.code & 0x0f600090) == 0x01400090 {
            AddrMiscLdrStr::Imm
        } else if (self.code & 0x0f600090) == 0x01600090 {
            AddrMiscLdrStr::ImmPre
        } else if (self.code & 0x0f600090) == 0x00400090 {
            AddrMiscLdrStr::ImmPost
        } else {
            AddrMiscLdrStr::Illegal
        }
    }
    /// addr_ldm_stm: Load and Store Multiple
    #[inline(always)]
    pub const fn modifier_addr_ldm_stm(&self) -> AddrLdmStm {
        match self.code & 0x01800000 {
            0x00800000 => AddrLdmStm::Ia,
            0x01800000 => AddrLdmStm::Ib,
            0x00000000 => AddrLdmStm::Da,
            0x01000000 => AddrLdmStm::Db,
            _ => AddrLdmStm::Illegal,
        }
    }
    /// addr_coproc: Load and Store Coprocessor
    #[inline(always)]
    pub const fn modifier_addr_coproc(&self) -> AddrCoproc {
        if (self.code & 0x01a00000) == 0x00800000 {
            AddrCoproc::Unidx
        } else if (self.code & 0x01200000) == 0x01000000 {
            AddrCoproc::Imm
        } else if (self.code & 0x01200000) == 0x01200000 {
            AddrCoproc::ImmPre
        } else if (self.code & 0x01200000) == 0x00200000 {
            AddrCoproc::ImmPost
        } else {
            AddrCoproc::Illegal
        }
    }
}
/// cond: Condition code
pub enum Cond {
    Illegal,
    /// eq: Equal
    Eq,
    /// ne: Not equal
    Ne,
    /// hs: Unsigned higher or same
    Hs,
    /// lo: Unsigned lower
    Lo,
    /// mi: Minus/negative
    Mi,
    /// pl: Plus/positive or zero
    Pl,
    /// vs: Overflow
    Vs,
    /// vc: No overflow
    Vc,
    /// hi: Unsigned higher
    Hi,
    /// ls: Unsigned lower or same
    Ls,
    /// ge: Signed greater than or equal
    Ge,
    /// lt: Signed less than
    Lt,
    /// gt: Signed greater than
    Gt,
    /// le: Signed less than or equal
    Le,
    /// al: Always
    Al,
}
/// addr_data: Data-processing operands
pub enum AddrData {
    Illegal,
    /// imm: Immediate
    Imm,
    /// reg: Register
    Reg,
    /// shift_imm: Shift by immediate
    ShiftImm,
    /// shift_reg: Shift by register
    ShiftReg,
    /// rrx: Rotate right with extend
    Rrx,
}
/// addr_ldr_str: Load and Store Word or Unsigned Byte
pub enum AddrLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// scl: Scaled register offset
    Scl,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// scl_pre: Scaled register pre-indexed
    SclPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
}
/// addr_ldrt_strt: Load and Store Word or Unsigned Byte with Translation
pub enum AddrLdrtStrt {
    Illegal,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
    /// scl_post: Scaled register post-indexed
    SclPost,
}
/// addr_misc_ldr_str: Miscellaneous Loads and Stores
pub enum AddrMiscLdrStr {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// reg: Register offset
    Reg,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// reg_pre: Register pre-indexed
    RegPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// reg_post: Register post-indexed
    RegPost,
}
/// addr_ldm_stm: Load and Store Multiple
pub enum AddrLdmStm {
    Illegal,
    /// ia: Increment After
    Ia,
    /// ib: Increment Before
    Ib,
    /// da: Decrement After
    Da,
    /// db: Decrement Before
    Db,
}
/// addr_coproc: Load and Store Coprocessor
pub enum AddrCoproc {
    Illegal,
    /// imm: Immediate offset
    Imm,
    /// imm_pre: Immediate pre-indexed
    ImmPre,
    /// imm_post: Immediate post-indexed
    ImmPost,
    /// unidx: Unindexed
    Unidx,
}
pub type Arguments = [Argument; 6];
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub enum Argument {
    #[default]
    None,
    /// reg: General-purpose register
    Reg(Reg),
    /// reg_wb: General-purpose register with writeback
    RegWb(Reg),
    /// reg_deref: Base register
    RegDeref(Reg),
    /// reg_deref_wb: Base register with writeback
    RegDerefWb(Reg),
    /// reg_list: List of general-purpose registers
    RegList(u32),
    /// reg_list_c: List of general-purpose registers (with ^ suffix)
    RegListC(u32),
    /// co_reg: Coprocessor register
    CoReg(CoReg),
    /// status_reg: Status register
    StatusReg(StatusReg),
    /// rrx: Rotate right with extend
    Rrx,
    /// u_imm: Unsigned immediate
    UImm(u32),
    /// s_imm: Signed immediate
    SImm((i32, u8)),
    /// offset: Immediate offset
    Offset((i32, u8)),
    /// post_offset: Immediate post-indexed offset
    PostOffset((i32, u8)),
    /// branch_dest: Branch destination
    BranchDest((i32, u8)),
    /// co_option: Additional instruction options for coprocessor
    CoOption(u32),
    /// co_opcode: Coprocessor operation to perform (user-defined)
    CoOpcode(u32),
    /// coproc_num: Coprocessor number
    CoprocNum(u32),
    /// shift_imm: Immediate shift offset
    ShiftImm(ShiftImm),
    /// shift_reg: Register shift offset
    ShiftReg(ShiftReg),
    /// reg_offset: Register offset
    RegOffset(RegOffset),
    /// reg_post_offset: Register post-indexed offset
    RegPostOffset(RegPostOffset),
    /// field_mask: Status fields to set
    FieldMask(FieldMask),
}
#[derive(Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum Reg {
    Illegal = 255,
    R0 = 0,
    R1 = 1,
    R2 = 2,
    R3 = 3,
    R4 = 4,
    R5 = 5,
    R6 = 6,
    R7 = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    /// fp: Frame Pointer
    Fp = 11,
    /// ip: Intra Procedure call scratch register
    Ip = 12,
    /// sp: Stack Pointer
    Sp = 13,
    /// lr: Link Register
    Lr = 14,
    /// pc: Program Counter
    Pc = 15,
}
impl Reg {
    pub const fn parse(value: u8) -> Self {
        if value <= 15 {
            unsafe { std::mem::transmute::<u8, Self>(value) }
        } else {
            Self::Illegal
        }
    }
}
#[derive(Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum CoReg {
    Illegal = 255,
    C0 = 0,
    C1 = 1,
    C2 = 2,
    C3 = 3,
    C4 = 4,
    C5 = 5,
    C6 = 6,
    C7 = 7,
    C8 = 8,
    C9 = 9,
    C10 = 10,
    C11 = 11,
    C12 = 12,
    C13 = 13,
    C14 = 14,
    C15 = 15,
}
impl CoReg {
    pub const fn parse(value: u8) -> Self {
        if value <= 15 {
            unsafe { std::mem::transmute::<u8, Self>(value) }
        } else {
            Self::Illegal
        }
    }
}
#[derive(Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum StatusReg {
    Illegal = 255,
    Cpsr = 0,
    Spsr = 1,
}
impl StatusReg {
    pub const fn parse(value: u8) -> Self {
        if value <= 1 {
            unsafe { std::mem::transmute::<u8, Self>(value) }
        } else {
            Self::Illegal
        }
    }
}
#[derive(Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum StatusMask {
    Illegal = 255,
    C = 1,
    X = 2,
    Xc = 3,
    S = 4,
    Sc = 5,
    Sx = 6,
    Sxc = 7,
    F = 8,
    Fc = 9,
    Fx = 10,
    Fxc = 11,
    Fs = 12,
    Fsc = 13,
    Fsx = 14,
    Fsxc = 15,
}
impl StatusMask {
    pub const fn parse(value: u8) -> Self {
        if value >= 1 && value <= 15 {
            unsafe { std::mem::transmute::<u8, Self>(value) }
        } else {
            Self::Illegal
        }
    }
}
#[derive(Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum Shift {
    Illegal = 255,
    Lsl = 0,
    Lsr = 1,
    Asr = 2,
    Ror = 3,
}
impl Shift {
    pub const fn parse(value: u8) -> Self {
        if value <= 3 {
            unsafe { std::mem::transmute::<u8, Self>(value) }
        } else {
            Self::Illegal
        }
    }
}
fn parse_adc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_add(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "adds",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "addle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "add",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_and(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "ands",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "andle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "and",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_b(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "beq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "ble",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "b",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bl(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bleq",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blne",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blhs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bllo",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blmi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blpl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blvs",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blvc",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blhi",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blls",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blge",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bllt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blgt",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blle",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bl",
                args: [
                    Argument::BranchDest(ins.field_branch_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bic(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bics",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bichi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "biclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bicle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "bic",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bkpt(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "bkpt",
        args: [
            Argument::UImm(ins.field_immed_16()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_i(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "blx",
        args: [
            Argument::BranchDest(ins.field_blx_offset()),
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
            Argument::None,
        ],
    };
}
fn parse_blx_r(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "blxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "blxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "blxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "blxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "blxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "blxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "blxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "blxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "blxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "blxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "blxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "blxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "blxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "blxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "blx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_bx(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "bxeq",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "bxne",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "bxhs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "bxlo",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "bxmi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "bxpl",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "bxvs",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "bxvc",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "bxhi",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "bxls",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "bxge",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "bxlt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "bxgt",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "bxle",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "bx",
                args: [
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "cdpeq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "cdpne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "cdphs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "cdplo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "cdpmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "cdppl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "cdpvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "cdpvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "cdphi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "cdpls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "cdpge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "cdplt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "cdpgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "cdple",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "cdp",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_codat_opcode_1()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cdp2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "cdp2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_codat_opcode_1()),
            Argument::CoReg(ins.field_crd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_clz(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "clzeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "clzne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "clzhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "clzlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "clzmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "clzpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "clzvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "clzvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "clzhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "clzls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "clzge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "clzlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "clzgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "clzle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "clz",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmneq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmngt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmnle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmn",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_cmp(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmppl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmphi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmplt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmpgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmple",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "cmp",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_eor(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eoreqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eornes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eormis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eors",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eoreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eormi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eorle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "eor",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_l(), ins.modifier_addr_coproc()) {
        (Cond::Eq, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldc2(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_l(), ins.modifier_addr_coproc()) {
        (true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2l",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "ldc2",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldm_pc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "ldmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "ldmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "ldmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "ldmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldreq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldr",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_b(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "ldrb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_bt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_d(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_h(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_sb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlosb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhisb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlssb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlesb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_sh(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlosh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvcsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhish",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlssh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlesh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "ldrsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_ldr_t(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldreqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "ldrt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mcr2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mcr2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mcrr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mcrreq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mcrrne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mcrrhs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mcrrlo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mcrrmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mcrrpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mcrrvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mcrrvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mcrrhi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mcrrls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mcrrge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mcrrlt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mcrrgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mcrrle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mcrr",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "mlaeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "mlanes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "mlahss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "mlalos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "mlamis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "mlapls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "mlavss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "mlavcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "mlahis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "mlalss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "mlages",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "mlalts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "mlagts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "mlales",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "mlas",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "mlaeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "mlane",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "mlahs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "mlalo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "mlami",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "mlapl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "mlavs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "mlavc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "mlahi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "mlals",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "mlage",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "mlalt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "mlagt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "mlale",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "mla",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mov(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "moveqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "moveq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "movle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mov",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_comov_opcode_1()),
                    Argument::Reg(ins.field_rd()),
                    Argument::CoReg(ins.field_crn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::CoOpcode(ins.field_opcode_2()),
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrc2(out: &mut ParsedIns, ins: Ins) {
    *out = ParsedIns {
        mnemonic: "mrc2",
        args: [
            Argument::CoprocNum(ins.field_coproc()),
            Argument::CoOpcode(ins.field_comov_opcode_1()),
            Argument::Reg(ins.field_rd()),
            Argument::CoReg(ins.field_crn()),
            Argument::CoReg(ins.field_crm()),
            Argument::CoOpcode(ins.field_opcode_2()),
        ],
    };
}
fn parse_mrrc(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrrceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrrcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrrchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrrclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrrcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrrcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrrcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrrcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrrchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrrcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrrcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrrclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrrcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrrcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrrc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoOpcode(ins.field_opcode()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::CoReg(ins.field_crm()),
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mrs(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "mrseq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "mrsne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "mrshs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "mrslo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "mrsmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "mrspl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "mrsvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "mrsvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "mrshi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "mrsls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "mrsge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "mrslt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "mrsgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "mrsle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "mrs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::StatusReg(ins.field_r()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr_i(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_msr(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "msreq",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "msrne",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "msrhs",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "msrlo",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "msrmi",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "msrpl",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "msrvs",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "msrvc",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "msrhi",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "msrls",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "msrge",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "msrlt",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "msrgt",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "msrle",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "msr",
                args: [
                    Argument::FieldMask(ins.field_field_mask()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "muleqs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "mulnes",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "mulhss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "mullos",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "mulmis",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "mulpls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "mulvss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "mulvcs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "mulhis",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "mullss",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "mulges",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "mullts",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "mulgts",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "mulles",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "muls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "muleq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "mulne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "mulhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "mullo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "mulmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "mulpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "mulvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "mulvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "mulhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "mulls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "mulge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "mullt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "mulgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "mulle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "mul",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_mvn(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvneqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvngts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvns",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvneq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvngt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvnle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "mvn",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_orr(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orreqs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrnes",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlos",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrmis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrpls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvcs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhis",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlss",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrges",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrgts",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrles",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orreq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orrle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "orr",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_pld(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_addr_ldr_str() {
        AddrLdrStr::Imm => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Reg => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::Scl => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPre => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::ImmPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::RegPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        AddrLdrStr::SclPost => {
            ParsedIns {
                mnemonic: "pld",
                args: [
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdadd(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdaddeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdaddne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdaddhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdaddlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdaddmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdaddpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdaddvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdaddvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdaddhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdaddls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdaddge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdaddlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdaddgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdaddle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdadd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qdsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qdsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qdsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qdsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qdsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qdsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qdsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qdsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qdsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qdsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qdsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qdsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qdsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qdsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qdsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qdsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_qsub(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "qsubeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "qsubne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "qsubhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "qsublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "qsubmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "qsubpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "qsubvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "qsubvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "qsubhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "qsubls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "qsubge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "qsublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "qsubgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "qsuble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "qsub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsb(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_rsc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rschi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rscle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "rsc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sbc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbceqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcmis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbceq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbchi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbclt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbcle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sbc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smla(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlatbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlabbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlattne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlatbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlabbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlatbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlabbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlattlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlatblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlabblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlattmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlatbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlabbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlattpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlatbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlabbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlattvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlatbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlabbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlattvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlatbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlabbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlatbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlabbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlattls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlatbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlabbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlattge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlatbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlabbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlattlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlatblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlabblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlattgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlatbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlabbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlattle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlatble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlabble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlatb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlabb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "smlaleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "smlalnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "smlalhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "smlallos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "smlalmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "smlalpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "smlalvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "smlalvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "smlalhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "smlallss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "smlalges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "smlallts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "smlalgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "smlalles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "smlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "smlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "smlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "smlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "smlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "smlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "smlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "smlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "smlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "smlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "smlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "smlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "smlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "smlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "smlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "smlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlal_xy(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbteq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlaltbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlalbbeq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalttne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbtne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlaltbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlalbbne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbths",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlaltbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlalbbhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalttlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbtlo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlaltblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlalbblo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalttmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbtmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlaltbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlalbbmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalttpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbtpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlaltbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlalbbpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalttvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbtvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlaltbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlalbbvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalttvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbtvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlaltbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlalbbvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbthi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlaltbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlalbbhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalttls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbtls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlaltbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlalbbls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalttge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbtge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlaltbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlalbbge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalttlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbtlt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlaltblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlalbblt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalttgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbtgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlaltbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlalbbgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalttle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbtle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlaltble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlalbble",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlaltb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlalbb",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smlaw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawteq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smlawbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawtne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smlawbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawths",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smlawbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawtlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smlawblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawtmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smlawbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawtpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smlawbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawtvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smlawbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawtvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smlawbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawthi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smlawbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawtls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smlawbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawtge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smlawbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawtlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smlawblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawtgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smlawbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawtle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smlawble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smlawb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smul(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_x(), ins.modifier_y(), ins.modifier_cond()) {
        (true, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smultbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulbbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulttne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smultbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulbbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smultbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulbbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulttlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smultblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulbblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulttmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smultbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulbbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulttpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smultbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulbbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulttvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smultbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulbbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulttvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smultbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulbbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smultbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulbbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulttls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smultbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulbbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulttge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smultbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulbbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulttlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smultblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulbblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulttgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smultbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulbbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulttle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smultble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulbble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smultb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulbb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "smulleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "smullnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "smullhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "smulllos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "smullmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "smullpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "smullvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "smullvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "smullhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "smulllss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "smullges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "smulllts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "smullgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "smullles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "smulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "smulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "smullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "smullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "smulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "smullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "smullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "smullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "smullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "smullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "smullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "smullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "smulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "smullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "smullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "smull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_smulw(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_y(), ins.modifier_cond()) {
        (true, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwteq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Eq) => {
            ParsedIns {
                mnemonic: "smulwbeq",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwtne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ne) => {
            ParsedIns {
                mnemonic: "smulwbne",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwths",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hs) => {
            ParsedIns {
                mnemonic: "smulwbhs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwtlo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lo) => {
            ParsedIns {
                mnemonic: "smulwblo",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwtmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Mi) => {
            ParsedIns {
                mnemonic: "smulwbmi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwtpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Pl) => {
            ParsedIns {
                mnemonic: "smulwbpl",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwtvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vs) => {
            ParsedIns {
                mnemonic: "smulwbvs",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwtvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Vc) => {
            ParsedIns {
                mnemonic: "smulwbvc",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwthi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Hi) => {
            ParsedIns {
                mnemonic: "smulwbhi",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwtls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ls) => {
            ParsedIns {
                mnemonic: "smulwbls",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwtge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Ge) => {
            ParsedIns {
                mnemonic: "smulwbge",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwtlt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Lt) => {
            ParsedIns {
                mnemonic: "smulwblt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwtgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Gt) => {
            ParsedIns {
                mnemonic: "smulwbgt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwtle",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Le) => {
            ParsedIns {
                mnemonic: "smulwble",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (true, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwt",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (false, Cond::Al) => {
            ParsedIns {
                mnemonic: "smulwb",
                args: [
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stc(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_l(), ins.modifier_addr_coproc()) {
        (Cond::Eq, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Imm) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPre) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::ImmPost) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_coproc_offset()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stceql",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcnel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclol",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcmil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcpll",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchil",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclsl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcltl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgtl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclel",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stceq",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcne",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclo",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcmi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcpl",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvs",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcvc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stchi",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcls",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcge",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stclt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcgt",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stcle",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrCoproc::Unidx) => {
            ParsedIns {
                mnemonic: "stc",
                args: [
                    Argument::CoprocNum(ins.field_coproc()),
                    Argument::CoReg(ins.field_crd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::CoOption(ins.field_option()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_w(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::RegWb(ins.field_rn_wb()),
                    Argument::RegList(ins.field_registers()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_stm_p(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldm_stm()) {
        (Cond::Eq, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmeqia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmneia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmloia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmmiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmplia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmvcia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmhiia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmlsia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgeia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmltia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmgtia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmleia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ia) => {
            ParsedIns {
                mnemonic: "stmia",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmeqib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmneib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmloib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmmiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmplib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmvcib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmhiib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmlsib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgeib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmltib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmgtib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmleib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Ib) => {
            ParsedIns {
                mnemonic: "stmib",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmeqda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmneda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmloda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmmida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmplda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmvcda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmhida",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmlsda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgeda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmltda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmgtda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmleda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Da) => {
            ParsedIns {
                mnemonic: "stmda",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmeqdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmnedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlodb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmmidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmpldb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmvcdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmhidb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmlsdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgedb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmltdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmgtdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmledb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdmStm::Db) => {
            ParsedIns {
                mnemonic: "stmdb",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::RegListC(ins.field_registers_c()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "streq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strle",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "str",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_b(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldr_str()) {
        (Cond::Eq, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::Scl) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::Offset(ins.field_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPre) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDerefWb(ins.field_rn_deref_wb()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "streqb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strneb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlob",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strmib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strplb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strvcb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strhib",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strlsb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgeb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strltb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strgtb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strleb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrStr::SclPost) => {
            ParsedIns {
                mnemonic: "strb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_bt(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "streqbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strnebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlobt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strmibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strplbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvcbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhibt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlsbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strltbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgtbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlebt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strbt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_d(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strned",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlod",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strpld",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvcd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhid",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strged",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strltd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgtd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strled",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strd",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_h(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_misc_ldr_str()) {
        (Cond::Eq, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Imm) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::Reg) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::Offset(ins.field_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPre) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegOffset(ins.field_reg_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::ImmPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "streqh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strneh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strloh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strmih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strplh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strvch",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strhih",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlsh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgeh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strlth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strgth",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strleh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrMiscLdrStr::RegPost) => {
            ParsedIns {
                mnemonic: "strh",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_str_t(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_ldrt_strt()) {
        (Cond::Eq, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::ImmPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::PostOffset(ins.field_post_offset_12()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::RegPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "streqt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strnet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlot",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strmit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strvct",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strhit",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlst",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strget",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strltt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strgtt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strlet",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrLdrtStrt::SclPost) => {
            ParsedIns {
                mnemonic: "strt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::RegDeref(ins.field_rn_deref()),
                    Argument::RegPostOffset(ins.field_reg_post_offset()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_sub(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s(), ins.modifier_addr_data()) {
        (Cond::Eq, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subeqs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subnes",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublos",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "submis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvcs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhis",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublss",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subges",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subgts",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subles",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "submi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sublt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "subgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "suble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "sub",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swi(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swieq",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swine",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swihs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swilo",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swimi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swipl",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swivs",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swivc",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swihi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swils",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swige",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swilt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swigt",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swile",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swi",
                args: [
                    Argument::UImm(ins.field_immed_24()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swp(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swphs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swplo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swppl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swphi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swplt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swple",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swp",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_swpb(out: &mut ParsedIns, ins: Ins) {
    *out = match ins.modifier_cond() {
        Cond::Eq => {
            ParsedIns {
                mnemonic: "swpbeq",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ne => {
            ParsedIns {
                mnemonic: "swpbne",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hs => {
            ParsedIns {
                mnemonic: "swpbhs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lo => {
            ParsedIns {
                mnemonic: "swpblo",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Mi => {
            ParsedIns {
                mnemonic: "swpbmi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Pl => {
            ParsedIns {
                mnemonic: "swpbpl",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vs => {
            ParsedIns {
                mnemonic: "swpbvs",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Vc => {
            ParsedIns {
                mnemonic: "swpbvc",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Hi => {
            ParsedIns {
                mnemonic: "swpbhi",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ls => {
            ParsedIns {
                mnemonic: "swpbls",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Ge => {
            ParsedIns {
                mnemonic: "swpbge",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Lt => {
            ParsedIns {
                mnemonic: "swpblt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Gt => {
            ParsedIns {
                mnemonic: "swpbgt",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Le => {
            ParsedIns {
                mnemonic: "swpble",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        Cond::Al => {
            ParsedIns {
                mnemonic: "swpb",
                args: [
                    Argument::Reg(ins.field_rd()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rn()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_teq(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqeq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqhi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teqle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "teq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_tst(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_addr_data()) {
        (Cond::Eq, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Imm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::UImm(ins.field_rotated_immed_8()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Reg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftImm) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftImm(ins.field_shift_imm()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::ShiftReg) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::ShiftReg(ins.field_shift_reg()),
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsteq",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstne",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsths",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlo",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstmi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstpl",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvs",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstvc",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tsthi",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstls",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstge",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstlt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstgt",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tstle",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, AddrData::Rrx) => {
            ParsedIns {
                mnemonic: "tst",
                args: [
                    Argument::Reg(ins.field_rn()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Rrx,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umlal(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "umlaleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "umlalnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "umlalhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "umlallos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "umlalmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "umlalpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "umlalvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "umlalvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "umlalhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "umlallss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "umlalges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "umlallts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "umlalgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "umlalles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "umlals",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "umlaleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "umlalne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "umlalhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "umlallo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "umlalmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "umlalpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "umlalvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "umlalvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "umlalhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "umlalls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "umlalge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "umlallt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "umlalgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "umlalle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "umlal",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
fn parse_umull(out: &mut ParsedIns, ins: Ins) {
    *out = match (ins.modifier_cond(), ins.modifier_s()) {
        (Cond::Eq, true) => {
            ParsedIns {
                mnemonic: "umulleqs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, true) => {
            ParsedIns {
                mnemonic: "umullnes",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, true) => {
            ParsedIns {
                mnemonic: "umullhss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, true) => {
            ParsedIns {
                mnemonic: "umulllos",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, true) => {
            ParsedIns {
                mnemonic: "umullmis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, true) => {
            ParsedIns {
                mnemonic: "umullpls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, true) => {
            ParsedIns {
                mnemonic: "umullvss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, true) => {
            ParsedIns {
                mnemonic: "umullvcs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, true) => {
            ParsedIns {
                mnemonic: "umullhis",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, true) => {
            ParsedIns {
                mnemonic: "umulllss",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, true) => {
            ParsedIns {
                mnemonic: "umullges",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, true) => {
            ParsedIns {
                mnemonic: "umulllts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, true) => {
            ParsedIns {
                mnemonic: "umullgts",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, true) => {
            ParsedIns {
                mnemonic: "umullles",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, true) => {
            ParsedIns {
                mnemonic: "umulls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Eq, false) => {
            ParsedIns {
                mnemonic: "umulleq",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ne, false) => {
            ParsedIns {
                mnemonic: "umullne",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hs, false) => {
            ParsedIns {
                mnemonic: "umullhs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lo, false) => {
            ParsedIns {
                mnemonic: "umulllo",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Mi, false) => {
            ParsedIns {
                mnemonic: "umullmi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Pl, false) => {
            ParsedIns {
                mnemonic: "umullpl",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vs, false) => {
            ParsedIns {
                mnemonic: "umullvs",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Vc, false) => {
            ParsedIns {
                mnemonic: "umullvc",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Hi, false) => {
            ParsedIns {
                mnemonic: "umullhi",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ls, false) => {
            ParsedIns {
                mnemonic: "umullls",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Ge, false) => {
            ParsedIns {
                mnemonic: "umullge",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Lt, false) => {
            ParsedIns {
                mnemonic: "umulllt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Gt, false) => {
            ParsedIns {
                mnemonic: "umullgt",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Le, false) => {
            ParsedIns {
                mnemonic: "umullle",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        (Cond::Al, false) => {
            ParsedIns {
                mnemonic: "umull",
                args: [
                    Argument::Reg(ins.field_rdlo()),
                    Argument::Reg(ins.field_rdhi()),
                    Argument::Reg(ins.field_rm()),
                    Argument::Reg(ins.field_rs()),
                    Argument::None,
                    Argument::None,
                ],
            }
        }
        _ => {
            ParsedIns {
                mnemonic: "<illegal>",
                args: [
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                    Argument::None,
                ],
            }
        }
    };
}
type MnemonicParser = fn(&mut ParsedIns, Ins);
static MNEMONIC_PARSERS: [MnemonicParser; 78] = [
    parse_adc,
    parse_add,
    parse_and,
    parse_b,
    parse_bl,
    parse_bic,
    parse_bkpt,
    parse_blx_i,
    parse_blx_r,
    parse_bx,
    parse_cdp,
    parse_cdp2,
    parse_clz,
    parse_cmn,
    parse_cmp,
    parse_eor,
    parse_ldc,
    parse_ldc2,
    parse_ldm_w,
    parse_ldm,
    parse_ldm_p,
    parse_ldm_pc_w,
    parse_ldm_pc,
    parse_ldr,
    parse_ldr_b,
    parse_ldr_bt,
    parse_ldr_d,
    parse_ldr_h,
    parse_ldr_sb,
    parse_ldr_sh,
    parse_ldr_t,
    parse_mcr,
    parse_mcr2,
    parse_mcrr,
    parse_mla,
    parse_mov,
    parse_mrc,
    parse_mrc2,
    parse_mrrc,
    parse_mrs,
    parse_msr_i,
    parse_msr,
    parse_mul,
    parse_mvn,
    parse_orr,
    parse_pld,
    parse_qadd,
    parse_qdadd,
    parse_qdsub,
    parse_qsub,
    parse_rsb,
    parse_rsc,
    parse_sbc,
    parse_smla,
    parse_smlal,
    parse_smlal_xy,
    parse_smlaw,
    parse_smul,
    parse_smull,
    parse_smulw,
    parse_stc,
    parse_stm,
    parse_stm_w,
    parse_stm_p,
    parse_str,
    parse_str_b,
    parse_str_bt,
    parse_str_d,
    parse_str_h,
    parse_str_t,
    parse_sub,
    parse_swi,
    parse_swp,
    parse_swpb,
    parse_teq,
    parse_tst,
    parse_umlal,
    parse_umull,
];
#[inline]
pub fn parse(out: &mut ParsedIns, ins: Ins) {
    if ins.op != Opcode::Illegal {
        MNEMONIC_PARSERS[ins.op as usize](out, ins);
    } else {
        *out = ParsedIns {
            mnemonic: "<illegal>",
            args: [
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
                Argument::None,
            ],
        };
    }
}
