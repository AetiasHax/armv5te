args:
  - name: reg
    desc: General-purpose register
    values:
      - name: r0
        value: 0
      - name: r1
        value: 1
      - name: r2
        value: 2
      - name: r3
        value: 3
      - name: r4
        value: 4
      - name: r5
        value: 5
      - name: r6
        value: 6
      - name: r7
        value: 7
      - name: r8
        value: 8
      - name: r9
        value: 9
      - name: r10
        value: 10
      - name: fp
        desc: Frame Pointer
        value: 11
      - name: ip
        desc: Intra Procedure call scratch register
        value: 12
      - name: sp
        desc: Stack Pointer
        value: 13
      - name: lr
        desc: Link Register
        value: 14
      - name: pc
        desc: Program Counter
        value: 15

  - name: reg_list
    desc: List of general-purpose registers

  - name: co_reg
    desc: Coprocessor register
    values:
      - name: cp0
        value: 0
      - name: cp1
        value: 1
      - name: cp2
        value: 2
      - name: cp3
        value: 3
      - name: cp4
        value: 4
      - name: cp5
        value: 5
      - name: cp6
        value: 6
      - name: cp7
        value: 7
      - name: cp8
        value: 8
      - name: cp9
        value: 9
      - name: cp10
        value: 10
      - name: cp11
        value: 11
      - name: cp12
        value: 12
      - name: cp13
        value: 13
      - name: cp14
        value: 14
      - name: cp15
        value: 15

  - name: status_reg
    desc: Status register
    values:
      - name: cpsr
        value: 0
      - name: spsr
        value: 1

  - name: status_mask
    desc: Status field mask
    values:
      - name: c
        value: 1
      - name: x
        value: 2
      - name: xc
        value: 3
      - name: s
        value: 4
      - name: sc
        value: 5
      - name: sx
        value: 6
      - name: sxc
        value: 7
      - name: f
        value: 8
      - name: fc
        value: 9
      - name: fx
        value: 10
      - name: fxc
        value: 11
      - name: fs
        value: 12
      - name: fsc
        value: 13
      - name: fsx
        value: 14
      - name: fsxc
        value: 15

  - name: shift_imm
    desc: Immediate shift offset
    hidden: true

  - name: shift
    desc: Type of shift operation
    values:
      - name: lsl
        value: 0
      - name: lsr
        value: 1
      - name: asr
        value: 2
      - name: ror_or_rrx
        value: 3
    hidden: true

  - name: u_imm
    desc: Unsigned immediate

  - name: s_imm
    desc: Signed immediate
    signed: true

  - name: offset
    desc: Immediate offset
    signed: true

  - name: add
    desc: Add
    boolean: true

  - name: blx_half
    desc: Add 2 to BLX target address
    boolean: true

  - name: co_option
    desc: Additional instruction options for coprocessor

  - name: co_opcode
    desc: Coprocessor operation to perform (user-defined)

  - name: coproc_num
    desc: Coprocessor number

fields:
  - name: Rn
    arg: reg
    desc: First source operand register
    bits: 16..20

  - name: Rm
    arg: reg
    desc: Second source operand register
    bits: 0..4

  - name: Rd
    arg: reg
    desc: Destination register
    bits: 12..16

  - name: Rs
    arg: reg
    desc: Register containing shift offset
    bits: 8..12

  - name: RdHi
    arg: reg
    desc: Upper 32-bit long destination register
    bits: 16..20

  - name: RdLo
    arg: reg
    desc: Lower 32-bit long destination register
    bits: 12..16

  - name: registers
    arg: reg_list
    desc: List of registers
    bits: 0..16
    allow_collide: true

  - name: registers_without_pc
    arg: reg_list
    desc: List of registers, except PC
    bits: 0..15

  - name: CRn
    arg: co_reg
    desc: First source coprocessor register
    bits: 16..20

  - name: CRm
    arg: co_reg
    desc: Second source coprocessor register
    bits: 0..4

  - name: CRd
    arg: co_reg
    desc: Destination coprocessor register
    bits: 12..16

  - name: rotated_immed_8
    arg: u_imm
    desc: 8-bit immediate
    bits: 0..8
    ops:
      - type: RotateRight
        bits: 8..12
        shift: 1

  - name: immed_24
    arg: u_imm
    desc: 24-bit immediate
    bits: 0..24

  - name: immedH
    arg: u_imm
    desc: High nibble immediate
    bits: 8..12

  - name: immedL
    arg: u_imm
    desc: Low nibble immediate
    bits: 0..4

  - name: shift_imm
    desc: Immediate shift offset
    args:
      - name: op
        arg: shift
        bits: 5..7
      - name: imm
        arg: shift_imm
        bits: 7..12

  - name: shift_reg
    desc: Register shift offset
    args:
      - name: op
        arg: shift
        bits: 5..7
      - name: reg
        arg: reg
        bits: 8..12

  - name: U
    arg: add
    desc: Add (1) or subtract (0)
    bits: 23..24

  - name: R
    arg: status_reg
    desc: Move SPSR (1) or CPSR (0)
    bits: 22..23

  - name: offset_8
    arg: offset
    desc: 8-bit immediate offset
    bits: 0..8
    ops:
      - type: LeftShift
        value: 2
      - type: Negate
        bits: 23..24

  - name: offset_12
    arg: offset
    desc: 12-bit immediate offset
    bits: 0..12
    ops:
      - type: Negate
        bits: 23..24

  - name: option
    arg: co_option
    desc: Additional instruction options for coprocessor
    bits: 0..8

  - name: H
    arg: blx_half
    desc: Add 2 to BLX target address
    bits: 24..25

  - name: signed_immed_24
    arg: s_imm
    desc: Signed 24-bit immediate
    bits: 0..24

  - name: blx_offset
    arg: s_imm
    desc: 24-bit signed BLX target offset
    bits: 0..24
    ops:
      - type: LeftShift
        value: 2
      - type: Or
        bits: 24..25
        shift: 1

  - name: immed_16
    arg: u_imm
    desc: 16-bit immediate in bits 0..4 and 8..20
    bits: 0..4
    ops:
      - type: Or
        bits: 8..20
        shift: 4

  - name: field_mask
    arg: status_mask
    desc: Status fields to set
    bits: 16..20

  - name: opcode
    arg: co_opcode
    desc: Coprocessor operation to perform (user-defined)
    bits: 4..8

  - name: codat_opcode_1
    arg: co_opcode
    desc: Coprocessor operation to perform (user-defined, used by CDP instruction)
    bits: 20..24

  - name: comov_opcode_1
    arg: co_opcode
    desc: Coprocessor operation to perform (user-defined, used by MCR/MRC instructions)
    bits: 21..24

  - name: opcode_2
    arg: co_opcode
    desc: Coprocessor operation to perform (user-defined)
    bits: 5..8

  - name: coproc
    arg: coproc_num
    desc: Coprocessor number
    bits: 8..12

modifiers:
  - name: S
    desc: Update condition status flags
    bitmask: 0x00100000
    pattern: 0x00100000
    suffix: s

  - name: L
    desc: Long coprocessor load (e.g. double instead of float)
    bitmask: 0x00400000
    pattern: 0x00400000
    suffix: l

  - name: y
    desc: Second multiply operand in bottom (0) or top (1) half
    bitmask: 0x00000040
    pattern: 0x00000040
    suffix: t
    nsuffix: b

  - name: x
    desc: First multiply operand in bottom (0) or top (1) half
    bitmask: 0x00000020
    pattern: 0x00000020
    suffix: t
    nsuffix: b

  - name: cond
    desc: Condition code
    bitmask: 0xf0000000
    cases:
      - name: eq
        suffix: eq
        desc: Equal
        pattern: 0x00000000
      - name: ne
        suffix: ne
        desc: Not equal
        pattern: 0x10000000
      - name: hs
        suffix: hs
        desc: Unsigned higher or same
        pattern: 0x20000000
      - name: lo
        suffix: lo
        desc: Unsigned lower
        pattern: 0x30000000
      - name: mi
        suffix: mi
        desc: Minus/negative
        pattern: 0x40000000
      - name: pl
        suffix: pl
        desc: Plus/positive or zero
        pattern: 0x50000000
      - name: vs
        suffix: vs
        desc: Overflow
        pattern: 0x60000000
      - name: vc
        suffix: vc
        desc: No overflow
        pattern: 0x70000000
      - name: hi
        suffix: hi
        desc: Unsigned higher
        pattern: 0x80000000
      - name: ls
        suffix: ls
        desc: Unsigned lower or same
        pattern: 0x90000000
      - name: ge
        suffix: ge
        desc: Signed greater than or equal
        pattern: 0xa0000000
      - name: lt
        suffix: lt
        desc: Signed less than
        pattern: 0xb0000000
      - name: gt
        suffix: gt
        desc: Signed greater than
        pattern: 0xc0000000
      - name: le
        suffix: le
        desc: Signed less than or equal
        pattern: 0xd0000000
      - name: al
        desc: Always
        pattern: 0xe0000000

  - name: addr_data
    desc: Data-processing operands
    cases:
      - name: imm
        desc: Immediate
        bitmask: 0x0e000000
        pattern: 0x02000000
        args: [rotated_immed_8]
      - name: reg
        desc: Register
        bitmask: 0x0e000ff0
        pattern: 0x00000000
        args: [Rm]
        uses: [Rm]
      - name: shift_imm
        desc: Shift by immediate
        bitmask: 0x0e000010
        pattern: 0x00000000
        args: [Rm, shift_imm]
        uses: [Rm]
      - name: shift_reg
        desc: Shift by register
        bitmask: 0x0e000090
        pattern: 0x00000010
        args: [Rm, shift_reg]
        uses: [shift_reg, Rm]
      - name: rrx
        desc: Rotate right with extend
        bitmask: 0x0e000ff0
        pattern: 0x00000060
        args: [Rm]
        uses: [Rm]

  - name: addr_ldr_str
    desc: Load and Store Word or Unsigned Byte
    cases:
      - name: imm
        desc: Immediate offset
        bitmask: 0x0f200000
        pattern: 0x05000000
        args: [Rn, offset_12]
        uses: [Rn]
      - name: reg
        desc: Register offset
        bitmask: 0x0f200ff0
        pattern: 0x07000000
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: scl
        desc: Scaled register offset
        bitmask: 0x0f200010
        pattern: 0x07000000
        args: [Rn, U, Rm, shift_imm]
        uses: [Rn, Rm]
      - name: imm_pre
        desc: Immediate pre-indexed
        bitmask: 0x0f200000
        pattern: 0x05200000
        args: [Rn, offset_12]
        uses: [Rn]
      - name: reg_pre
        desc: Register pre-indexed
        bitmask: 0x0f200ff0
        pattern: 0x07200000
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: scl_pre
        desc: Scaled register pre-indexed
        bitmask: 0x0f200010
        pattern: 0x07200000
        args: [Rn, U, Rm, shift_imm]
        uses: [Rn]
      - name: imm_post
        desc: Immediate post-indexed
        bitmask: 0x0f200000
        pattern: 0x04000000
        args: [Rn, offset_12]
        uses: [Rn]
      - name: reg_post
        desc: Register post-indexed
        bitmask: 0x0f200ff0
        pattern: 0x06000000
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: scl_post
        desc: Scaled register post-indexed
        bitmask: 0x0f200010
        pattern: 0x06000000
        args: [Rn, U, Rm, shift_imm]
        uses: [Rn]

  - name: addr_ldrt_strt
    desc: Load and Store Word or Unsigned Byte with Translation
    cases:
      - name: imm_post
        desc: Immediate post-indexed
        bitmask: 0x0f200000
        pattern: 0x04200000
        args: [Rn, offset_12]
        uses: [Rn]
      - name: reg_post
        desc: Register post-indexed
        bitmask: 0x0f200ff0
        pattern: 0x06200000
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: scl_post
        desc: Scaled register post-indexed
        bitmask: 0x0f200010
        pattern: 0x06200000
        args: [Rn, U, Rm, shift_imm]
        uses: [Rn]

  - name: addr_misc_ldr_str
    desc: Miscellaneous Loads and Stores
    cases:
      - name: imm
        desc: Immediate offset
        bitmask: 0x0f600090
        pattern: 0x01400090
        args: [Rn, U, immedH, immedL]
        uses: [Rn]
      - name: reg
        desc: Register offset
        bitmask: 0x0f600f90
        pattern: 0x01000090
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: imm_pre
        desc: Immediate pre-indexed
        bitmask: 0x0f600090
        pattern: 0x01600090
        args: [Rn, U, immedH, immedL]
        uses: [Rn]
      - name: reg_pre
        desc: Register pre-indexed
        bitmask: 0x0f600f90
        pattern: 0x01200090
        args: [Rn, U, Rm]
        uses: [Rn, Rm]
      - name: imm_post
        desc: Immediate post-indexed
        bitmask: 0x0f600090
        pattern: 0x00400090
        args: [Rn, U, immedH, immedL]
        uses: [Rn]
      - name: reg_post
        desc: Register post-indexed
        bitmask: 0x0f600f90
        pattern: 0x00000090
        args: [Rn, U, Rm]
        uses: [Rn, Rm]

  - name: addr_ldm_stm
    desc: Load and Store Multiple
    bitmask: 0x01800000
    cases:
      - name: ia
        suffix: ia
        desc: Increment After
        pattern: 0x00800000
      - name: ib
        suffix: ib
        desc: Increment Before
        pattern: 0x01800000
      - name: da
        suffix: da
        desc: Decrement After
        pattern: 0x00000000
      - name: db
        suffix: sb
        desc: Decrement Before
        pattern: 0x01000000

  - name: addr_coproc
    desc: Load and Store Coprocessor
    cases:
      - name: imm
        desc: Immediate offset
        bitmask: 0x01200000
        pattern: 0x01000000
        args: [Rn, offset_8]
        uses: [Rn]
      - name: imm_pre
        desc: Immediate pre-indexed
        bitmask: 0x01200000
        pattern: 0x01200000
        args: [Rn, offset_8]
        uses: [Rn]
      - name: imm_post
        desc: Immediate post-indexed
        bitmask: 0x01200000
        pattern: 0x00200000
        args: [Rn, offset_8]
        uses: [Rn]
      - name: unidx
        desc: Unindexed
        bitmask: 0x01a00000
        pattern: 0x00800000
        args: [Rn, option]
        uses: [Rn]

opcodes:
  - name: adc
    desc: Add with Carry
    bitmask: 0x0de00000
    pattern: 0x00a00000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: add
    desc: Add
    bitmask: 0x0de00000
    pattern: 0x00800000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: and
    desc: Bitwise AND
    bitmask: 0x0de00000
    pattern: 0x00000000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: b
    desc: Branch
    bitmask: 0x0f000000
    pattern: 0x0a000000
    modifiers: [cond]
    args: [signed_immed_24]

  - name: bl
    desc: Branch and Link
    bitmask: 0x0f000000
    pattern: 0x0b000000
    modifiers: [cond]
    args: [signed_immed_24]

  - name: bic
    desc: Bit Clear
    bitmask: 0x0de00000
    pattern: 0x01c00000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: bkpt
    desc: Breakpoint
    bitmask: 0xfff000f0
    pattern: 0xe1200070
    args: [immed_16]

  - name: blx$i
    desc: Branch and Link and Exchange to Thumb (immediate target)
    bitmask: 0xfe000000
    pattern: 0xfa000000
    args: [blx_offset]

  - name: blx$r
    desc: Branch and Link and Exchange to Thumb (register target)
    bitmask: 0x0ffffff0
    pattern: 0x012fff30
    modifiers: [cond]
    args: [Rm]
    uses: [Rm]

  - name: bx
    desc: Branch and Exchange to Thumb
    bitmask: 0x0ffffff0
    pattern: 0x012fff10
    modifiers: [cond]
    args: [Rm]
    uses: [Rm]

  - name: cdp
    desc: Coprocessor Data Processing
    bitmask: 0x0f000010
    pattern: 0x0e000000
    modifiers: [cond]
    args: [coproc, codat_opcode_1, CRd, CRn, CRm, opcode_2]
    defs: [CRd]
    uses: [CRn, CRm]

  - name: cdp2
    desc: Coprocessor Data Processing (unconditional, extended)
    bitmask: 0xff000010
    pattern: 0xfe000000
    args: [coproc, codat_opcode_1, CRd, CRn, CRm, opcode_2]
    defs: [CRd]
    uses: [CRn, CRm]

  - name: clz
    desc: Count Leading Zeros
    bitmask: 0x0fff0ff0
    pattern: 0x016f0f10
    modifiers: [cond]
    args: [Rd, Rm]
    defs: [Rd]
    uses: [Rm]

  - name: cmn
    desc: Compare Negative
    bitmask: 0x0df0f000
    pattern: 0x01700000
    modifiers: [cond, addr_data]
    args: [Rn]
    uses: [Rn]

  - name: cmp
    desc: Compare
    bitmask: 0x0df0f000
    pattern: 0x01500000
    modifiers: [cond, addr_data]
    args: [Rn]
    uses: [Rn]

  - name: eor
    desc: Bitwise Exclusive OR
    bitmask: 0x0de00000
    pattern: 0x00200000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: ldc
    desc: Load Coprocessor
    bitmask: 0x0e100000
    pattern: 0x0c100000
    modifiers: [cond, L, addr_coproc]
    args: [coproc, CRd]
    defs: [CRd]

  - name: ldc2
    desc: Load Coprocessor (unconditional, extended)
    bitmask: 0xfe100000
    pattern: 0xfc100000
    modifiers: [L, addr_coproc]
    args: [coproc, CRd]
    defs: [CRd]

  - name: ldm$w
    desc: Load Multiple (writeback)
    bitmask: 0x0e700000
    pattern: 0x08300000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    defs: [Rn, registers]
    uses: [Rn]

  - name: ldm
    desc: Load Multiple
    bitmask: 0x0e700000
    pattern: 0x08100000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    defs: [registers]
    uses: [Rn]

  - name: ldm$p
    desc: Load Multiple (privileged)
    bitmask: 0x0e708000
    pattern: 0x08500000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers_without_pc]
    defs: [registers_without_pc]
    uses: [Rn]

  - name: ldm$pc$w
    desc: Load Multiple (including PC, writeback)
    bitmask: 0x0e708000
    pattern: 0x08708000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    defs: [Rn, registers]
    uses: [Rn]

  - name: ldm$pc
    desc: Load Multiple (including PC)
    bitmask: 0x0e708000
    pattern: 0x08508000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    defs: [registers]
    uses: [Rn]

  - name: ldr
    desc: Load Register
    bitmask: 0x0c500000
    pattern: 0x04100000
    modifiers: [cond, addr_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$b
    desc: Load Register Byte
    suffix: b
    bitmask: 0x0c500000
    pattern: 0x04500000
    modifiers: [cond, addr_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$bt
    desc: Load Register Byte with Translation
    suffix: bt
    bitmask: 0x0d700000
    pattern: 0x04700000
    modifiers: [cond, addr_ldrt_strt]
    args: [Rd]
    defs: [Rd]

  - name: ldr$d
    desc: Load Registers Doubleword
    suffix: d
    bitmask: 0x0e1000f0
    pattern: 0x000000d0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$h
    desc: Load Register Halfword
    suffix: h
    bitmask: 0x0e1000f0
    pattern: 0x001000b0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$sb
    desc: Load Register Signed Byte
    suffix: sb
    bitmask: 0x0e1000f0
    pattern: 0x001000d0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$sh
    desc: Load Register Signed Halfword
    suffix: sh
    bitmask: 0x0e1000f0
    pattern: 0x001000f0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    defs: [Rd]

  - name: ldr$t
    desc: Load Register with Translation
    suffix: t
    bitmask: 0x0d700000
    pattern: 0x04300000
    modifiers: [cond, addr_ldrt_strt]
    args: [Rd]
    defs: [Rd]

  - name: mcr
    desc: Move to Coprocessor from ARM Register
    bitmask: 0x0f100010
    pattern: 0x0e000010
    modifiers: [cond]
    args: [coproc, comov_opcode_1, Rd, CRn, CRm, opcode_2]
    defs: [CRn, CRm]
    uses: [Rd, CRm]

  - name: mcr2
    desc: Move to Coprocessor from ARM Register (unconditional, extended)
    bitmask: 0xff100010
    pattern: 0xfe000010
    args: [coproc, comov_opcode_1, Rd, CRn, CRm, opcode_2]
    defs: [CRn, CRm]
    uses: [Rd, CRm]

  - name: mcrr
    desc: Move to Coprocessor from two ARM Registers
    bitmask: 0x0ff00000
    pattern: 0x0c400000
    modifiers: [cond]
    args: [coproc, opcode, Rd, Rn, CRm]
    defs: [CRm]
    uses: [Rn, Rd]

  - name: mla
    desc: Multiply Accumulate
    bitmask: 0x0fe000f0
    pattern: 0x00200090
    modifiers: [cond, S]
    args: [Rd, Rm, Rs, Rn]
    defs: [Rd]
    uses: [Rm, Rs, Rn]

  - name: mov
    desc: Move
    bitmask: 0x0def0000
    pattern: 0x01a00000
    modifiers: [cond, S, addr_data]
    args: [Rd]
    defs: [Rd]

  - name: mrc
    desc: Move to ARM Register from Coprocessor
    bitmask: 0x0f100010
    pattern: 0x0e100010
    modifiers: [cond]
    args: [coproc, comov_opcode_1, Rd, CRn, CRm, opcode_2]
    defs: [Rd, CRm]
    uses: [CRn, CRm]

  - name: mrc2
    desc: Move to ARM Register from Coprocessor (unconditional, extended)
    bitmask: 0xff100010
    pattern: 0xfe100010
    modifiers: []
    args: [coproc, comov_opcode_1, Rd, CRn, CRm, opcode_2]
    defs: [Rd, CRm]
    uses: [CRn, CRm]

  - name: mrrc
    desc: Move to two ARM Registers from Coprocessor
    bitmask: 0x0ff00000
    pattern: 0x0c500000
    modifiers: [cond]
    args: [coproc, opcode, Rd, Rn, CRm]
    defs: [Rd, Rn]
    uses: [CRm]

  - name: mrs
    desc: Move to ARM Register from Status Register
    bitmask: 0x0fbf0fff
    pattern: 0x010f0000
    modifiers: [cond]
    args: [Rd, R]
    defs: [Rd]
    uses: [R]

  - name: msr$i
    desc: Move to Status Register from ARM Register
    bitmask: 0x0fb0f000
    pattern: 0x0320f000
    modifiers: [cond]
    args: [R, field_mask, rotated_immed_8]
    defs: [R]

  - name: msr
    desc: Move to Status Register from ARM Register
    bitmask: 0x0fb0fff0
    pattern: 0x0120f000
    modifiers: [cond]
    args: [R, field_mask, Rm]
    defs: [R]
    uses: [Rm]

  - name: mul
    desc: Multiply
    bitmask: 0x0fe0f0f0
    pattern: 0x00000090
    modifiers: [cond, S]
    args: [RdHi, Rm, Rs]
    defs: [RdHi]
    uses: [Rm, Rs]

  - name: mvn
    desc: Move Not
    bitmask: 0x0def0000
    pattern: 0x01e00000
    modifiers: [cond, S, addr_data]
    args: [Rd]
    defs: [Rd]

  - name: orr
    desc: Logical OR
    bitmask: 0x0de00000
    pattern: 0x01800000
    modifiers: [cond, S, addr_data]
    args: [Rn, Rd]
    defs: [Rd]
    uses: [Rn]

  - name: pld
    desc: Preload Data
    bitmask: 0xfd70f000
    pattern: 0xf550f000
    modifiers: [addr_ldr_str]

  - name: qadd
    desc: Saturating Add
    bitmask: 0x0ff00ff0
    pattern: 0x01000050
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: qdadd
    desc: Saturating Double and Add
    bitmask: 0x0ff00ff0
    pattern: 0x01400050
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: qdsub
    desc: Saturating Double and Subtract
    bitmask: 0x0ff00ff0
    pattern: 0x01600050
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: qsub
    desc: Saturating Subtract
    bitmask: 0x0ff00ff0
    pattern: 0x01200050
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: rsb
    desc: Reverse Subtract
    bitmask: 0x0de00000
    pattern: 0x00600000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: rsc
    desc: Reverse Subtract with Carry
    bitmask: 0x0de00000
    pattern: 0x00e00000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: sbc
    desc: Subtract with Carry
    bitmask: 0x0de00000
    pattern: 0x00c00000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: smla
    desc: Signed Multiply Accumulate
    bitmask: 0x0ff00090
    pattern: 0x01000080
    modifiers: [x, y, cond]
    args: [Rd, Rm, Rs, Rn]
    defs: [Rd]
    uses: [Rm, Rs, Rn]

  - name: smlal
    desc: Signed Multiply Accumulate Long
    bitmask: 0x0fe000f0
    pattern: 0x00e00090
    modifiers: [cond, S]
    args: [RdLo, RdHi, Rm, Rs]
    defs: [RdLo, RdHi]
    uses: [RdLo, RdHi, Rm, Rs]

  - name: smlal$xy
    desc: Signed Multiply Accumulate Long
    bitmask: 0x0ff00090
    pattern: 0x01400080
    modifiers: [x, y, cond]
    args: [RdLo, RdHi, Rm, Rs]
    defs: [RdLo, RdHi]
    uses: [RdLo, RdHi, Rm, Rs]

  - name: smlaw
    desc: Signed Multiply Accumulate Word
    bitmask: 0x0ff000b0
    pattern: 0x01200080
    modifiers: [y, cond]
    args: [Rd, Rm, Rs, Rn]
    defs: [Rd]
    uses: [Rm, Rs, Rn]

  - name: smul
    desc: Signed Multiply
    bitmask: 0x0ff0f090
    pattern: 0x01600080
    modifiers: [x, y, cond]
    args: [RdHi, Rm, Rs]
    defs: [RdHi]
    uses: [Rm, Rs]

  - name: smull
    desc: Signed Multiply Long
    bitmask: 0x0fe000f0
    pattern: 0x00c00090
    modifiers: [cond, S]
    args: [RdLo, RdHi, Rm, Rs]
    defs: [RdLo, RdHi]
    uses: [Rs, Rm]

  - name: smulw
    desc: Signed Multiply Word
    bitmask: 0x0ff0f0b0
    pattern: 0x012000a0
    modifiers: [y, cond]
    args: [RdHi, Rm, Rs]
    defs: [RdHi]
    uses: [Rm, Rs]

  - name: stc
    desc: Store Coprocessor
    bitmask: 0x0e100000
    pattern: 0x0c000000
    modifiers: [cond, L, addr_coproc]
    args: [coproc, CRd]
    defs: [CRd]

  - name: stm
    desc: Store Multiple
    bitmask: 0x0e700000
    pattern: 0x08000000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    uses: [Rn, registers]

  - name: stm$w
    desc: Store Multiple (writeback)
    bitmask: 0x0e700000
    pattern: 0x08200000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    defs: [Rn]
    uses: [Rn, registers]

  - name: stm$p
    desc: Store Multiple (privileged)
    bitmask: 0x0e700000
    pattern: 0x08400000
    modifiers: [cond, addr_ldm_stm]
    args: [Rn, registers]
    uses: [Rn, registers]

  - name: str
    desc: Store Register
    bitmask: 0x0c500000
    pattern: 0x04000000
    modifiers: [cond, addr_ldr_str]
    args: [Rd]
    uses: [Rd]

  - name: str$b
    desc: Store Register Byte
    suffix: b
    bitmask: 0x0c500000
    pattern: 0x04400000
    modifiers: [cond, addr_ldr_str]
    args: [Rd]
    uses: [Rd]

  - name: str$bt
    desc: Store Register Byte with Translation
    suffix: bt
    bitmask: 0x0d700000
    pattern: 0x04600000
    modifiers: [cond, addr_ldrt_strt]
    args: [Rd]
    uses: [Rd]

  - name: str$d
    desc: Store Registers Doubleword
    suffix: d
    bitmask: 0x0e1000f0
    pattern: 0x000000f0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    uses: [Rd]

  - name: str$h
    desc: Store Register Halfword
    suffix: h
    bitmask: 0x0e1000f0
    pattern: 0x000000b0
    modifiers: [cond, addr_misc_ldr_str]
    args: [Rd]
    uses: [Rd]

  - name: str$t
    desc: Store Register with Translation
    suffix: t
    bitmask: 0x0d700000
    pattern: 0x04200000
    modifiers: [cond, addr_ldrt_strt]
    args: [Rd]
    uses: [Rd]

  - name: sub
    desc: Subtract
    bitmask: 0x0de00000
    pattern: 0x00400000
    modifiers: [cond, S, addr_data]
    args: [Rd, Rn]
    defs: [Rd]
    uses: [Rn]

  - name: swi
    desc: Software Interrupt
    bitmask: 0x0f000000
    pattern: 0x0f000000
    modifiers: [cond]
    args: [immed_24]

  - name: swp
    desc: Swap
    bitmask: 0x0ff00ff0
    pattern: 0x01000090
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: swpb
    desc: Swap Byte
    bitmask: 0x0ff00ff0
    pattern: 0x01400090
    modifiers: [cond]
    args: [Rd, Rm, Rn]
    defs: [Rd]
    uses: [Rm, Rn]

  - name: teq
    desc: Test Equivalence
    bitmask: 0x0df0f000
    pattern: 0x01300000
    modifiers: [cond, addr_data]
    args: [Rn]
    uses: [Rn]

  - name: tst
    desc: Test
    bitmask: 0x0df0f000
    pattern: 0x01100000
    modifiers: [cond, addr_data]
    args: [Rn]
    uses: [Rn]

  - name: umlal
    desc: Unsigned Multiply Accumulate Long
    bitmask: 0x0fe000f0
    pattern: 0x00a00090
    modifiers: [cond, S]
    args: [RdLo, RdHi, Rm, Rs]
    defs: [RdLo, RdHi]
    uses: [RdLo, RdHi, Rm, Rs]

  - name: umull
    desc: Unsigned Multiply Long
    bitmask: 0x0fe000f0
    pattern: 0x00800090
    modifiers: [cond, S]
    args: [RdLo, RdHi, Rm, Rs]
    defs: [RdLo, RdHi]
    uses: [Rm, Rs]
